
Infotainment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004880  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a0  00800060  00004880  00004914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800200  00800200  00004ab4  2**0
                  ALLOC
  3 .stab         00002664  00000000  00000000  00004ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011c8  00000000  00000000  00007118  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000082e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ef  00000000  00000000  00008480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002f63  00000000  00000000  0000866f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000147c  00000000  00000000  0000b5d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001406  00000000  00000000  0000ca4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000de54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000352  00000000  00000000  0000e014  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021b4  00000000  00000000  0000e366  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  0001051a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 25 19 	jmp	0x324a	; 0x324a <__vector_10>
      2c:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 30       	cpi	r26, 0x00	; 0
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 32       	cpi	r26, 0x20	; 32
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 22 	call	0x44e4	; 0x44e4 <main>
      8a:	0c 94 3e 24 	jmp	0x487c	; 0x487c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__subsf3>
      be:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__udivdi3>:
      ea:	ae e5       	ldi	r26, 0x5E	; 94
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 07 24 	jmp	0x480e	; 0x480e <__prologue_saves__>
      f6:	a8 e0       	ldi	r26, 0x08	; 8
      f8:	4e 01       	movw	r8, r28
      fa:	08 94       	sec
      fc:	81 1c       	adc	r8, r1
      fe:	91 1c       	adc	r9, r1
     100:	f4 01       	movw	r30, r8
     102:	6a 2e       	mov	r6, r26
     104:	11 92       	st	Z+, r1
     106:	6a 94       	dec	r6
     108:	e9 f7       	brne	.-6      	; 0x104 <__udivdi3+0x1a>
     10a:	29 83       	std	Y+1, r18	; 0x01
     10c:	3a 83       	std	Y+2, r19	; 0x02
     10e:	4b 83       	std	Y+3, r20	; 0x03
     110:	5c 83       	std	Y+4, r21	; 0x04
     112:	6d 83       	std	Y+5, r22	; 0x05
     114:	7e 83       	std	Y+6, r23	; 0x06
     116:	8f 83       	std	Y+7, r24	; 0x07
     118:	98 87       	std	Y+8, r25	; 0x08
     11a:	ce 01       	movw	r24, r28
     11c:	09 96       	adiw	r24, 0x09	; 9
     11e:	fc 01       	movw	r30, r24
     120:	11 92       	st	Z+, r1
     122:	aa 95       	dec	r26
     124:	e9 f7       	brne	.-6      	; 0x120 <__udivdi3+0x36>
     126:	a9 86       	std	Y+9, r10	; 0x09
     128:	ba 86       	std	Y+10, r11	; 0x0a
     12a:	cb 86       	std	Y+11, r12	; 0x0b
     12c:	dc 86       	std	Y+12, r13	; 0x0c
     12e:	ed 86       	std	Y+13, r14	; 0x0d
     130:	fe 86       	std	Y+14, r15	; 0x0e
     132:	0f 87       	std	Y+15, r16	; 0x0f
     134:	18 8b       	std	Y+16, r17	; 0x10
     136:	29 84       	ldd	r2, Y+9	; 0x09
     138:	3a 84       	ldd	r3, Y+10	; 0x0a
     13a:	4b 84       	ldd	r4, Y+11	; 0x0b
     13c:	5c 84       	ldd	r5, Y+12	; 0x0c
     13e:	ed 84       	ldd	r14, Y+13	; 0x0d
     140:	fe 84       	ldd	r15, Y+14	; 0x0e
     142:	0f 85       	ldd	r16, Y+15	; 0x0f
     144:	18 89       	ldd	r17, Y+16	; 0x10
     146:	69 80       	ldd	r6, Y+1	; 0x01
     148:	7a 80       	ldd	r7, Y+2	; 0x02
     14a:	8b 80       	ldd	r8, Y+3	; 0x03
     14c:	9c 80       	ldd	r9, Y+4	; 0x04
     14e:	6d a6       	std	Y+45, r6	; 0x2d
     150:	7e a6       	std	Y+46, r7	; 0x2e
     152:	8f a6       	std	Y+47, r8	; 0x2f
     154:	98 aa       	std	Y+48, r9	; 0x30
     156:	6d 80       	ldd	r6, Y+5	; 0x05
     158:	7e 80       	ldd	r7, Y+6	; 0x06
     15a:	8f 80       	ldd	r8, Y+7	; 0x07
     15c:	98 84       	ldd	r9, Y+8	; 0x08
     15e:	e1 14       	cp	r14, r1
     160:	f1 04       	cpc	r15, r1
     162:	01 05       	cpc	r16, r1
     164:	11 05       	cpc	r17, r1
     166:	09 f0       	breq	.+2      	; 0x16a <__udivdi3+0x80>
     168:	b3 c3       	rjmp	.+1894   	; 0x8d0 <__stack+0x71>
     16a:	62 14       	cp	r6, r2
     16c:	73 04       	cpc	r7, r3
     16e:	84 04       	cpc	r8, r4
     170:	95 04       	cpc	r9, r5
     172:	08 f0       	brcs	.+2      	; 0x176 <__udivdi3+0x8c>
     174:	3d c1       	rjmp	.+634    	; 0x3f0 <__udivdi3+0x306>
     176:	00 e0       	ldi	r16, 0x00	; 0
     178:	20 16       	cp	r2, r16
     17a:	00 e0       	ldi	r16, 0x00	; 0
     17c:	30 06       	cpc	r3, r16
     17e:	01 e0       	ldi	r16, 0x01	; 1
     180:	40 06       	cpc	r4, r16
     182:	00 e0       	ldi	r16, 0x00	; 0
     184:	50 06       	cpc	r5, r16
     186:	88 f4       	brcc	.+34     	; 0x1aa <__udivdi3+0xc0>
     188:	1f ef       	ldi	r17, 0xFF	; 255
     18a:	21 16       	cp	r2, r17
     18c:	31 04       	cpc	r3, r1
     18e:	41 04       	cpc	r4, r1
     190:	51 04       	cpc	r5, r1
     192:	39 f0       	breq	.+14     	; 0x1a2 <__udivdi3+0xb8>
     194:	30 f0       	brcs	.+12     	; 0x1a2 <__udivdi3+0xb8>
     196:	48 e0       	ldi	r20, 0x08	; 8
     198:	e4 2e       	mov	r14, r20
     19a:	f1 2c       	mov	r15, r1
     19c:	01 2d       	mov	r16, r1
     19e:	11 2d       	mov	r17, r1
     1a0:	18 c0       	rjmp	.+48     	; 0x1d2 <__udivdi3+0xe8>
     1a2:	ee 24       	eor	r14, r14
     1a4:	ff 24       	eor	r15, r15
     1a6:	87 01       	movw	r16, r14
     1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <__udivdi3+0xe8>
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	22 16       	cp	r2, r18
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	32 06       	cpc	r3, r18
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	42 06       	cpc	r4, r18
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	52 06       	cpc	r5, r18
     1ba:	30 f0       	brcs	.+12     	; 0x1c8 <__udivdi3+0xde>
     1bc:	38 e1       	ldi	r19, 0x18	; 24
     1be:	e3 2e       	mov	r14, r19
     1c0:	f1 2c       	mov	r15, r1
     1c2:	01 2d       	mov	r16, r1
     1c4:	11 2d       	mov	r17, r1
     1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <__udivdi3+0xe8>
     1c8:	20 e1       	ldi	r18, 0x10	; 16
     1ca:	e2 2e       	mov	r14, r18
     1cc:	f1 2c       	mov	r15, r1
     1ce:	01 2d       	mov	r16, r1
     1d0:	11 2d       	mov	r17, r1
     1d2:	d2 01       	movw	r26, r4
     1d4:	c1 01       	movw	r24, r2
     1d6:	0e 2c       	mov	r0, r14
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__udivdi3+0xf8>
     1da:	b6 95       	lsr	r27
     1dc:	a7 95       	ror	r26
     1de:	97 95       	ror	r25
     1e0:	87 95       	ror	r24
     1e2:	0a 94       	dec	r0
     1e4:	d2 f7       	brpl	.-12     	; 0x1da <__udivdi3+0xf0>
     1e6:	89 57       	subi	r24, 0x79	; 121
     1e8:	9f 4f       	sbci	r25, 0xFF	; 255
     1ea:	dc 01       	movw	r26, r24
     1ec:	2c 91       	ld	r18, X
     1ee:	80 e2       	ldi	r24, 0x20	; 32
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	a0 e0       	ldi	r26, 0x00	; 0
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	8e 19       	sub	r24, r14
     1f8:	9f 09       	sbc	r25, r15
     1fa:	a0 0b       	sbc	r26, r16
     1fc:	b1 0b       	sbc	r27, r17
     1fe:	7c 01       	movw	r14, r24
     200:	8d 01       	movw	r16, r26
     202:	e2 1a       	sub	r14, r18
     204:	f1 08       	sbc	r15, r1
     206:	01 09       	sbc	r16, r1
     208:	11 09       	sbc	r17, r1
     20a:	e1 14       	cp	r14, r1
     20c:	f1 04       	cpc	r15, r1
     20e:	01 05       	cpc	r16, r1
     210:	11 05       	cpc	r17, r1
     212:	a1 f1       	breq	.+104    	; 0x27c <__udivdi3+0x192>
     214:	0e 2c       	mov	r0, r14
     216:	04 c0       	rjmp	.+8      	; 0x220 <__udivdi3+0x136>
     218:	22 0c       	add	r2, r2
     21a:	33 1c       	adc	r3, r3
     21c:	44 1c       	adc	r4, r4
     21e:	55 1c       	adc	r5, r5
     220:	0a 94       	dec	r0
     222:	d2 f7       	brpl	.-12     	; 0x218 <__udivdi3+0x12e>
     224:	a4 01       	movw	r20, r8
     226:	93 01       	movw	r18, r6
     228:	0e 2c       	mov	r0, r14
     22a:	04 c0       	rjmp	.+8      	; 0x234 <__udivdi3+0x14a>
     22c:	22 0f       	add	r18, r18
     22e:	33 1f       	adc	r19, r19
     230:	44 1f       	adc	r20, r20
     232:	55 1f       	adc	r21, r21
     234:	0a 94       	dec	r0
     236:	d2 f7       	brpl	.-12     	; 0x22c <__udivdi3+0x142>
     238:	80 e2       	ldi	r24, 0x20	; 32
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	8e 19       	sub	r24, r14
     23e:	9f 09       	sbc	r25, r15
     240:	6d a4       	ldd	r6, Y+45	; 0x2d
     242:	7e a4       	ldd	r7, Y+46	; 0x2e
     244:	8f a4       	ldd	r8, Y+47	; 0x2f
     246:	98 a8       	ldd	r9, Y+48	; 0x30
     248:	04 c0       	rjmp	.+8      	; 0x252 <__udivdi3+0x168>
     24a:	96 94       	lsr	r9
     24c:	87 94       	ror	r8
     24e:	77 94       	ror	r7
     250:	67 94       	ror	r6
     252:	8a 95       	dec	r24
     254:	d2 f7       	brpl	.-12     	; 0x24a <__udivdi3+0x160>
     256:	62 2a       	or	r6, r18
     258:	73 2a       	or	r7, r19
     25a:	84 2a       	or	r8, r20
     25c:	95 2a       	or	r9, r21
     25e:	ad a4       	ldd	r10, Y+45	; 0x2d
     260:	be a4       	ldd	r11, Y+46	; 0x2e
     262:	cf a4       	ldd	r12, Y+47	; 0x2f
     264:	d8 a8       	ldd	r13, Y+48	; 0x30
     266:	04 c0       	rjmp	.+8      	; 0x270 <__udivdi3+0x186>
     268:	aa 0c       	add	r10, r10
     26a:	bb 1c       	adc	r11, r11
     26c:	cc 1c       	adc	r12, r12
     26e:	dd 1c       	adc	r13, r13
     270:	ea 94       	dec	r14
     272:	d2 f7       	brpl	.-12     	; 0x268 <__udivdi3+0x17e>
     274:	ad a6       	std	Y+45, r10	; 0x2d
     276:	be a6       	std	Y+46, r11	; 0x2e
     278:	cf a6       	std	Y+47, r12	; 0x2f
     27a:	d8 aa       	std	Y+48, r13	; 0x30
     27c:	62 01       	movw	r12, r4
     27e:	ee 24       	eor	r14, r14
     280:	ff 24       	eor	r15, r15
     282:	cd aa       	std	Y+53, r12	; 0x35
     284:	de aa       	std	Y+54, r13	; 0x36
     286:	ef aa       	std	Y+55, r14	; 0x37
     288:	f8 ae       	std	Y+56, r15	; 0x38
     28a:	92 01       	movw	r18, r4
     28c:	81 01       	movw	r16, r2
     28e:	20 70       	andi	r18, 0x00	; 0
     290:	30 70       	andi	r19, 0x00	; 0
     292:	09 af       	std	Y+57, r16	; 0x39
     294:	1a af       	std	Y+58, r17	; 0x3a
     296:	2b af       	std	Y+59, r18	; 0x3b
     298:	3c af       	std	Y+60, r19	; 0x3c
     29a:	c4 01       	movw	r24, r8
     29c:	b3 01       	movw	r22, r6
     29e:	a7 01       	movw	r20, r14
     2a0:	96 01       	movw	r18, r12
     2a2:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     2a6:	7b 01       	movw	r14, r22
     2a8:	8c 01       	movw	r16, r24
     2aa:	c4 01       	movw	r24, r8
     2ac:	b3 01       	movw	r22, r6
     2ae:	2d a9       	ldd	r18, Y+53	; 0x35
     2b0:	3e a9       	ldd	r19, Y+54	; 0x36
     2b2:	4f a9       	ldd	r20, Y+55	; 0x37
     2b4:	58 ad       	ldd	r21, Y+56	; 0x38
     2b6:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     2ba:	c9 01       	movw	r24, r18
     2bc:	da 01       	movw	r26, r20
     2be:	3c 01       	movw	r6, r24
     2c0:	4d 01       	movw	r8, r26
     2c2:	c4 01       	movw	r24, r8
     2c4:	b3 01       	movw	r22, r6
     2c6:	29 ad       	ldd	r18, Y+57	; 0x39
     2c8:	3a ad       	ldd	r19, Y+58	; 0x3a
     2ca:	4b ad       	ldd	r20, Y+59	; 0x3b
     2cc:	5c ad       	ldd	r21, Y+60	; 0x3c
     2ce:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
     2d2:	9b 01       	movw	r18, r22
     2d4:	ac 01       	movw	r20, r24
     2d6:	87 01       	movw	r16, r14
     2d8:	ff 24       	eor	r15, r15
     2da:	ee 24       	eor	r14, r14
     2dc:	ad a4       	ldd	r10, Y+45	; 0x2d
     2de:	be a4       	ldd	r11, Y+46	; 0x2e
     2e0:	cf a4       	ldd	r12, Y+47	; 0x2f
     2e2:	d8 a8       	ldd	r13, Y+48	; 0x30
     2e4:	c6 01       	movw	r24, r12
     2e6:	aa 27       	eor	r26, r26
     2e8:	bb 27       	eor	r27, r27
     2ea:	57 01       	movw	r10, r14
     2ec:	68 01       	movw	r12, r16
     2ee:	a8 2a       	or	r10, r24
     2f0:	b9 2a       	or	r11, r25
     2f2:	ca 2a       	or	r12, r26
     2f4:	db 2a       	or	r13, r27
     2f6:	a2 16       	cp	r10, r18
     2f8:	b3 06       	cpc	r11, r19
     2fa:	c4 06       	cpc	r12, r20
     2fc:	d5 06       	cpc	r13, r21
     2fe:	e0 f4       	brcc	.+56     	; 0x338 <__udivdi3+0x24e>
     300:	08 94       	sec
     302:	61 08       	sbc	r6, r1
     304:	71 08       	sbc	r7, r1
     306:	81 08       	sbc	r8, r1
     308:	91 08       	sbc	r9, r1
     30a:	a2 0c       	add	r10, r2
     30c:	b3 1c       	adc	r11, r3
     30e:	c4 1c       	adc	r12, r4
     310:	d5 1c       	adc	r13, r5
     312:	a2 14       	cp	r10, r2
     314:	b3 04       	cpc	r11, r3
     316:	c4 04       	cpc	r12, r4
     318:	d5 04       	cpc	r13, r5
     31a:	70 f0       	brcs	.+28     	; 0x338 <__udivdi3+0x24e>
     31c:	a2 16       	cp	r10, r18
     31e:	b3 06       	cpc	r11, r19
     320:	c4 06       	cpc	r12, r20
     322:	d5 06       	cpc	r13, r21
     324:	48 f4       	brcc	.+18     	; 0x338 <__udivdi3+0x24e>
     326:	08 94       	sec
     328:	61 08       	sbc	r6, r1
     32a:	71 08       	sbc	r7, r1
     32c:	81 08       	sbc	r8, r1
     32e:	91 08       	sbc	r9, r1
     330:	a2 0c       	add	r10, r2
     332:	b3 1c       	adc	r11, r3
     334:	c4 1c       	adc	r12, r4
     336:	d5 1c       	adc	r13, r5
     338:	a2 1a       	sub	r10, r18
     33a:	b3 0a       	sbc	r11, r19
     33c:	c4 0a       	sbc	r12, r20
     33e:	d5 0a       	sbc	r13, r21
     340:	c6 01       	movw	r24, r12
     342:	b5 01       	movw	r22, r10
     344:	2d a9       	ldd	r18, Y+53	; 0x35
     346:	3e a9       	ldd	r19, Y+54	; 0x36
     348:	4f a9       	ldd	r20, Y+55	; 0x37
     34a:	58 ad       	ldd	r21, Y+56	; 0x38
     34c:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     350:	7b 01       	movw	r14, r22
     352:	8c 01       	movw	r16, r24
     354:	c6 01       	movw	r24, r12
     356:	b5 01       	movw	r22, r10
     358:	2d a9       	ldd	r18, Y+53	; 0x35
     35a:	3e a9       	ldd	r19, Y+54	; 0x36
     35c:	4f a9       	ldd	r20, Y+55	; 0x37
     35e:	58 ad       	ldd	r21, Y+56	; 0x38
     360:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     364:	c9 01       	movw	r24, r18
     366:	da 01       	movw	r26, r20
     368:	5c 01       	movw	r10, r24
     36a:	6d 01       	movw	r12, r26
     36c:	c6 01       	movw	r24, r12
     36e:	b5 01       	movw	r22, r10
     370:	29 ad       	ldd	r18, Y+57	; 0x39
     372:	3a ad       	ldd	r19, Y+58	; 0x3a
     374:	4b ad       	ldd	r20, Y+59	; 0x3b
     376:	5c ad       	ldd	r21, Y+60	; 0x3c
     378:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
     37c:	9b 01       	movw	r18, r22
     37e:	ac 01       	movw	r20, r24
     380:	87 01       	movw	r16, r14
     382:	ff 24       	eor	r15, r15
     384:	ee 24       	eor	r14, r14
     386:	8d a5       	ldd	r24, Y+45	; 0x2d
     388:	9e a5       	ldd	r25, Y+46	; 0x2e
     38a:	af a5       	ldd	r26, Y+47	; 0x2f
     38c:	b8 a9       	ldd	r27, Y+48	; 0x30
     38e:	a0 70       	andi	r26, 0x00	; 0
     390:	b0 70       	andi	r27, 0x00	; 0
     392:	e8 2a       	or	r14, r24
     394:	f9 2a       	or	r15, r25
     396:	0a 2b       	or	r16, r26
     398:	1b 2b       	or	r17, r27
     39a:	e2 16       	cp	r14, r18
     39c:	f3 06       	cpc	r15, r19
     39e:	04 07       	cpc	r16, r20
     3a0:	15 07       	cpc	r17, r21
     3a2:	c0 f4       	brcc	.+48     	; 0x3d4 <__udivdi3+0x2ea>
     3a4:	08 94       	sec
     3a6:	a1 08       	sbc	r10, r1
     3a8:	b1 08       	sbc	r11, r1
     3aa:	c1 08       	sbc	r12, r1
     3ac:	d1 08       	sbc	r13, r1
     3ae:	e2 0c       	add	r14, r2
     3b0:	f3 1c       	adc	r15, r3
     3b2:	04 1d       	adc	r16, r4
     3b4:	15 1d       	adc	r17, r5
     3b6:	e2 14       	cp	r14, r2
     3b8:	f3 04       	cpc	r15, r3
     3ba:	04 05       	cpc	r16, r4
     3bc:	15 05       	cpc	r17, r5
     3be:	50 f0       	brcs	.+20     	; 0x3d4 <__udivdi3+0x2ea>
     3c0:	e2 16       	cp	r14, r18
     3c2:	f3 06       	cpc	r15, r19
     3c4:	04 07       	cpc	r16, r20
     3c6:	15 07       	cpc	r17, r21
     3c8:	28 f4       	brcc	.+10     	; 0x3d4 <__udivdi3+0x2ea>
     3ca:	08 94       	sec
     3cc:	a1 08       	sbc	r10, r1
     3ce:	b1 08       	sbc	r11, r1
     3d0:	c1 08       	sbc	r12, r1
     3d2:	d1 08       	sbc	r13, r1
     3d4:	d3 01       	movw	r26, r6
     3d6:	99 27       	eor	r25, r25
     3d8:	88 27       	eor	r24, r24
     3da:	86 01       	movw	r16, r12
     3dc:	75 01       	movw	r14, r10
     3de:	e8 2a       	or	r14, r24
     3e0:	f9 2a       	or	r15, r25
     3e2:	0a 2b       	or	r16, r26
     3e4:	1b 2b       	or	r17, r27
     3e6:	e9 aa       	std	Y+49, r14	; 0x31
     3e8:	fa aa       	std	Y+50, r15	; 0x32
     3ea:	0b ab       	std	Y+51, r16	; 0x33
     3ec:	1c ab       	std	Y+52, r17	; 0x34
     3ee:	cf c4       	rjmp	.+2462   	; 0xd8e <__stack+0x52f>
     3f0:	21 14       	cp	r2, r1
     3f2:	31 04       	cpc	r3, r1
     3f4:	41 04       	cpc	r4, r1
     3f6:	51 04       	cpc	r5, r1
     3f8:	71 f4       	brne	.+28     	; 0x416 <__udivdi3+0x32c>
     3fa:	61 e0       	ldi	r22, 0x01	; 1
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     40e:	c9 01       	movw	r24, r18
     410:	da 01       	movw	r26, r20
     412:	1c 01       	movw	r2, r24
     414:	2d 01       	movw	r4, r26
     416:	00 e0       	ldi	r16, 0x00	; 0
     418:	20 16       	cp	r2, r16
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	30 06       	cpc	r3, r16
     41e:	01 e0       	ldi	r16, 0x01	; 1
     420:	40 06       	cpc	r4, r16
     422:	00 e0       	ldi	r16, 0x00	; 0
     424:	50 06       	cpc	r5, r16
     426:	88 f4       	brcc	.+34     	; 0x44a <__udivdi3+0x360>
     428:	1f ef       	ldi	r17, 0xFF	; 255
     42a:	21 16       	cp	r2, r17
     42c:	31 04       	cpc	r3, r1
     42e:	41 04       	cpc	r4, r1
     430:	51 04       	cpc	r5, r1
     432:	31 f0       	breq	.+12     	; 0x440 <__udivdi3+0x356>
     434:	28 f0       	brcs	.+10     	; 0x440 <__udivdi3+0x356>
     436:	48 e0       	ldi	r20, 0x08	; 8
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	17 c0       	rjmp	.+46     	; 0x46e <__udivdi3+0x384>
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	12 c0       	rjmp	.+36     	; 0x46e <__udivdi3+0x384>
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	22 16       	cp	r2, r18
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	32 06       	cpc	r3, r18
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	42 06       	cpc	r4, r18
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	52 06       	cpc	r5, r18
     45a:	28 f0       	brcs	.+10     	; 0x466 <__udivdi3+0x37c>
     45c:	48 e1       	ldi	r20, 0x18	; 24
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	04 c0       	rjmp	.+8      	; 0x46e <__udivdi3+0x384>
     466:	40 e1       	ldi	r20, 0x10	; 16
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	d2 01       	movw	r26, r4
     470:	c1 01       	movw	r24, r2
     472:	04 2e       	mov	r0, r20
     474:	04 c0       	rjmp	.+8      	; 0x47e <__udivdi3+0x394>
     476:	b6 95       	lsr	r27
     478:	a7 95       	ror	r26
     47a:	97 95       	ror	r25
     47c:	87 95       	ror	r24
     47e:	0a 94       	dec	r0
     480:	d2 f7       	brpl	.-12     	; 0x476 <__udivdi3+0x38c>
     482:	89 57       	subi	r24, 0x79	; 121
     484:	9f 4f       	sbci	r25, 0xFF	; 255
     486:	dc 01       	movw	r26, r24
     488:	2c 91       	ld	r18, X
     48a:	e0 e2       	ldi	r30, 0x20	; 32
     48c:	ee 2e       	mov	r14, r30
     48e:	f1 2c       	mov	r15, r1
     490:	01 2d       	mov	r16, r1
     492:	11 2d       	mov	r17, r1
     494:	d8 01       	movw	r26, r16
     496:	c7 01       	movw	r24, r14
     498:	84 1b       	sub	r24, r20
     49a:	95 0b       	sbc	r25, r21
     49c:	a6 0b       	sbc	r26, r22
     49e:	b7 0b       	sbc	r27, r23
     4a0:	82 1b       	sub	r24, r18
     4a2:	91 09       	sbc	r25, r1
     4a4:	a1 09       	sbc	r26, r1
     4a6:	b1 09       	sbc	r27, r1
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	a1 05       	cpc	r26, r1
     4ac:	b1 05       	cpc	r27, r1
     4ae:	61 f4       	brne	.+24     	; 0x4c8 <__udivdi3+0x3de>
     4b0:	64 01       	movw	r12, r8
     4b2:	53 01       	movw	r10, r6
     4b4:	a2 18       	sub	r10, r2
     4b6:	b3 08       	sbc	r11, r3
     4b8:	c4 08       	sbc	r12, r4
     4ba:	d5 08       	sbc	r13, r5
     4bc:	31 e0       	ldi	r19, 0x01	; 1
     4be:	63 2e       	mov	r6, r19
     4c0:	71 2c       	mov	r7, r1
     4c2:	81 2c       	mov	r8, r1
     4c4:	91 2c       	mov	r9, r1
     4c6:	1e c1       	rjmp	.+572    	; 0x704 <__udivdi3+0x61a>
     4c8:	6f 96       	adiw	r28, 0x1f	; 31
     4ca:	8f af       	std	Y+63, r24	; 0x3f
     4cc:	6f 97       	sbiw	r28, 0x1f	; 31
     4ce:	08 2e       	mov	r0, r24
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <__udivdi3+0x3f0>
     4d2:	22 0c       	add	r2, r2
     4d4:	33 1c       	adc	r3, r3
     4d6:	44 1c       	adc	r4, r4
     4d8:	55 1c       	adc	r5, r5
     4da:	0a 94       	dec	r0
     4dc:	d2 f7       	brpl	.-12     	; 0x4d2 <__udivdi3+0x3e8>
     4de:	ee 2d       	mov	r30, r14
     4e0:	e8 1b       	sub	r30, r24
     4e2:	64 01       	movw	r12, r8
     4e4:	53 01       	movw	r10, r6
     4e6:	0e 2e       	mov	r0, r30
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__udivdi3+0x408>
     4ea:	d6 94       	lsr	r13
     4ec:	c7 94       	ror	r12
     4ee:	b7 94       	ror	r11
     4f0:	a7 94       	ror	r10
     4f2:	0a 94       	dec	r0
     4f4:	d2 f7       	brpl	.-12     	; 0x4ea <__udivdi3+0x400>
     4f6:	a4 01       	movw	r20, r8
     4f8:	93 01       	movw	r18, r6
     4fa:	6f 96       	adiw	r28, 0x1f	; 31
     4fc:	0f ac       	ldd	r0, Y+63	; 0x3f
     4fe:	6f 97       	sbiw	r28, 0x1f	; 31
     500:	04 c0       	rjmp	.+8      	; 0x50a <__udivdi3+0x420>
     502:	22 0f       	add	r18, r18
     504:	33 1f       	adc	r19, r19
     506:	44 1f       	adc	r20, r20
     508:	55 1f       	adc	r21, r21
     50a:	0a 94       	dec	r0
     50c:	d2 f7       	brpl	.-12     	; 0x502 <__udivdi3+0x418>
     50e:	6d a4       	ldd	r6, Y+45	; 0x2d
     510:	7e a4       	ldd	r7, Y+46	; 0x2e
     512:	8f a4       	ldd	r8, Y+47	; 0x2f
     514:	98 a8       	ldd	r9, Y+48	; 0x30
     516:	0e 2e       	mov	r0, r30
     518:	04 c0       	rjmp	.+8      	; 0x522 <__udivdi3+0x438>
     51a:	96 94       	lsr	r9
     51c:	87 94       	ror	r8
     51e:	77 94       	ror	r7
     520:	67 94       	ror	r6
     522:	0a 94       	dec	r0
     524:	d2 f7       	brpl	.-12     	; 0x51a <__udivdi3+0x430>
     526:	84 01       	movw	r16, r8
     528:	73 01       	movw	r14, r6
     52a:	e2 2a       	or	r14, r18
     52c:	f3 2a       	or	r15, r19
     52e:	04 2b       	or	r16, r20
     530:	15 2b       	or	r17, r21
     532:	e9 a6       	std	Y+41, r14	; 0x29
     534:	fa a6       	std	Y+42, r15	; 0x2a
     536:	0b a7       	std	Y+43, r16	; 0x2b
     538:	1c a7       	std	Y+44, r17	; 0x2c
     53a:	32 01       	movw	r6, r4
     53c:	88 24       	eor	r8, r8
     53e:	99 24       	eor	r9, r9
     540:	92 01       	movw	r18, r4
     542:	81 01       	movw	r16, r2
     544:	20 70       	andi	r18, 0x00	; 0
     546:	30 70       	andi	r19, 0x00	; 0
     548:	21 96       	adiw	r28, 0x01	; 1
     54a:	0c af       	std	Y+60, r16	; 0x3c
     54c:	1d af       	std	Y+61, r17	; 0x3d
     54e:	2e af       	std	Y+62, r18	; 0x3e
     550:	3f af       	std	Y+63, r19	; 0x3f
     552:	21 97       	sbiw	r28, 0x01	; 1
     554:	c6 01       	movw	r24, r12
     556:	b5 01       	movw	r22, r10
     558:	a4 01       	movw	r20, r8
     55a:	93 01       	movw	r18, r6
     55c:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     560:	7b 01       	movw	r14, r22
     562:	8c 01       	movw	r16, r24
     564:	c6 01       	movw	r24, r12
     566:	b5 01       	movw	r22, r10
     568:	a4 01       	movw	r20, r8
     56a:	93 01       	movw	r18, r6
     56c:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     570:	c9 01       	movw	r24, r18
     572:	da 01       	movw	r26, r20
     574:	25 96       	adiw	r28, 0x05	; 5
     576:	8c af       	std	Y+60, r24	; 0x3c
     578:	9d af       	std	Y+61, r25	; 0x3d
     57a:	ae af       	std	Y+62, r26	; 0x3e
     57c:	bf af       	std	Y+63, r27	; 0x3f
     57e:	25 97       	sbiw	r28, 0x05	; 5
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	2c ad       	ldd	r18, Y+60	; 0x3c
     588:	3d ad       	ldd	r19, Y+61	; 0x3d
     58a:	4e ad       	ldd	r20, Y+62	; 0x3e
     58c:	5f ad       	ldd	r21, Y+63	; 0x3f
     58e:	21 97       	sbiw	r28, 0x01	; 1
     590:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
     594:	9b 01       	movw	r18, r22
     596:	ac 01       	movw	r20, r24
     598:	87 01       	movw	r16, r14
     59a:	ff 24       	eor	r15, r15
     59c:	ee 24       	eor	r14, r14
     59e:	a9 a4       	ldd	r10, Y+41	; 0x29
     5a0:	ba a4       	ldd	r11, Y+42	; 0x2a
     5a2:	cb a4       	ldd	r12, Y+43	; 0x2b
     5a4:	dc a4       	ldd	r13, Y+44	; 0x2c
     5a6:	c6 01       	movw	r24, r12
     5a8:	aa 27       	eor	r26, r26
     5aa:	bb 27       	eor	r27, r27
     5ac:	5c 01       	movw	r10, r24
     5ae:	6d 01       	movw	r12, r26
     5b0:	ae 28       	or	r10, r14
     5b2:	bf 28       	or	r11, r15
     5b4:	c0 2a       	or	r12, r16
     5b6:	d1 2a       	or	r13, r17
     5b8:	a2 16       	cp	r10, r18
     5ba:	b3 06       	cpc	r11, r19
     5bc:	c4 06       	cpc	r12, r20
     5be:	d5 06       	cpc	r13, r21
     5c0:	60 f5       	brcc	.+88     	; 0x61a <__udivdi3+0x530>
     5c2:	25 96       	adiw	r28, 0x05	; 5
     5c4:	6c ad       	ldd	r22, Y+60	; 0x3c
     5c6:	7d ad       	ldd	r23, Y+61	; 0x3d
     5c8:	8e ad       	ldd	r24, Y+62	; 0x3e
     5ca:	9f ad       	ldd	r25, Y+63	; 0x3f
     5cc:	25 97       	sbiw	r28, 0x05	; 5
     5ce:	61 50       	subi	r22, 0x01	; 1
     5d0:	70 40       	sbci	r23, 0x00	; 0
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	90 40       	sbci	r25, 0x00	; 0
     5d6:	25 96       	adiw	r28, 0x05	; 5
     5d8:	6c af       	std	Y+60, r22	; 0x3c
     5da:	7d af       	std	Y+61, r23	; 0x3d
     5dc:	8e af       	std	Y+62, r24	; 0x3e
     5de:	9f af       	std	Y+63, r25	; 0x3f
     5e0:	25 97       	sbiw	r28, 0x05	; 5
     5e2:	a2 0c       	add	r10, r2
     5e4:	b3 1c       	adc	r11, r3
     5e6:	c4 1c       	adc	r12, r4
     5e8:	d5 1c       	adc	r13, r5
     5ea:	a2 14       	cp	r10, r2
     5ec:	b3 04       	cpc	r11, r3
     5ee:	c4 04       	cpc	r12, r4
     5f0:	d5 04       	cpc	r13, r5
     5f2:	98 f0       	brcs	.+38     	; 0x61a <__udivdi3+0x530>
     5f4:	a2 16       	cp	r10, r18
     5f6:	b3 06       	cpc	r11, r19
     5f8:	c4 06       	cpc	r12, r20
     5fa:	d5 06       	cpc	r13, r21
     5fc:	70 f4       	brcc	.+28     	; 0x61a <__udivdi3+0x530>
     5fe:	61 50       	subi	r22, 0x01	; 1
     600:	70 40       	sbci	r23, 0x00	; 0
     602:	80 40       	sbci	r24, 0x00	; 0
     604:	90 40       	sbci	r25, 0x00	; 0
     606:	25 96       	adiw	r28, 0x05	; 5
     608:	6c af       	std	Y+60, r22	; 0x3c
     60a:	7d af       	std	Y+61, r23	; 0x3d
     60c:	8e af       	std	Y+62, r24	; 0x3e
     60e:	9f af       	std	Y+63, r25	; 0x3f
     610:	25 97       	sbiw	r28, 0x05	; 5
     612:	a2 0c       	add	r10, r2
     614:	b3 1c       	adc	r11, r3
     616:	c4 1c       	adc	r12, r4
     618:	d5 1c       	adc	r13, r5
     61a:	a2 1a       	sub	r10, r18
     61c:	b3 0a       	sbc	r11, r19
     61e:	c4 0a       	sbc	r12, r20
     620:	d5 0a       	sbc	r13, r21
     622:	c6 01       	movw	r24, r12
     624:	b5 01       	movw	r22, r10
     626:	a4 01       	movw	r20, r8
     628:	93 01       	movw	r18, r6
     62a:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     62e:	7b 01       	movw	r14, r22
     630:	8c 01       	movw	r16, r24
     632:	c6 01       	movw	r24, r12
     634:	b5 01       	movw	r22, r10
     636:	a4 01       	movw	r20, r8
     638:	93 01       	movw	r18, r6
     63a:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     63e:	c9 01       	movw	r24, r18
     640:	da 01       	movw	r26, r20
     642:	3c 01       	movw	r6, r24
     644:	4d 01       	movw	r8, r26
     646:	c4 01       	movw	r24, r8
     648:	b3 01       	movw	r22, r6
     64a:	21 96       	adiw	r28, 0x01	; 1
     64c:	2c ad       	ldd	r18, Y+60	; 0x3c
     64e:	3d ad       	ldd	r19, Y+61	; 0x3d
     650:	4e ad       	ldd	r20, Y+62	; 0x3e
     652:	5f ad       	ldd	r21, Y+63	; 0x3f
     654:	21 97       	sbiw	r28, 0x01	; 1
     656:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
     65a:	9b 01       	movw	r18, r22
     65c:	ac 01       	movw	r20, r24
     65e:	87 01       	movw	r16, r14
     660:	ff 24       	eor	r15, r15
     662:	ee 24       	eor	r14, r14
     664:	89 a5       	ldd	r24, Y+41	; 0x29
     666:	9a a5       	ldd	r25, Y+42	; 0x2a
     668:	ab a5       	ldd	r26, Y+43	; 0x2b
     66a:	bc a5       	ldd	r27, Y+44	; 0x2c
     66c:	a0 70       	andi	r26, 0x00	; 0
     66e:	b0 70       	andi	r27, 0x00	; 0
     670:	57 01       	movw	r10, r14
     672:	68 01       	movw	r12, r16
     674:	a8 2a       	or	r10, r24
     676:	b9 2a       	or	r11, r25
     678:	ca 2a       	or	r12, r26
     67a:	db 2a       	or	r13, r27
     67c:	a2 16       	cp	r10, r18
     67e:	b3 06       	cpc	r11, r19
     680:	c4 06       	cpc	r12, r20
     682:	d5 06       	cpc	r13, r21
     684:	e0 f4       	brcc	.+56     	; 0x6be <__udivdi3+0x5d4>
     686:	08 94       	sec
     688:	61 08       	sbc	r6, r1
     68a:	71 08       	sbc	r7, r1
     68c:	81 08       	sbc	r8, r1
     68e:	91 08       	sbc	r9, r1
     690:	a2 0c       	add	r10, r2
     692:	b3 1c       	adc	r11, r3
     694:	c4 1c       	adc	r12, r4
     696:	d5 1c       	adc	r13, r5
     698:	a2 14       	cp	r10, r2
     69a:	b3 04       	cpc	r11, r3
     69c:	c4 04       	cpc	r12, r4
     69e:	d5 04       	cpc	r13, r5
     6a0:	70 f0       	brcs	.+28     	; 0x6be <__udivdi3+0x5d4>
     6a2:	a2 16       	cp	r10, r18
     6a4:	b3 06       	cpc	r11, r19
     6a6:	c4 06       	cpc	r12, r20
     6a8:	d5 06       	cpc	r13, r21
     6aa:	48 f4       	brcc	.+18     	; 0x6be <__udivdi3+0x5d4>
     6ac:	08 94       	sec
     6ae:	61 08       	sbc	r6, r1
     6b0:	71 08       	sbc	r7, r1
     6b2:	81 08       	sbc	r8, r1
     6b4:	91 08       	sbc	r9, r1
     6b6:	a2 0c       	add	r10, r2
     6b8:	b3 1c       	adc	r11, r3
     6ba:	c4 1c       	adc	r12, r4
     6bc:	d5 1c       	adc	r13, r5
     6be:	8d a5       	ldd	r24, Y+45	; 0x2d
     6c0:	9e a5       	ldd	r25, Y+46	; 0x2e
     6c2:	af a5       	ldd	r26, Y+47	; 0x2f
     6c4:	b8 a9       	ldd	r27, Y+48	; 0x30
     6c6:	6f 96       	adiw	r28, 0x1f	; 31
     6c8:	0f ac       	ldd	r0, Y+63	; 0x3f
     6ca:	6f 97       	sbiw	r28, 0x1f	; 31
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <__udivdi3+0x5ec>
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	aa 1f       	adc	r26, r26
     6d4:	bb 1f       	adc	r27, r27
     6d6:	0a 94       	dec	r0
     6d8:	d2 f7       	brpl	.-12     	; 0x6ce <__udivdi3+0x5e4>
     6da:	8d a7       	std	Y+45, r24	; 0x2d
     6dc:	9e a7       	std	Y+46, r25	; 0x2e
     6de:	af a7       	std	Y+47, r26	; 0x2f
     6e0:	b8 ab       	std	Y+48, r27	; 0x30
     6e2:	a2 1a       	sub	r10, r18
     6e4:	b3 0a       	sbc	r11, r19
     6e6:	c4 0a       	sbc	r12, r20
     6e8:	d5 0a       	sbc	r13, r21
     6ea:	25 96       	adiw	r28, 0x05	; 5
     6ec:	ec ac       	ldd	r14, Y+60	; 0x3c
     6ee:	fd ac       	ldd	r15, Y+61	; 0x3d
     6f0:	0e ad       	ldd	r16, Y+62	; 0x3e
     6f2:	1f ad       	ldd	r17, Y+63	; 0x3f
     6f4:	25 97       	sbiw	r28, 0x05	; 5
     6f6:	d7 01       	movw	r26, r14
     6f8:	99 27       	eor	r25, r25
     6fa:	88 27       	eor	r24, r24
     6fc:	68 2a       	or	r6, r24
     6fe:	79 2a       	or	r7, r25
     700:	8a 2a       	or	r8, r26
     702:	9b 2a       	or	r9, r27
     704:	82 01       	movw	r16, r4
     706:	22 27       	eor	r18, r18
     708:	33 27       	eor	r19, r19
     70a:	29 96       	adiw	r28, 0x09	; 9
     70c:	0c af       	std	Y+60, r16	; 0x3c
     70e:	1d af       	std	Y+61, r17	; 0x3d
     710:	2e af       	std	Y+62, r18	; 0x3e
     712:	3f af       	std	Y+63, r19	; 0x3f
     714:	29 97       	sbiw	r28, 0x09	; 9
     716:	a2 01       	movw	r20, r4
     718:	91 01       	movw	r18, r2
     71a:	40 70       	andi	r20, 0x00	; 0
     71c:	50 70       	andi	r21, 0x00	; 0
     71e:	2d 96       	adiw	r28, 0x0d	; 13
     720:	2c af       	std	Y+60, r18	; 0x3c
     722:	3d af       	std	Y+61, r19	; 0x3d
     724:	4e af       	std	Y+62, r20	; 0x3e
     726:	5f af       	std	Y+63, r21	; 0x3f
     728:	2d 97       	sbiw	r28, 0x0d	; 13
     72a:	c6 01       	movw	r24, r12
     72c:	b5 01       	movw	r22, r10
     72e:	29 96       	adiw	r28, 0x09	; 9
     730:	2c ad       	ldd	r18, Y+60	; 0x3c
     732:	3d ad       	ldd	r19, Y+61	; 0x3d
     734:	4e ad       	ldd	r20, Y+62	; 0x3e
     736:	5f ad       	ldd	r21, Y+63	; 0x3f
     738:	29 97       	sbiw	r28, 0x09	; 9
     73a:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     73e:	7b 01       	movw	r14, r22
     740:	8c 01       	movw	r16, r24
     742:	c6 01       	movw	r24, r12
     744:	b5 01       	movw	r22, r10
     746:	29 96       	adiw	r28, 0x09	; 9
     748:	2c ad       	ldd	r18, Y+60	; 0x3c
     74a:	3d ad       	ldd	r19, Y+61	; 0x3d
     74c:	4e ad       	ldd	r20, Y+62	; 0x3e
     74e:	5f ad       	ldd	r21, Y+63	; 0x3f
     750:	29 97       	sbiw	r28, 0x09	; 9
     752:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     756:	c9 01       	movw	r24, r18
     758:	da 01       	movw	r26, r20
     75a:	61 96       	adiw	r28, 0x11	; 17
     75c:	8c af       	std	Y+60, r24	; 0x3c
     75e:	9d af       	std	Y+61, r25	; 0x3d
     760:	ae af       	std	Y+62, r26	; 0x3e
     762:	bf af       	std	Y+63, r27	; 0x3f
     764:	61 97       	sbiw	r28, 0x11	; 17
     766:	bc 01       	movw	r22, r24
     768:	cd 01       	movw	r24, r26
     76a:	2d 96       	adiw	r28, 0x0d	; 13
     76c:	2c ad       	ldd	r18, Y+60	; 0x3c
     76e:	3d ad       	ldd	r19, Y+61	; 0x3d
     770:	4e ad       	ldd	r20, Y+62	; 0x3e
     772:	5f ad       	ldd	r21, Y+63	; 0x3f
     774:	2d 97       	sbiw	r28, 0x0d	; 13
     776:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24
     77e:	87 01       	movw	r16, r14
     780:	ff 24       	eor	r15, r15
     782:	ee 24       	eor	r14, r14
     784:	ad a4       	ldd	r10, Y+45	; 0x2d
     786:	be a4       	ldd	r11, Y+46	; 0x2e
     788:	cf a4       	ldd	r12, Y+47	; 0x2f
     78a:	d8 a8       	ldd	r13, Y+48	; 0x30
     78c:	c6 01       	movw	r24, r12
     78e:	aa 27       	eor	r26, r26
     790:	bb 27       	eor	r27, r27
     792:	57 01       	movw	r10, r14
     794:	68 01       	movw	r12, r16
     796:	a8 2a       	or	r10, r24
     798:	b9 2a       	or	r11, r25
     79a:	ca 2a       	or	r12, r26
     79c:	db 2a       	or	r13, r27
     79e:	a2 16       	cp	r10, r18
     7a0:	b3 06       	cpc	r11, r19
     7a2:	c4 06       	cpc	r12, r20
     7a4:	d5 06       	cpc	r13, r21
     7a6:	60 f5       	brcc	.+88     	; 0x800 <__udivdi3+0x716>
     7a8:	61 96       	adiw	r28, 0x11	; 17
     7aa:	6c ad       	ldd	r22, Y+60	; 0x3c
     7ac:	7d ad       	ldd	r23, Y+61	; 0x3d
     7ae:	8e ad       	ldd	r24, Y+62	; 0x3e
     7b0:	9f ad       	ldd	r25, Y+63	; 0x3f
     7b2:	61 97       	sbiw	r28, 0x11	; 17
     7b4:	61 50       	subi	r22, 0x01	; 1
     7b6:	70 40       	sbci	r23, 0x00	; 0
     7b8:	80 40       	sbci	r24, 0x00	; 0
     7ba:	90 40       	sbci	r25, 0x00	; 0
     7bc:	61 96       	adiw	r28, 0x11	; 17
     7be:	6c af       	std	Y+60, r22	; 0x3c
     7c0:	7d af       	std	Y+61, r23	; 0x3d
     7c2:	8e af       	std	Y+62, r24	; 0x3e
     7c4:	9f af       	std	Y+63, r25	; 0x3f
     7c6:	61 97       	sbiw	r28, 0x11	; 17
     7c8:	a2 0c       	add	r10, r2
     7ca:	b3 1c       	adc	r11, r3
     7cc:	c4 1c       	adc	r12, r4
     7ce:	d5 1c       	adc	r13, r5
     7d0:	a2 14       	cp	r10, r2
     7d2:	b3 04       	cpc	r11, r3
     7d4:	c4 04       	cpc	r12, r4
     7d6:	d5 04       	cpc	r13, r5
     7d8:	98 f0       	brcs	.+38     	; 0x800 <__udivdi3+0x716>
     7da:	a2 16       	cp	r10, r18
     7dc:	b3 06       	cpc	r11, r19
     7de:	c4 06       	cpc	r12, r20
     7e0:	d5 06       	cpc	r13, r21
     7e2:	70 f4       	brcc	.+28     	; 0x800 <__udivdi3+0x716>
     7e4:	61 50       	subi	r22, 0x01	; 1
     7e6:	70 40       	sbci	r23, 0x00	; 0
     7e8:	80 40       	sbci	r24, 0x00	; 0
     7ea:	90 40       	sbci	r25, 0x00	; 0
     7ec:	61 96       	adiw	r28, 0x11	; 17
     7ee:	6c af       	std	Y+60, r22	; 0x3c
     7f0:	7d af       	std	Y+61, r23	; 0x3d
     7f2:	8e af       	std	Y+62, r24	; 0x3e
     7f4:	9f af       	std	Y+63, r25	; 0x3f
     7f6:	61 97       	sbiw	r28, 0x11	; 17
     7f8:	a2 0c       	add	r10, r2
     7fa:	b3 1c       	adc	r11, r3
     7fc:	c4 1c       	adc	r12, r4
     7fe:	d5 1c       	adc	r13, r5
     800:	a2 1a       	sub	r10, r18
     802:	b3 0a       	sbc	r11, r19
     804:	c4 0a       	sbc	r12, r20
     806:	d5 0a       	sbc	r13, r21
     808:	c6 01       	movw	r24, r12
     80a:	b5 01       	movw	r22, r10
     80c:	29 96       	adiw	r28, 0x09	; 9
     80e:	2c ad       	ldd	r18, Y+60	; 0x3c
     810:	3d ad       	ldd	r19, Y+61	; 0x3d
     812:	4e ad       	ldd	r20, Y+62	; 0x3e
     814:	5f ad       	ldd	r21, Y+63	; 0x3f
     816:	29 97       	sbiw	r28, 0x09	; 9
     818:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     81c:	7b 01       	movw	r14, r22
     81e:	8c 01       	movw	r16, r24
     820:	c6 01       	movw	r24, r12
     822:	b5 01       	movw	r22, r10
     824:	29 96       	adiw	r28, 0x09	; 9
     826:	2c ad       	ldd	r18, Y+60	; 0x3c
     828:	3d ad       	ldd	r19, Y+61	; 0x3d
     82a:	4e ad       	ldd	r20, Y+62	; 0x3e
     82c:	5f ad       	ldd	r21, Y+63	; 0x3f
     82e:	29 97       	sbiw	r28, 0x09	; 9
     830:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     834:	c9 01       	movw	r24, r18
     836:	da 01       	movw	r26, r20
     838:	5c 01       	movw	r10, r24
     83a:	6d 01       	movw	r12, r26
     83c:	c6 01       	movw	r24, r12
     83e:	b5 01       	movw	r22, r10
     840:	2d 96       	adiw	r28, 0x0d	; 13
     842:	2c ad       	ldd	r18, Y+60	; 0x3c
     844:	3d ad       	ldd	r19, Y+61	; 0x3d
     846:	4e ad       	ldd	r20, Y+62	; 0x3e
     848:	5f ad       	ldd	r21, Y+63	; 0x3f
     84a:	2d 97       	sbiw	r28, 0x0d	; 13
     84c:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
     850:	9b 01       	movw	r18, r22
     852:	ac 01       	movw	r20, r24
     854:	87 01       	movw	r16, r14
     856:	ff 24       	eor	r15, r15
     858:	ee 24       	eor	r14, r14
     85a:	8d a5       	ldd	r24, Y+45	; 0x2d
     85c:	9e a5       	ldd	r25, Y+46	; 0x2e
     85e:	af a5       	ldd	r26, Y+47	; 0x2f
     860:	b8 a9       	ldd	r27, Y+48	; 0x30
     862:	a0 70       	andi	r26, 0x00	; 0
     864:	b0 70       	andi	r27, 0x00	; 0
     866:	e8 2a       	or	r14, r24
     868:	f9 2a       	or	r15, r25
     86a:	0a 2b       	or	r16, r26
     86c:	1b 2b       	or	r17, r27
     86e:	e2 16       	cp	r14, r18
     870:	f3 06       	cpc	r15, r19
     872:	04 07       	cpc	r16, r20
     874:	15 07       	cpc	r17, r21
     876:	c0 f4       	brcc	.+48     	; 0x8a8 <__stack+0x49>
     878:	08 94       	sec
     87a:	a1 08       	sbc	r10, r1
     87c:	b1 08       	sbc	r11, r1
     87e:	c1 08       	sbc	r12, r1
     880:	d1 08       	sbc	r13, r1
     882:	e2 0c       	add	r14, r2
     884:	f3 1c       	adc	r15, r3
     886:	04 1d       	adc	r16, r4
     888:	15 1d       	adc	r17, r5
     88a:	e2 14       	cp	r14, r2
     88c:	f3 04       	cpc	r15, r3
     88e:	04 05       	cpc	r16, r4
     890:	15 05       	cpc	r17, r5
     892:	50 f0       	brcs	.+20     	; 0x8a8 <__stack+0x49>
     894:	e2 16       	cp	r14, r18
     896:	f3 06       	cpc	r15, r19
     898:	04 07       	cpc	r16, r20
     89a:	15 07       	cpc	r17, r21
     89c:	28 f4       	brcc	.+10     	; 0x8a8 <__stack+0x49>
     89e:	08 94       	sec
     8a0:	a1 08       	sbc	r10, r1
     8a2:	b1 08       	sbc	r11, r1
     8a4:	c1 08       	sbc	r12, r1
     8a6:	d1 08       	sbc	r13, r1
     8a8:	61 96       	adiw	r28, 0x11	; 17
     8aa:	ec ac       	ldd	r14, Y+60	; 0x3c
     8ac:	fd ac       	ldd	r15, Y+61	; 0x3d
     8ae:	0e ad       	ldd	r16, Y+62	; 0x3e
     8b0:	1f ad       	ldd	r17, Y+63	; 0x3f
     8b2:	61 97       	sbiw	r28, 0x11	; 17
     8b4:	d7 01       	movw	r26, r14
     8b6:	99 27       	eor	r25, r25
     8b8:	88 27       	eor	r24, r24
     8ba:	96 01       	movw	r18, r12
     8bc:	85 01       	movw	r16, r10
     8be:	08 2b       	or	r16, r24
     8c0:	19 2b       	or	r17, r25
     8c2:	2a 2b       	or	r18, r26
     8c4:	3b 2b       	or	r19, r27
     8c6:	09 ab       	std	Y+49, r16	; 0x31
     8c8:	1a ab       	std	Y+50, r17	; 0x32
     8ca:	2b ab       	std	Y+51, r18	; 0x33
     8cc:	3c ab       	std	Y+52, r19	; 0x34
     8ce:	62 c2       	rjmp	.+1220   	; 0xd94 <__stack+0x535>
     8d0:	6e 14       	cp	r6, r14
     8d2:	7f 04       	cpc	r7, r15
     8d4:	80 06       	cpc	r8, r16
     8d6:	91 06       	cpc	r9, r17
     8d8:	08 f4       	brcc	.+2      	; 0x8dc <__stack+0x7d>
     8da:	51 c2       	rjmp	.+1186   	; 0xd7e <__stack+0x51f>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	e2 16       	cp	r14, r18
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	f2 06       	cpc	r15, r18
     8e4:	21 e0       	ldi	r18, 0x01	; 1
     8e6:	02 07       	cpc	r16, r18
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	12 07       	cpc	r17, r18
     8ec:	88 f4       	brcc	.+34     	; 0x910 <__stack+0xb1>
     8ee:	3f ef       	ldi	r19, 0xFF	; 255
     8f0:	e3 16       	cp	r14, r19
     8f2:	f1 04       	cpc	r15, r1
     8f4:	01 05       	cpc	r16, r1
     8f6:	11 05       	cpc	r17, r1
     8f8:	31 f0       	breq	.+12     	; 0x906 <__stack+0xa7>
     8fa:	28 f0       	brcs	.+10     	; 0x906 <__stack+0xa7>
     8fc:	48 e0       	ldi	r20, 0x08	; 8
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	17 c0       	rjmp	.+46     	; 0x934 <__stack+0xd5>
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	12 c0       	rjmp	.+36     	; 0x934 <__stack+0xd5>
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	e4 16       	cp	r14, r20
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	f4 06       	cpc	r15, r20
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	04 07       	cpc	r16, r20
     91c:	41 e0       	ldi	r20, 0x01	; 1
     91e:	14 07       	cpc	r17, r20
     920:	28 f0       	brcs	.+10     	; 0x92c <__stack+0xcd>
     922:	48 e1       	ldi	r20, 0x18	; 24
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__stack+0xd5>
     92c:	40 e1       	ldi	r20, 0x10	; 16
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	d8 01       	movw	r26, r16
     936:	c7 01       	movw	r24, r14
     938:	04 2e       	mov	r0, r20
     93a:	04 c0       	rjmp	.+8      	; 0x944 <__stack+0xe5>
     93c:	b6 95       	lsr	r27
     93e:	a7 95       	ror	r26
     940:	97 95       	ror	r25
     942:	87 95       	ror	r24
     944:	0a 94       	dec	r0
     946:	d2 f7       	brpl	.-12     	; 0x93c <__stack+0xdd>
     948:	89 57       	subi	r24, 0x79	; 121
     94a:	9f 4f       	sbci	r25, 0xFF	; 255
     94c:	dc 01       	movw	r26, r24
     94e:	2c 91       	ld	r18, X
     950:	30 e2       	ldi	r19, 0x20	; 32
     952:	a3 2e       	mov	r10, r19
     954:	b1 2c       	mov	r11, r1
     956:	c1 2c       	mov	r12, r1
     958:	d1 2c       	mov	r13, r1
     95a:	d6 01       	movw	r26, r12
     95c:	c5 01       	movw	r24, r10
     95e:	84 1b       	sub	r24, r20
     960:	95 0b       	sbc	r25, r21
     962:	a6 0b       	sbc	r26, r22
     964:	b7 0b       	sbc	r27, r23
     966:	82 1b       	sub	r24, r18
     968:	91 09       	sbc	r25, r1
     96a:	a1 09       	sbc	r26, r1
     96c:	b1 09       	sbc	r27, r1
     96e:	00 97       	sbiw	r24, 0x00	; 0
     970:	a1 05       	cpc	r26, r1
     972:	b1 05       	cpc	r27, r1
     974:	89 f4       	brne	.+34     	; 0x998 <__stack+0x139>
     976:	e6 14       	cp	r14, r6
     978:	f7 04       	cpc	r15, r7
     97a:	08 05       	cpc	r16, r8
     97c:	19 05       	cpc	r17, r9
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x123>
     980:	f2 c1       	rjmp	.+996    	; 0xd66 <__stack+0x507>
     982:	6d a4       	ldd	r6, Y+45	; 0x2d
     984:	7e a4       	ldd	r7, Y+46	; 0x2e
     986:	8f a4       	ldd	r8, Y+47	; 0x2f
     988:	98 a8       	ldd	r9, Y+48	; 0x30
     98a:	62 14       	cp	r6, r2
     98c:	73 04       	cpc	r7, r3
     98e:	84 04       	cpc	r8, r4
     990:	95 04       	cpc	r9, r5
     992:	08 f0       	brcs	.+2      	; 0x996 <__stack+0x137>
     994:	e8 c1       	rjmp	.+976    	; 0xd66 <__stack+0x507>
     996:	f3 c1       	rjmp	.+998    	; 0xd7e <__stack+0x51f>
     998:	6e 96       	adiw	r28, 0x1e	; 30
     99a:	8f af       	std	Y+63, r24	; 0x3f
     99c:	6e 97       	sbiw	r28, 0x1e	; 30
     99e:	08 2e       	mov	r0, r24
     9a0:	04 c0       	rjmp	.+8      	; 0x9aa <__stack+0x14b>
     9a2:	ee 0c       	add	r14, r14
     9a4:	ff 1c       	adc	r15, r15
     9a6:	00 1f       	adc	r16, r16
     9a8:	11 1f       	adc	r17, r17
     9aa:	0a 94       	dec	r0
     9ac:	d2 f7       	brpl	.-12     	; 0x9a2 <__stack+0x143>
     9ae:	6a 2d       	mov	r22, r10
     9b0:	68 1b       	sub	r22, r24
     9b2:	d2 01       	movw	r26, r4
     9b4:	c1 01       	movw	r24, r2
     9b6:	06 2e       	mov	r0, r22
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <__stack+0x163>
     9ba:	b6 95       	lsr	r27
     9bc:	a7 95       	ror	r26
     9be:	97 95       	ror	r25
     9c0:	87 95       	ror	r24
     9c2:	0a 94       	dec	r0
     9c4:	d2 f7       	brpl	.-12     	; 0x9ba <__stack+0x15b>
     9c6:	5c 01       	movw	r10, r24
     9c8:	6d 01       	movw	r12, r26
     9ca:	ae 28       	or	r10, r14
     9cc:	bf 28       	or	r11, r15
     9ce:	c0 2a       	or	r12, r16
     9d0:	d1 2a       	or	r13, r17
     9d2:	ad a2       	std	Y+37, r10	; 0x25
     9d4:	be a2       	std	Y+38, r11	; 0x26
     9d6:	cf a2       	std	Y+39, r12	; 0x27
     9d8:	d8 a6       	std	Y+40, r13	; 0x28
     9da:	72 01       	movw	r14, r4
     9dc:	61 01       	movw	r12, r2
     9de:	6e 96       	adiw	r28, 0x1e	; 30
     9e0:	0f ac       	ldd	r0, Y+63	; 0x3f
     9e2:	6e 97       	sbiw	r28, 0x1e	; 30
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__stack+0x18f>
     9e6:	cc 0c       	add	r12, r12
     9e8:	dd 1c       	adc	r13, r13
     9ea:	ee 1c       	adc	r14, r14
     9ec:	ff 1c       	adc	r15, r15
     9ee:	0a 94       	dec	r0
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__stack+0x187>
     9f2:	c9 a2       	std	Y+33, r12	; 0x21
     9f4:	da a2       	std	Y+34, r13	; 0x22
     9f6:	eb a2       	std	Y+35, r14	; 0x23
     9f8:	fc a2       	std	Y+36, r15	; 0x24
     9fa:	64 01       	movw	r12, r8
     9fc:	53 01       	movw	r10, r6
     9fe:	06 2e       	mov	r0, r22
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <__stack+0x1ab>
     a02:	d6 94       	lsr	r13
     a04:	c7 94       	ror	r12
     a06:	b7 94       	ror	r11
     a08:	a7 94       	ror	r10
     a0a:	0a 94       	dec	r0
     a0c:	d2 f7       	brpl	.-12     	; 0xa02 <__stack+0x1a3>
     a0e:	d4 01       	movw	r26, r8
     a10:	c3 01       	movw	r24, r6
     a12:	6e 96       	adiw	r28, 0x1e	; 30
     a14:	0f ac       	ldd	r0, Y+63	; 0x3f
     a16:	6e 97       	sbiw	r28, 0x1e	; 30
     a18:	04 c0       	rjmp	.+8      	; 0xa22 <__stack+0x1c3>
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	aa 1f       	adc	r26, r26
     a20:	bb 1f       	adc	r27, r27
     a22:	0a 94       	dec	r0
     a24:	d2 f7       	brpl	.-12     	; 0xa1a <__stack+0x1bb>
     a26:	ed a4       	ldd	r14, Y+45	; 0x2d
     a28:	fe a4       	ldd	r15, Y+46	; 0x2e
     a2a:	0f a5       	ldd	r16, Y+47	; 0x2f
     a2c:	18 a9       	ldd	r17, Y+48	; 0x30
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__stack+0x1d9>
     a30:	16 95       	lsr	r17
     a32:	07 95       	ror	r16
     a34:	f7 94       	ror	r15
     a36:	e7 94       	ror	r14
     a38:	6a 95       	dec	r22
     a3a:	d2 f7       	brpl	.-12     	; 0xa30 <__stack+0x1d1>
     a3c:	37 01       	movw	r6, r14
     a3e:	48 01       	movw	r8, r16
     a40:	68 2a       	or	r6, r24
     a42:	79 2a       	or	r7, r25
     a44:	8a 2a       	or	r8, r26
     a46:	9b 2a       	or	r9, r27
     a48:	6d 8e       	std	Y+29, r6	; 0x1d
     a4a:	7e 8e       	std	Y+30, r7	; 0x1e
     a4c:	8f 8e       	std	Y+31, r8	; 0x1f
     a4e:	98 a2       	std	Y+32, r9	; 0x20
     a50:	ed a0       	ldd	r14, Y+37	; 0x25
     a52:	fe a0       	ldd	r15, Y+38	; 0x26
     a54:	0f a1       	ldd	r16, Y+39	; 0x27
     a56:	18 a5       	ldd	r17, Y+40	; 0x28
     a58:	38 01       	movw	r6, r16
     a5a:	88 24       	eor	r8, r8
     a5c:	99 24       	eor	r9, r9
     a5e:	98 01       	movw	r18, r16
     a60:	87 01       	movw	r16, r14
     a62:	20 70       	andi	r18, 0x00	; 0
     a64:	30 70       	andi	r19, 0x00	; 0
     a66:	65 96       	adiw	r28, 0x15	; 21
     a68:	0c af       	std	Y+60, r16	; 0x3c
     a6a:	1d af       	std	Y+61, r17	; 0x3d
     a6c:	2e af       	std	Y+62, r18	; 0x3e
     a6e:	3f af       	std	Y+63, r19	; 0x3f
     a70:	65 97       	sbiw	r28, 0x15	; 21
     a72:	c6 01       	movw	r24, r12
     a74:	b5 01       	movw	r22, r10
     a76:	a4 01       	movw	r20, r8
     a78:	93 01       	movw	r18, r6
     a7a:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     a7e:	7b 01       	movw	r14, r22
     a80:	8c 01       	movw	r16, r24
     a82:	c6 01       	movw	r24, r12
     a84:	b5 01       	movw	r22, r10
     a86:	a4 01       	movw	r20, r8
     a88:	93 01       	movw	r18, r6
     a8a:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     a8e:	c9 01       	movw	r24, r18
     a90:	da 01       	movw	r26, r20
     a92:	1c 01       	movw	r2, r24
     a94:	2d 01       	movw	r4, r26
     a96:	c2 01       	movw	r24, r4
     a98:	b1 01       	movw	r22, r2
     a9a:	65 96       	adiw	r28, 0x15	; 21
     a9c:	2c ad       	ldd	r18, Y+60	; 0x3c
     a9e:	3d ad       	ldd	r19, Y+61	; 0x3d
     aa0:	4e ad       	ldd	r20, Y+62	; 0x3e
     aa2:	5f ad       	ldd	r21, Y+63	; 0x3f
     aa4:	65 97       	sbiw	r28, 0x15	; 21
     aa6:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	87 01       	movw	r16, r14
     ab0:	ff 24       	eor	r15, r15
     ab2:	ee 24       	eor	r14, r14
     ab4:	ad 8c       	ldd	r10, Y+29	; 0x1d
     ab6:	be 8c       	ldd	r11, Y+30	; 0x1e
     ab8:	cf 8c       	ldd	r12, Y+31	; 0x1f
     aba:	d8 a0       	ldd	r13, Y+32	; 0x20
     abc:	c6 01       	movw	r24, r12
     abe:	aa 27       	eor	r26, r26
     ac0:	bb 27       	eor	r27, r27
     ac2:	57 01       	movw	r10, r14
     ac4:	68 01       	movw	r12, r16
     ac6:	a8 2a       	or	r10, r24
     ac8:	b9 2a       	or	r11, r25
     aca:	ca 2a       	or	r12, r26
     acc:	db 2a       	or	r13, r27
     ace:	a2 16       	cp	r10, r18
     ad0:	b3 06       	cpc	r11, r19
     ad2:	c4 06       	cpc	r12, r20
     ad4:	d5 06       	cpc	r13, r21
     ad6:	00 f5       	brcc	.+64     	; 0xb18 <__stack+0x2b9>
     ad8:	08 94       	sec
     ada:	21 08       	sbc	r2, r1
     adc:	31 08       	sbc	r3, r1
     ade:	41 08       	sbc	r4, r1
     ae0:	51 08       	sbc	r5, r1
     ae2:	ed a0       	ldd	r14, Y+37	; 0x25
     ae4:	fe a0       	ldd	r15, Y+38	; 0x26
     ae6:	0f a1       	ldd	r16, Y+39	; 0x27
     ae8:	18 a5       	ldd	r17, Y+40	; 0x28
     aea:	ae 0c       	add	r10, r14
     aec:	bf 1c       	adc	r11, r15
     aee:	c0 1e       	adc	r12, r16
     af0:	d1 1e       	adc	r13, r17
     af2:	ae 14       	cp	r10, r14
     af4:	bf 04       	cpc	r11, r15
     af6:	c0 06       	cpc	r12, r16
     af8:	d1 06       	cpc	r13, r17
     afa:	70 f0       	brcs	.+28     	; 0xb18 <__stack+0x2b9>
     afc:	a2 16       	cp	r10, r18
     afe:	b3 06       	cpc	r11, r19
     b00:	c4 06       	cpc	r12, r20
     b02:	d5 06       	cpc	r13, r21
     b04:	48 f4       	brcc	.+18     	; 0xb18 <__stack+0x2b9>
     b06:	08 94       	sec
     b08:	21 08       	sbc	r2, r1
     b0a:	31 08       	sbc	r3, r1
     b0c:	41 08       	sbc	r4, r1
     b0e:	51 08       	sbc	r5, r1
     b10:	ae 0c       	add	r10, r14
     b12:	bf 1c       	adc	r11, r15
     b14:	c0 1e       	adc	r12, r16
     b16:	d1 1e       	adc	r13, r17
     b18:	a2 1a       	sub	r10, r18
     b1a:	b3 0a       	sbc	r11, r19
     b1c:	c4 0a       	sbc	r12, r20
     b1e:	d5 0a       	sbc	r13, r21
     b20:	c6 01       	movw	r24, r12
     b22:	b5 01       	movw	r22, r10
     b24:	a4 01       	movw	r20, r8
     b26:	93 01       	movw	r18, r6
     b28:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     b2c:	7b 01       	movw	r14, r22
     b2e:	8c 01       	movw	r16, r24
     b30:	c6 01       	movw	r24, r12
     b32:	b5 01       	movw	r22, r10
     b34:	a4 01       	movw	r20, r8
     b36:	93 01       	movw	r18, r6
     b38:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     b3c:	c9 01       	movw	r24, r18
     b3e:	da 01       	movw	r26, r20
     b40:	3c 01       	movw	r6, r24
     b42:	4d 01       	movw	r8, r26
     b44:	c4 01       	movw	r24, r8
     b46:	b3 01       	movw	r22, r6
     b48:	65 96       	adiw	r28, 0x15	; 21
     b4a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b4c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b4e:	4e ad       	ldd	r20, Y+62	; 0x3e
     b50:	5f ad       	ldd	r21, Y+63	; 0x3f
     b52:	65 97       	sbiw	r28, 0x15	; 21
     b54:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
     b58:	9b 01       	movw	r18, r22
     b5a:	ac 01       	movw	r20, r24
     b5c:	87 01       	movw	r16, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	ee 24       	eor	r14, r14
     b62:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b64:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b66:	af 8d       	ldd	r26, Y+31	; 0x1f
     b68:	b8 a1       	ldd	r27, Y+32	; 0x20
     b6a:	a0 70       	andi	r26, 0x00	; 0
     b6c:	b0 70       	andi	r27, 0x00	; 0
     b6e:	57 01       	movw	r10, r14
     b70:	68 01       	movw	r12, r16
     b72:	a8 2a       	or	r10, r24
     b74:	b9 2a       	or	r11, r25
     b76:	ca 2a       	or	r12, r26
     b78:	db 2a       	or	r13, r27
     b7a:	a2 16       	cp	r10, r18
     b7c:	b3 06       	cpc	r11, r19
     b7e:	c4 06       	cpc	r12, r20
     b80:	d5 06       	cpc	r13, r21
     b82:	00 f5       	brcc	.+64     	; 0xbc4 <__stack+0x365>
     b84:	08 94       	sec
     b86:	61 08       	sbc	r6, r1
     b88:	71 08       	sbc	r7, r1
     b8a:	81 08       	sbc	r8, r1
     b8c:	91 08       	sbc	r9, r1
     b8e:	6d a1       	ldd	r22, Y+37	; 0x25
     b90:	7e a1       	ldd	r23, Y+38	; 0x26
     b92:	8f a1       	ldd	r24, Y+39	; 0x27
     b94:	98 a5       	ldd	r25, Y+40	; 0x28
     b96:	a6 0e       	add	r10, r22
     b98:	b7 1e       	adc	r11, r23
     b9a:	c8 1e       	adc	r12, r24
     b9c:	d9 1e       	adc	r13, r25
     b9e:	a6 16       	cp	r10, r22
     ba0:	b7 06       	cpc	r11, r23
     ba2:	c8 06       	cpc	r12, r24
     ba4:	d9 06       	cpc	r13, r25
     ba6:	70 f0       	brcs	.+28     	; 0xbc4 <__stack+0x365>
     ba8:	a2 16       	cp	r10, r18
     baa:	b3 06       	cpc	r11, r19
     bac:	c4 06       	cpc	r12, r20
     bae:	d5 06       	cpc	r13, r21
     bb0:	48 f4       	brcc	.+18     	; 0xbc4 <__stack+0x365>
     bb2:	08 94       	sec
     bb4:	61 08       	sbc	r6, r1
     bb6:	71 08       	sbc	r7, r1
     bb8:	81 08       	sbc	r8, r1
     bba:	91 08       	sbc	r9, r1
     bbc:	a6 0e       	add	r10, r22
     bbe:	b7 1e       	adc	r11, r23
     bc0:	c8 1e       	adc	r12, r24
     bc2:	d9 1e       	adc	r13, r25
     bc4:	d6 01       	movw	r26, r12
     bc6:	c5 01       	movw	r24, r10
     bc8:	82 1b       	sub	r24, r18
     bca:	93 0b       	sbc	r25, r19
     bcc:	a4 0b       	sbc	r26, r20
     bce:	b5 0b       	sbc	r27, r21
     bd0:	89 8f       	std	Y+25, r24	; 0x19
     bd2:	9a 8f       	std	Y+26, r25	; 0x1a
     bd4:	ab 8f       	std	Y+27, r26	; 0x1b
     bd6:	bc 8f       	std	Y+28, r27	; 0x1c
     bd8:	d1 01       	movw	r26, r2
     bda:	99 27       	eor	r25, r25
     bdc:	88 27       	eor	r24, r24
     bde:	64 01       	movw	r12, r8
     be0:	53 01       	movw	r10, r6
     be2:	a8 2a       	or	r10, r24
     be4:	b9 2a       	or	r11, r25
     be6:	ca 2a       	or	r12, r26
     be8:	db 2a       	or	r13, r27
     bea:	a9 aa       	std	Y+49, r10	; 0x31
     bec:	ba aa       	std	Y+50, r11	; 0x32
     bee:	cb aa       	std	Y+51, r12	; 0x33
     bf0:	dc aa       	std	Y+52, r13	; 0x34
     bf2:	86 01       	movw	r16, r12
     bf4:	75 01       	movw	r14, r10
     bf6:	2f ef       	ldi	r18, 0xFF	; 255
     bf8:	3f ef       	ldi	r19, 0xFF	; 255
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	e2 22       	and	r14, r18
     c00:	f3 22       	and	r15, r19
     c02:	04 23       	and	r16, r20
     c04:	15 23       	and	r17, r21
     c06:	a6 01       	movw	r20, r12
     c08:	66 27       	eor	r22, r22
     c0a:	77 27       	eor	r23, r23
     c0c:	6d 96       	adiw	r28, 0x1d	; 29
     c0e:	4c af       	std	Y+60, r20	; 0x3c
     c10:	5d af       	std	Y+61, r21	; 0x3d
     c12:	6e af       	std	Y+62, r22	; 0x3e
     c14:	7f af       	std	Y+63, r23	; 0x3f
     c16:	6d 97       	sbiw	r28, 0x1d	; 29
     c18:	a9 a0       	ldd	r10, Y+33	; 0x21
     c1a:	ba a0       	ldd	r11, Y+34	; 0x22
     c1c:	cb a0       	ldd	r12, Y+35	; 0x23
     c1e:	dc a0       	ldd	r13, Y+36	; 0x24
     c20:	6f ef       	ldi	r22, 0xFF	; 255
     c22:	7f ef       	ldi	r23, 0xFF	; 255
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	a6 22       	and	r10, r22
     c2a:	b7 22       	and	r11, r23
     c2c:	c8 22       	and	r12, r24
     c2e:	d9 22       	and	r13, r25
     c30:	89 a1       	ldd	r24, Y+33	; 0x21
     c32:	9a a1       	ldd	r25, Y+34	; 0x22
     c34:	ab a1       	ldd	r26, Y+35	; 0x23
     c36:	bc a1       	ldd	r27, Y+36	; 0x24
     c38:	1d 01       	movw	r2, r26
     c3a:	44 24       	eor	r4, r4
     c3c:	55 24       	eor	r5, r5
     c3e:	c8 01       	movw	r24, r16
     c40:	b7 01       	movw	r22, r14
     c42:	a6 01       	movw	r20, r12
     c44:	95 01       	movw	r18, r10
     c46:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
     c4a:	69 96       	adiw	r28, 0x19	; 25
     c4c:	6c af       	std	Y+60, r22	; 0x3c
     c4e:	7d af       	std	Y+61, r23	; 0x3d
     c50:	8e af       	std	Y+62, r24	; 0x3e
     c52:	9f af       	std	Y+63, r25	; 0x3f
     c54:	69 97       	sbiw	r28, 0x19	; 25
     c56:	c8 01       	movw	r24, r16
     c58:	b7 01       	movw	r22, r14
     c5a:	a2 01       	movw	r20, r4
     c5c:	91 01       	movw	r18, r2
     c5e:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
     c62:	3b 01       	movw	r6, r22
     c64:	4c 01       	movw	r8, r24
     c66:	6d 96       	adiw	r28, 0x1d	; 29
     c68:	6c ad       	ldd	r22, Y+60	; 0x3c
     c6a:	7d ad       	ldd	r23, Y+61	; 0x3d
     c6c:	8e ad       	ldd	r24, Y+62	; 0x3e
     c6e:	9f ad       	ldd	r25, Y+63	; 0x3f
     c70:	6d 97       	sbiw	r28, 0x1d	; 29
     c72:	a6 01       	movw	r20, r12
     c74:	95 01       	movw	r18, r10
     c76:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
     c7a:	7b 01       	movw	r14, r22
     c7c:	8c 01       	movw	r16, r24
     c7e:	6d 96       	adiw	r28, 0x1d	; 29
     c80:	6c ad       	ldd	r22, Y+60	; 0x3c
     c82:	7d ad       	ldd	r23, Y+61	; 0x3d
     c84:	8e ad       	ldd	r24, Y+62	; 0x3e
     c86:	9f ad       	ldd	r25, Y+63	; 0x3f
     c88:	6d 97       	sbiw	r28, 0x1d	; 29
     c8a:	a2 01       	movw	r20, r4
     c8c:	91 01       	movw	r18, r2
     c8e:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
     c92:	5b 01       	movw	r10, r22
     c94:	6c 01       	movw	r12, r24
     c96:	a8 01       	movw	r20, r16
     c98:	97 01       	movw	r18, r14
     c9a:	26 0d       	add	r18, r6
     c9c:	37 1d       	adc	r19, r7
     c9e:	48 1d       	adc	r20, r8
     ca0:	59 1d       	adc	r21, r9
     ca2:	69 96       	adiw	r28, 0x19	; 25
     ca4:	6c ac       	ldd	r6, Y+60	; 0x3c
     ca6:	7d ac       	ldd	r7, Y+61	; 0x3d
     ca8:	8e ac       	ldd	r8, Y+62	; 0x3e
     caa:	9f ac       	ldd	r9, Y+63	; 0x3f
     cac:	69 97       	sbiw	r28, 0x19	; 25
     cae:	c4 01       	movw	r24, r8
     cb0:	aa 27       	eor	r26, r26
     cb2:	bb 27       	eor	r27, r27
     cb4:	28 0f       	add	r18, r24
     cb6:	39 1f       	adc	r19, r25
     cb8:	4a 1f       	adc	r20, r26
     cba:	5b 1f       	adc	r21, r27
     cbc:	2e 15       	cp	r18, r14
     cbe:	3f 05       	cpc	r19, r15
     cc0:	40 07       	cpc	r20, r16
     cc2:	51 07       	cpc	r21, r17
     cc4:	48 f4       	brcc	.+18     	; 0xcd8 <__stack+0x479>
     cc6:	e1 2c       	mov	r14, r1
     cc8:	f1 2c       	mov	r15, r1
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	06 2f       	mov	r16, r22
     cce:	11 2d       	mov	r17, r1
     cd0:	ae 0c       	add	r10, r14
     cd2:	bf 1c       	adc	r11, r15
     cd4:	c0 1e       	adc	r12, r16
     cd6:	d1 1e       	adc	r13, r17
     cd8:	ca 01       	movw	r24, r20
     cda:	aa 27       	eor	r26, r26
     cdc:	bb 27       	eor	r27, r27
     cde:	bc 01       	movw	r22, r24
     ce0:	cd 01       	movw	r24, r26
     ce2:	6a 0d       	add	r22, r10
     ce4:	7b 1d       	adc	r23, r11
     ce6:	8c 1d       	adc	r24, r12
     ce8:	9d 1d       	adc	r25, r13
     cea:	69 8c       	ldd	r6, Y+25	; 0x19
     cec:	7a 8c       	ldd	r7, Y+26	; 0x1a
     cee:	8b 8c       	ldd	r8, Y+27	; 0x1b
     cf0:	9c 8c       	ldd	r9, Y+28	; 0x1c
     cf2:	66 16       	cp	r6, r22
     cf4:	77 06       	cpc	r7, r23
     cf6:	88 06       	cpc	r8, r24
     cf8:	99 06       	cpc	r9, r25
     cfa:	40 f1       	brcs	.+80     	; 0xd4c <__stack+0x4ed>
     cfc:	66 15       	cp	r22, r6
     cfe:	77 05       	cpc	r23, r7
     d00:	88 05       	cpc	r24, r8
     d02:	99 05       	cpc	r25, r9
     d04:	09 f0       	breq	.+2      	; 0xd08 <__stack+0x4a9>
     d06:	43 c0       	rjmp	.+134    	; 0xd8e <__stack+0x52f>
     d08:	d9 01       	movw	r26, r18
     d0a:	99 27       	eor	r25, r25
     d0c:	88 27       	eor	r24, r24
     d0e:	69 96       	adiw	r28, 0x19	; 25
     d10:	2c ad       	ldd	r18, Y+60	; 0x3c
     d12:	3d ad       	ldd	r19, Y+61	; 0x3d
     d14:	4e ad       	ldd	r20, Y+62	; 0x3e
     d16:	5f ad       	ldd	r21, Y+63	; 0x3f
     d18:	69 97       	sbiw	r28, 0x19	; 25
     d1a:	40 70       	andi	r20, 0x00	; 0
     d1c:	50 70       	andi	r21, 0x00	; 0
     d1e:	82 0f       	add	r24, r18
     d20:	93 1f       	adc	r25, r19
     d22:	a4 1f       	adc	r26, r20
     d24:	b5 1f       	adc	r27, r21
     d26:	2d a5       	ldd	r18, Y+45	; 0x2d
     d28:	3e a5       	ldd	r19, Y+46	; 0x2e
     d2a:	4f a5       	ldd	r20, Y+47	; 0x2f
     d2c:	58 a9       	ldd	r21, Y+48	; 0x30
     d2e:	6e 96       	adiw	r28, 0x1e	; 30
     d30:	0f ac       	ldd	r0, Y+63	; 0x3f
     d32:	6e 97       	sbiw	r28, 0x1e	; 30
     d34:	04 c0       	rjmp	.+8      	; 0xd3e <__stack+0x4df>
     d36:	22 0f       	add	r18, r18
     d38:	33 1f       	adc	r19, r19
     d3a:	44 1f       	adc	r20, r20
     d3c:	55 1f       	adc	r21, r21
     d3e:	0a 94       	dec	r0
     d40:	d2 f7       	brpl	.-12     	; 0xd36 <__stack+0x4d7>
     d42:	28 17       	cp	r18, r24
     d44:	39 07       	cpc	r19, r25
     d46:	4a 07       	cpc	r20, r26
     d48:	5b 07       	cpc	r21, r27
     d4a:	08 f5       	brcc	.+66     	; 0xd8e <__stack+0x52f>
     d4c:	09 a9       	ldd	r16, Y+49	; 0x31
     d4e:	1a a9       	ldd	r17, Y+50	; 0x32
     d50:	2b a9       	ldd	r18, Y+51	; 0x33
     d52:	3c a9       	ldd	r19, Y+52	; 0x34
     d54:	01 50       	subi	r16, 0x01	; 1
     d56:	10 40       	sbci	r17, 0x00	; 0
     d58:	20 40       	sbci	r18, 0x00	; 0
     d5a:	30 40       	sbci	r19, 0x00	; 0
     d5c:	09 ab       	std	Y+49, r16	; 0x31
     d5e:	1a ab       	std	Y+50, r17	; 0x32
     d60:	2b ab       	std	Y+51, r18	; 0x33
     d62:	3c ab       	std	Y+52, r19	; 0x34
     d64:	14 c0       	rjmp	.+40     	; 0xd8e <__stack+0x52f>
     d66:	66 24       	eor	r6, r6
     d68:	77 24       	eor	r7, r7
     d6a:	43 01       	movw	r8, r6
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	29 ab       	std	Y+49, r18	; 0x31
     d76:	3a ab       	std	Y+50, r19	; 0x32
     d78:	4b ab       	std	Y+51, r20	; 0x33
     d7a:	5c ab       	std	Y+52, r21	; 0x34
     d7c:	0b c0       	rjmp	.+22     	; 0xd94 <__stack+0x535>
     d7e:	66 24       	eor	r6, r6
     d80:	77 24       	eor	r7, r7
     d82:	43 01       	movw	r8, r6
     d84:	19 aa       	std	Y+49, r1	; 0x31
     d86:	1a aa       	std	Y+50, r1	; 0x32
     d88:	1b aa       	std	Y+51, r1	; 0x33
     d8a:	1c aa       	std	Y+52, r1	; 0x34
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <__stack+0x535>
     d8e:	66 24       	eor	r6, r6
     d90:	77 24       	eor	r7, r7
     d92:	43 01       	movw	r8, r6
     d94:	fe 01       	movw	r30, r28
     d96:	71 96       	adiw	r30, 0x11	; 17
     d98:	88 e0       	ldi	r24, 0x08	; 8
     d9a:	df 01       	movw	r26, r30
     d9c:	1d 92       	st	X+, r1
     d9e:	8a 95       	dec	r24
     da0:	e9 f7       	brne	.-6      	; 0xd9c <__stack+0x53d>
     da2:	a9 a8       	ldd	r10, Y+49	; 0x31
     da4:	ba a8       	ldd	r11, Y+50	; 0x32
     da6:	cb a8       	ldd	r12, Y+51	; 0x33
     da8:	dc a8       	ldd	r13, Y+52	; 0x34
     daa:	a9 8a       	std	Y+17, r10	; 0x11
     dac:	ba 8a       	std	Y+18, r11	; 0x12
     dae:	cb 8a       	std	Y+19, r12	; 0x13
     db0:	dc 8a       	std	Y+20, r13	; 0x14
     db2:	6d 8a       	std	Y+21, r6	; 0x15
     db4:	7e 8a       	std	Y+22, r7	; 0x16
     db6:	8f 8a       	std	Y+23, r8	; 0x17
     db8:	98 8e       	std	Y+24, r9	; 0x18
     dba:	29 a9       	ldd	r18, Y+49	; 0x31
     dbc:	3a 89       	ldd	r19, Y+18	; 0x12
     dbe:	4b 89       	ldd	r20, Y+19	; 0x13
     dc0:	5c 89       	ldd	r21, Y+20	; 0x14
     dc2:	66 2d       	mov	r22, r6
     dc4:	7e 89       	ldd	r23, Y+22	; 0x16
     dc6:	8f 89       	ldd	r24, Y+23	; 0x17
     dc8:	98 8d       	ldd	r25, Y+24	; 0x18
     dca:	c2 5a       	subi	r28, 0xA2	; 162
     dcc:	df 4f       	sbci	r29, 0xFF	; 255
     dce:	e2 e1       	ldi	r30, 0x12	; 18
     dd0:	0c 94 23 24 	jmp	0x4846	; 0x4846 <__epilogue_restores__>

00000dd4 <__umoddi3>:
     dd4:	ab e5       	ldi	r26, 0x5B	; 91
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e0 ef       	ldi	r30, 0xF0	; 240
     dda:	f6 e0       	ldi	r31, 0x06	; 6
     ddc:	0c 94 07 24 	jmp	0x480e	; 0x480e <__prologue_saves__>
     de0:	a8 e0       	ldi	r26, 0x08	; 8
     de2:	4e 01       	movw	r8, r28
     de4:	08 94       	sec
     de6:	81 1c       	adc	r8, r1
     de8:	91 1c       	adc	r9, r1
     dea:	f4 01       	movw	r30, r8
     dec:	6a 2e       	mov	r6, r26
     dee:	11 92       	st	Z+, r1
     df0:	6a 94       	dec	r6
     df2:	e9 f7       	brne	.-6      	; 0xdee <__umoddi3+0x1a>
     df4:	29 83       	std	Y+1, r18	; 0x01
     df6:	3a 83       	std	Y+2, r19	; 0x02
     df8:	4b 83       	std	Y+3, r20	; 0x03
     dfa:	5c 83       	std	Y+4, r21	; 0x04
     dfc:	6d 83       	std	Y+5, r22	; 0x05
     dfe:	7e 83       	std	Y+6, r23	; 0x06
     e00:	8f 83       	std	Y+7, r24	; 0x07
     e02:	98 87       	std	Y+8, r25	; 0x08
     e04:	ce 01       	movw	r24, r28
     e06:	09 96       	adiw	r24, 0x09	; 9
     e08:	fc 01       	movw	r30, r24
     e0a:	11 92       	st	Z+, r1
     e0c:	aa 95       	dec	r26
     e0e:	e9 f7       	brne	.-6      	; 0xe0a <__umoddi3+0x36>
     e10:	a9 86       	std	Y+9, r10	; 0x09
     e12:	ba 86       	std	Y+10, r11	; 0x0a
     e14:	cb 86       	std	Y+11, r12	; 0x0b
     e16:	dc 86       	std	Y+12, r13	; 0x0c
     e18:	ed 86       	std	Y+13, r14	; 0x0d
     e1a:	fe 86       	std	Y+14, r15	; 0x0e
     e1c:	0f 87       	std	Y+15, r16	; 0x0f
     e1e:	18 8b       	std	Y+16, r17	; 0x10
     e20:	29 84       	ldd	r2, Y+9	; 0x09
     e22:	3a 84       	ldd	r3, Y+10	; 0x0a
     e24:	4b 84       	ldd	r4, Y+11	; 0x0b
     e26:	5c 84       	ldd	r5, Y+12	; 0x0c
     e28:	ad 84       	ldd	r10, Y+13	; 0x0d
     e2a:	be 84       	ldd	r11, Y+14	; 0x0e
     e2c:	cf 84       	ldd	r12, Y+15	; 0x0f
     e2e:	d8 88       	ldd	r13, Y+16	; 0x10
     e30:	29 81       	ldd	r18, Y+1	; 0x01
     e32:	3a 81       	ldd	r19, Y+2	; 0x02
     e34:	4b 81       	ldd	r20, Y+3	; 0x03
     e36:	5c 81       	ldd	r21, Y+4	; 0x04
     e38:	69 96       	adiw	r28, 0x19	; 25
     e3a:	2f af       	std	Y+63, r18	; 0x3f
     e3c:	69 97       	sbiw	r28, 0x19	; 25
     e3e:	6a 96       	adiw	r28, 0x1a	; 26
     e40:	3f af       	std	Y+63, r19	; 0x3f
     e42:	6a 97       	sbiw	r28, 0x1a	; 26
     e44:	6b 96       	adiw	r28, 0x1b	; 27
     e46:	4f af       	std	Y+63, r20	; 0x3f
     e48:	6b 97       	sbiw	r28, 0x1b	; 27
     e4a:	6c 96       	adiw	r28, 0x1c	; 28
     e4c:	5f af       	std	Y+63, r21	; 0x3f
     e4e:	6c 97       	sbiw	r28, 0x1c	; 28
     e50:	6c 96       	adiw	r28, 0x1c	; 28
     e52:	6c ac       	ldd	r6, Y+60	; 0x3c
     e54:	7d ac       	ldd	r7, Y+61	; 0x3d
     e56:	8e ac       	ldd	r8, Y+62	; 0x3e
     e58:	9f ac       	ldd	r9, Y+63	; 0x3f
     e5a:	6c 97       	sbiw	r28, 0x1c	; 28
     e5c:	69 aa       	std	Y+49, r6	; 0x31
     e5e:	7a aa       	std	Y+50, r7	; 0x32
     e60:	8b aa       	std	Y+51, r8	; 0x33
     e62:	9c aa       	std	Y+52, r9	; 0x34
     e64:	6d 81       	ldd	r22, Y+5	; 0x05
     e66:	7e 81       	ldd	r23, Y+6	; 0x06
     e68:	8f 81       	ldd	r24, Y+7	; 0x07
     e6a:	98 85       	ldd	r25, Y+8	; 0x08
     e6c:	3b 01       	movw	r6, r22
     e6e:	4c 01       	movw	r8, r24
     e70:	6d aa       	std	Y+53, r6	; 0x35
     e72:	7e aa       	std	Y+54, r7	; 0x36
     e74:	8f aa       	std	Y+55, r8	; 0x37
     e76:	98 ae       	std	Y+56, r9	; 0x38
     e78:	a1 14       	cp	r10, r1
     e7a:	b1 04       	cpc	r11, r1
     e7c:	c1 04       	cpc	r12, r1
     e7e:	d1 04       	cpc	r13, r1
     e80:	09 f0       	breq	.+2      	; 0xe84 <__umoddi3+0xb0>
     e82:	04 c3       	rjmp	.+1544   	; 0x148c <__umoddi3+0x6b8>
     e84:	62 14       	cp	r6, r2
     e86:	73 04       	cpc	r7, r3
     e88:	84 04       	cpc	r8, r4
     e8a:	95 04       	cpc	r9, r5
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <__umoddi3+0xbc>
     e8e:	00 c1       	rjmp	.+512    	; 0x1090 <__umoddi3+0x2bc>
     e90:	00 e0       	ldi	r16, 0x00	; 0
     e92:	20 16       	cp	r2, r16
     e94:	00 e0       	ldi	r16, 0x00	; 0
     e96:	30 06       	cpc	r3, r16
     e98:	01 e0       	ldi	r16, 0x01	; 1
     e9a:	40 06       	cpc	r4, r16
     e9c:	00 e0       	ldi	r16, 0x00	; 0
     e9e:	50 06       	cpc	r5, r16
     ea0:	88 f4       	brcc	.+34     	; 0xec4 <__umoddi3+0xf0>
     ea2:	1f ef       	ldi	r17, 0xFF	; 255
     ea4:	21 16       	cp	r2, r17
     ea6:	31 04       	cpc	r3, r1
     ea8:	41 04       	cpc	r4, r1
     eaa:	51 04       	cpc	r5, r1
     eac:	39 f0       	breq	.+14     	; 0xebc <__umoddi3+0xe8>
     eae:	30 f0       	brcs	.+12     	; 0xebc <__umoddi3+0xe8>
     eb0:	88 e0       	ldi	r24, 0x08	; 8
     eb2:	e8 2e       	mov	r14, r24
     eb4:	f1 2c       	mov	r15, r1
     eb6:	01 2d       	mov	r16, r1
     eb8:	11 2d       	mov	r17, r1
     eba:	18 c0       	rjmp	.+48     	; 0xeec <__umoddi3+0x118>
     ebc:	ee 24       	eor	r14, r14
     ebe:	ff 24       	eor	r15, r15
     ec0:	87 01       	movw	r16, r14
     ec2:	14 c0       	rjmp	.+40     	; 0xeec <__umoddi3+0x118>
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	24 16       	cp	r2, r20
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	34 06       	cpc	r3, r20
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	44 06       	cpc	r4, r20
     ed0:	41 e0       	ldi	r20, 0x01	; 1
     ed2:	54 06       	cpc	r5, r20
     ed4:	30 f0       	brcs	.+12     	; 0xee2 <__umoddi3+0x10e>
     ed6:	b8 e1       	ldi	r27, 0x18	; 24
     ed8:	eb 2e       	mov	r14, r27
     eda:	f1 2c       	mov	r15, r1
     edc:	01 2d       	mov	r16, r1
     ede:	11 2d       	mov	r17, r1
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <__umoddi3+0x118>
     ee2:	a0 e1       	ldi	r26, 0x10	; 16
     ee4:	ea 2e       	mov	r14, r26
     ee6:	f1 2c       	mov	r15, r1
     ee8:	01 2d       	mov	r16, r1
     eea:	11 2d       	mov	r17, r1
     eec:	d2 01       	movw	r26, r4
     eee:	c1 01       	movw	r24, r2
     ef0:	0e 2c       	mov	r0, r14
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <__umoddi3+0x128>
     ef4:	b6 95       	lsr	r27
     ef6:	a7 95       	ror	r26
     ef8:	97 95       	ror	r25
     efa:	87 95       	ror	r24
     efc:	0a 94       	dec	r0
     efe:	d2 f7       	brpl	.-12     	; 0xef4 <__umoddi3+0x120>
     f00:	89 57       	subi	r24, 0x79	; 121
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	dc 01       	movw	r26, r24
     f06:	2c 91       	ld	r18, X
     f08:	80 e2       	ldi	r24, 0x20	; 32
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	8e 19       	sub	r24, r14
     f12:	9f 09       	sbc	r25, r15
     f14:	a0 0b       	sbc	r26, r16
     f16:	b1 0b       	sbc	r27, r17
     f18:	5c 01       	movw	r10, r24
     f1a:	6d 01       	movw	r12, r26
     f1c:	a2 1a       	sub	r10, r18
     f1e:	b1 08       	sbc	r11, r1
     f20:	c1 08       	sbc	r12, r1
     f22:	d1 08       	sbc	r13, r1
     f24:	a9 ae       	std	Y+57, r10	; 0x39
     f26:	ba ae       	std	Y+58, r11	; 0x3a
     f28:	cb ae       	std	Y+59, r12	; 0x3b
     f2a:	dc ae       	std	Y+60, r13	; 0x3c
     f2c:	a1 14       	cp	r10, r1
     f2e:	b1 04       	cpc	r11, r1
     f30:	c1 04       	cpc	r12, r1
     f32:	d1 04       	cpc	r13, r1
     f34:	09 f4       	brne	.+2      	; 0xf38 <__umoddi3+0x164>
     f36:	3f c0       	rjmp	.+126    	; 0xfb6 <__umoddi3+0x1e2>
     f38:	69 ad       	ldd	r22, Y+57	; 0x39
     f3a:	06 2e       	mov	r0, r22
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <__umoddi3+0x172>
     f3e:	22 0c       	add	r2, r2
     f40:	33 1c       	adc	r3, r3
     f42:	44 1c       	adc	r4, r4
     f44:	55 1c       	adc	r5, r5
     f46:	0a 94       	dec	r0
     f48:	d2 f7       	brpl	.-12     	; 0xf3e <__umoddi3+0x16a>
     f4a:	a4 01       	movw	r20, r8
     f4c:	93 01       	movw	r18, r6
     f4e:	06 2e       	mov	r0, r22
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__umoddi3+0x186>
     f52:	22 0f       	add	r18, r18
     f54:	33 1f       	adc	r19, r19
     f56:	44 1f       	adc	r20, r20
     f58:	55 1f       	adc	r21, r21
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__umoddi3+0x17e>
     f5e:	80 e2       	ldi	r24, 0x20	; 32
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	8a 19       	sub	r24, r10
     f64:	9b 09       	sbc	r25, r11
     f66:	6c 96       	adiw	r28, 0x1c	; 28
     f68:	cc ac       	ldd	r12, Y+60	; 0x3c
     f6a:	dd ac       	ldd	r13, Y+61	; 0x3d
     f6c:	ee ac       	ldd	r14, Y+62	; 0x3e
     f6e:	ff ac       	ldd	r15, Y+63	; 0x3f
     f70:	6c 97       	sbiw	r28, 0x1c	; 28
     f72:	04 c0       	rjmp	.+8      	; 0xf7c <__umoddi3+0x1a8>
     f74:	f6 94       	lsr	r15
     f76:	e7 94       	ror	r14
     f78:	d7 94       	ror	r13
     f7a:	c7 94       	ror	r12
     f7c:	8a 95       	dec	r24
     f7e:	d2 f7       	brpl	.-12     	; 0xf74 <__umoddi3+0x1a0>
     f80:	87 01       	movw	r16, r14
     f82:	76 01       	movw	r14, r12
     f84:	e2 2a       	or	r14, r18
     f86:	f3 2a       	or	r15, r19
     f88:	04 2b       	or	r16, r20
     f8a:	15 2b       	or	r17, r21
     f8c:	ed aa       	std	Y+53, r14	; 0x35
     f8e:	fe aa       	std	Y+54, r15	; 0x36
     f90:	0f ab       	std	Y+55, r16	; 0x37
     f92:	18 af       	std	Y+56, r17	; 0x38
     f94:	6c 96       	adiw	r28, 0x1c	; 28
     f96:	8c ad       	ldd	r24, Y+60	; 0x3c
     f98:	9d ad       	ldd	r25, Y+61	; 0x3d
     f9a:	ae ad       	ldd	r26, Y+62	; 0x3e
     f9c:	bf ad       	ldd	r27, Y+63	; 0x3f
     f9e:	6c 97       	sbiw	r28, 0x1c	; 28
     fa0:	04 c0       	rjmp	.+8      	; 0xfaa <__umoddi3+0x1d6>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	aa 1f       	adc	r26, r26
     fa8:	bb 1f       	adc	r27, r27
     faa:	6a 95       	dec	r22
     fac:	d2 f7       	brpl	.-12     	; 0xfa2 <__umoddi3+0x1ce>
     fae:	89 ab       	std	Y+49, r24	; 0x31
     fb0:	9a ab       	std	Y+50, r25	; 0x32
     fb2:	ab ab       	std	Y+51, r26	; 0x33
     fb4:	bc ab       	std	Y+52, r27	; 0x34
     fb6:	32 01       	movw	r6, r4
     fb8:	88 24       	eor	r8, r8
     fba:	99 24       	eor	r9, r9
     fbc:	b2 01       	movw	r22, r4
     fbe:	a1 01       	movw	r20, r2
     fc0:	60 70       	andi	r22, 0x00	; 0
     fc2:	70 70       	andi	r23, 0x00	; 0
     fc4:	21 96       	adiw	r28, 0x01	; 1
     fc6:	4c af       	std	Y+60, r20	; 0x3c
     fc8:	5d af       	std	Y+61, r21	; 0x3d
     fca:	6e af       	std	Y+62, r22	; 0x3e
     fcc:	7f af       	std	Y+63, r23	; 0x3f
     fce:	21 97       	sbiw	r28, 0x01	; 1
     fd0:	6d a9       	ldd	r22, Y+53	; 0x35
     fd2:	7e a9       	ldd	r23, Y+54	; 0x36
     fd4:	8f a9       	ldd	r24, Y+55	; 0x37
     fd6:	98 ad       	ldd	r25, Y+56	; 0x38
     fd8:	a4 01       	movw	r20, r8
     fda:	93 01       	movw	r18, r6
     fdc:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     fe0:	7b 01       	movw	r14, r22
     fe2:	8c 01       	movw	r16, r24
     fe4:	6d a9       	ldd	r22, Y+53	; 0x35
     fe6:	7e a9       	ldd	r23, Y+54	; 0x36
     fe8:	8f a9       	ldd	r24, Y+55	; 0x37
     fea:	98 ad       	ldd	r25, Y+56	; 0x38
     fec:	a4 01       	movw	r20, r8
     fee:	93 01       	movw	r18, r6
     ff0:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
     ff4:	ca 01       	movw	r24, r20
     ff6:	b9 01       	movw	r22, r18
     ff8:	21 96       	adiw	r28, 0x01	; 1
     ffa:	2c ad       	ldd	r18, Y+60	; 0x3c
     ffc:	3d ad       	ldd	r19, Y+61	; 0x3d
     ffe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1000:	5f ad       	ldd	r21, Y+63	; 0x3f
    1002:	21 97       	sbiw	r28, 0x01	; 1
    1004:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
    100c:	87 01       	movw	r16, r14
    100e:	ff 24       	eor	r15, r15
    1010:	ee 24       	eor	r14, r14
    1012:	a9 a8       	ldd	r10, Y+49	; 0x31
    1014:	ba a8       	ldd	r11, Y+50	; 0x32
    1016:	cb a8       	ldd	r12, Y+51	; 0x33
    1018:	dc a8       	ldd	r13, Y+52	; 0x34
    101a:	c6 01       	movw	r24, r12
    101c:	aa 27       	eor	r26, r26
    101e:	bb 27       	eor	r27, r27
    1020:	57 01       	movw	r10, r14
    1022:	68 01       	movw	r12, r16
    1024:	a8 2a       	or	r10, r24
    1026:	b9 2a       	or	r11, r25
    1028:	ca 2a       	or	r12, r26
    102a:	db 2a       	or	r13, r27
    102c:	a2 16       	cp	r10, r18
    102e:	b3 06       	cpc	r11, r19
    1030:	c4 06       	cpc	r12, r20
    1032:	d5 06       	cpc	r13, r21
    1034:	90 f4       	brcc	.+36     	; 0x105a <__umoddi3+0x286>
    1036:	a2 0c       	add	r10, r2
    1038:	b3 1c       	adc	r11, r3
    103a:	c4 1c       	adc	r12, r4
    103c:	d5 1c       	adc	r13, r5
    103e:	a2 14       	cp	r10, r2
    1040:	b3 04       	cpc	r11, r3
    1042:	c4 04       	cpc	r12, r4
    1044:	d5 04       	cpc	r13, r5
    1046:	48 f0       	brcs	.+18     	; 0x105a <__umoddi3+0x286>
    1048:	a2 16       	cp	r10, r18
    104a:	b3 06       	cpc	r11, r19
    104c:	c4 06       	cpc	r12, r20
    104e:	d5 06       	cpc	r13, r21
    1050:	20 f4       	brcc	.+8      	; 0x105a <__umoddi3+0x286>
    1052:	a2 0c       	add	r10, r2
    1054:	b3 1c       	adc	r11, r3
    1056:	c4 1c       	adc	r12, r4
    1058:	d5 1c       	adc	r13, r5
    105a:	a2 1a       	sub	r10, r18
    105c:	b3 0a       	sbc	r11, r19
    105e:	c4 0a       	sbc	r12, r20
    1060:	d5 0a       	sbc	r13, r21
    1062:	c6 01       	movw	r24, r12
    1064:	b5 01       	movw	r22, r10
    1066:	a4 01       	movw	r20, r8
    1068:	93 01       	movw	r18, r6
    106a:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
    106e:	7b 01       	movw	r14, r22
    1070:	8c 01       	movw	r16, r24
    1072:	c6 01       	movw	r24, r12
    1074:	b5 01       	movw	r22, r10
    1076:	a4 01       	movw	r20, r8
    1078:	93 01       	movw	r18, r6
    107a:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	21 96       	adiw	r28, 0x01	; 1
    1084:	2c ad       	ldd	r18, Y+60	; 0x3c
    1086:	3d ad       	ldd	r19, Y+61	; 0x3d
    1088:	4e ad       	ldd	r20, Y+62	; 0x3e
    108a:	5f ad       	ldd	r21, Y+63	; 0x3f
    108c:	21 97       	sbiw	r28, 0x01	; 1
    108e:	ba c1       	rjmp	.+884    	; 0x1404 <__umoddi3+0x630>
    1090:	21 14       	cp	r2, r1
    1092:	31 04       	cpc	r3, r1
    1094:	41 04       	cpc	r4, r1
    1096:	51 04       	cpc	r5, r1
    1098:	71 f4       	brne	.+28     	; 0x10b6 <__umoddi3+0x2e2>
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
    10ae:	c9 01       	movw	r24, r18
    10b0:	da 01       	movw	r26, r20
    10b2:	1c 01       	movw	r2, r24
    10b4:	2d 01       	movw	r4, r26
    10b6:	00 e0       	ldi	r16, 0x00	; 0
    10b8:	20 16       	cp	r2, r16
    10ba:	00 e0       	ldi	r16, 0x00	; 0
    10bc:	30 06       	cpc	r3, r16
    10be:	01 e0       	ldi	r16, 0x01	; 1
    10c0:	40 06       	cpc	r4, r16
    10c2:	00 e0       	ldi	r16, 0x00	; 0
    10c4:	50 06       	cpc	r5, r16
    10c6:	88 f4       	brcc	.+34     	; 0x10ea <__umoddi3+0x316>
    10c8:	1f ef       	ldi	r17, 0xFF	; 255
    10ca:	21 16       	cp	r2, r17
    10cc:	31 04       	cpc	r3, r1
    10ce:	41 04       	cpc	r4, r1
    10d0:	51 04       	cpc	r5, r1
    10d2:	39 f0       	breq	.+14     	; 0x10e2 <__umoddi3+0x30e>
    10d4:	30 f0       	brcs	.+12     	; 0x10e2 <__umoddi3+0x30e>
    10d6:	68 e0       	ldi	r22, 0x08	; 8
    10d8:	e6 2e       	mov	r14, r22
    10da:	f1 2c       	mov	r15, r1
    10dc:	01 2d       	mov	r16, r1
    10de:	11 2d       	mov	r17, r1
    10e0:	18 c0       	rjmp	.+48     	; 0x1112 <__umoddi3+0x33e>
    10e2:	ee 24       	eor	r14, r14
    10e4:	ff 24       	eor	r15, r15
    10e6:	87 01       	movw	r16, r14
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <__umoddi3+0x33e>
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	24 16       	cp	r2, r20
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	34 06       	cpc	r3, r20
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	44 06       	cpc	r4, r20
    10f6:	41 e0       	ldi	r20, 0x01	; 1
    10f8:	54 06       	cpc	r5, r20
    10fa:	30 f0       	brcs	.+12     	; 0x1108 <__umoddi3+0x334>
    10fc:	58 e1       	ldi	r21, 0x18	; 24
    10fe:	e5 2e       	mov	r14, r21
    1100:	f1 2c       	mov	r15, r1
    1102:	01 2d       	mov	r16, r1
    1104:	11 2d       	mov	r17, r1
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <__umoddi3+0x33e>
    1108:	40 e1       	ldi	r20, 0x10	; 16
    110a:	e4 2e       	mov	r14, r20
    110c:	f1 2c       	mov	r15, r1
    110e:	01 2d       	mov	r16, r1
    1110:	11 2d       	mov	r17, r1
    1112:	d2 01       	movw	r26, r4
    1114:	c1 01       	movw	r24, r2
    1116:	0e 2c       	mov	r0, r14
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <__umoddi3+0x34e>
    111a:	b6 95       	lsr	r27
    111c:	a7 95       	ror	r26
    111e:	97 95       	ror	r25
    1120:	87 95       	ror	r24
    1122:	0a 94       	dec	r0
    1124:	d2 f7       	brpl	.-12     	; 0x111a <__umoddi3+0x346>
    1126:	89 57       	subi	r24, 0x79	; 121
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	dc 01       	movw	r26, r24
    112c:	2c 91       	ld	r18, X
    112e:	30 e2       	ldi	r19, 0x20	; 32
    1130:	a3 2e       	mov	r10, r19
    1132:	b1 2c       	mov	r11, r1
    1134:	c1 2c       	mov	r12, r1
    1136:	d1 2c       	mov	r13, r1
    1138:	d6 01       	movw	r26, r12
    113a:	c5 01       	movw	r24, r10
    113c:	8e 19       	sub	r24, r14
    113e:	9f 09       	sbc	r25, r15
    1140:	a0 0b       	sbc	r26, r16
    1142:	b1 0b       	sbc	r27, r17
    1144:	7c 01       	movw	r14, r24
    1146:	8d 01       	movw	r16, r26
    1148:	e2 1a       	sub	r14, r18
    114a:	f1 08       	sbc	r15, r1
    114c:	01 09       	sbc	r16, r1
    114e:	11 09       	sbc	r17, r1
    1150:	e9 ae       	std	Y+57, r14	; 0x39
    1152:	fa ae       	std	Y+58, r15	; 0x3a
    1154:	0b af       	std	Y+59, r16	; 0x3b
    1156:	1c af       	std	Y+60, r17	; 0x3c
    1158:	e1 14       	cp	r14, r1
    115a:	f1 04       	cpc	r15, r1
    115c:	01 05       	cpc	r16, r1
    115e:	11 05       	cpc	r17, r1
    1160:	39 f4       	brne	.+14     	; 0x1170 <__umoddi3+0x39c>
    1162:	64 01       	movw	r12, r8
    1164:	53 01       	movw	r10, r6
    1166:	a2 18       	sub	r10, r2
    1168:	b3 08       	sbc	r11, r3
    116a:	c4 08       	sbc	r12, r4
    116c:	d5 08       	sbc	r13, r5
    116e:	e2 c0       	rjmp	.+452    	; 0x1334 <__umoddi3+0x560>
    1170:	f9 ac       	ldd	r15, Y+57	; 0x39
    1172:	68 96       	adiw	r28, 0x18	; 24
    1174:	ff ae       	std	Y+63, r15	; 0x3f
    1176:	68 97       	sbiw	r28, 0x18	; 24
    1178:	0f 2c       	mov	r0, r15
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <__umoddi3+0x3b0>
    117c:	22 0c       	add	r2, r2
    117e:	33 1c       	adc	r3, r3
    1180:	44 1c       	adc	r4, r4
    1182:	55 1c       	adc	r5, r5
    1184:	0a 94       	dec	r0
    1186:	d2 f7       	brpl	.-12     	; 0x117c <__umoddi3+0x3a8>
    1188:	8a 2d       	mov	r24, r10
    118a:	8f 19       	sub	r24, r15
    118c:	64 01       	movw	r12, r8
    118e:	53 01       	movw	r10, r6
    1190:	08 2e       	mov	r0, r24
    1192:	04 c0       	rjmp	.+8      	; 0x119c <__umoddi3+0x3c8>
    1194:	d6 94       	lsr	r13
    1196:	c7 94       	ror	r12
    1198:	b7 94       	ror	r11
    119a:	a7 94       	ror	r10
    119c:	0a 94       	dec	r0
    119e:	d2 f7       	brpl	.-12     	; 0x1194 <__umoddi3+0x3c0>
    11a0:	a4 01       	movw	r20, r8
    11a2:	93 01       	movw	r18, r6
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <__umoddi3+0x3da>
    11a6:	22 0f       	add	r18, r18
    11a8:	33 1f       	adc	r19, r19
    11aa:	44 1f       	adc	r20, r20
    11ac:	55 1f       	adc	r21, r21
    11ae:	fa 94       	dec	r15
    11b0:	d2 f7       	brpl	.-12     	; 0x11a6 <__umoddi3+0x3d2>
    11b2:	6c 96       	adiw	r28, 0x1c	; 28
    11b4:	6c ac       	ldd	r6, Y+60	; 0x3c
    11b6:	7d ac       	ldd	r7, Y+61	; 0x3d
    11b8:	8e ac       	ldd	r8, Y+62	; 0x3e
    11ba:	9f ac       	ldd	r9, Y+63	; 0x3f
    11bc:	6c 97       	sbiw	r28, 0x1c	; 28
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <__umoddi3+0x3f4>
    11c0:	96 94       	lsr	r9
    11c2:	87 94       	ror	r8
    11c4:	77 94       	ror	r7
    11c6:	67 94       	ror	r6
    11c8:	8a 95       	dec	r24
    11ca:	d2 f7       	brpl	.-12     	; 0x11c0 <__umoddi3+0x3ec>
    11cc:	84 01       	movw	r16, r8
    11ce:	73 01       	movw	r14, r6
    11d0:	e2 2a       	or	r14, r18
    11d2:	f3 2a       	or	r15, r19
    11d4:	04 2b       	or	r16, r20
    11d6:	15 2b       	or	r17, r21
    11d8:	ed a6       	std	Y+45, r14	; 0x2d
    11da:	fe a6       	std	Y+46, r15	; 0x2e
    11dc:	0f a7       	std	Y+47, r16	; 0x2f
    11de:	18 ab       	std	Y+48, r17	; 0x30
    11e0:	32 01       	movw	r6, r4
    11e2:	88 24       	eor	r8, r8
    11e4:	99 24       	eor	r9, r9
    11e6:	b2 01       	movw	r22, r4
    11e8:	a1 01       	movw	r20, r2
    11ea:	60 70       	andi	r22, 0x00	; 0
    11ec:	70 70       	andi	r23, 0x00	; 0
    11ee:	25 96       	adiw	r28, 0x05	; 5
    11f0:	4c af       	std	Y+60, r20	; 0x3c
    11f2:	5d af       	std	Y+61, r21	; 0x3d
    11f4:	6e af       	std	Y+62, r22	; 0x3e
    11f6:	7f af       	std	Y+63, r23	; 0x3f
    11f8:	25 97       	sbiw	r28, 0x05	; 5
    11fa:	c6 01       	movw	r24, r12
    11fc:	b5 01       	movw	r22, r10
    11fe:	a4 01       	movw	r20, r8
    1200:	93 01       	movw	r18, r6
    1202:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
    1206:	7b 01       	movw	r14, r22
    1208:	8c 01       	movw	r16, r24
    120a:	c6 01       	movw	r24, r12
    120c:	b5 01       	movw	r22, r10
    120e:	a4 01       	movw	r20, r8
    1210:	93 01       	movw	r18, r6
    1212:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
    1216:	ca 01       	movw	r24, r20
    1218:	b9 01       	movw	r22, r18
    121a:	25 96       	adiw	r28, 0x05	; 5
    121c:	2c ad       	ldd	r18, Y+60	; 0x3c
    121e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1220:	4e ad       	ldd	r20, Y+62	; 0x3e
    1222:	5f ad       	ldd	r21, Y+63	; 0x3f
    1224:	25 97       	sbiw	r28, 0x05	; 5
    1226:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
    122a:	9b 01       	movw	r18, r22
    122c:	ac 01       	movw	r20, r24
    122e:	87 01       	movw	r16, r14
    1230:	ff 24       	eor	r15, r15
    1232:	ee 24       	eor	r14, r14
    1234:	ad a4       	ldd	r10, Y+45	; 0x2d
    1236:	be a4       	ldd	r11, Y+46	; 0x2e
    1238:	cf a4       	ldd	r12, Y+47	; 0x2f
    123a:	d8 a8       	ldd	r13, Y+48	; 0x30
    123c:	c6 01       	movw	r24, r12
    123e:	aa 27       	eor	r26, r26
    1240:	bb 27       	eor	r27, r27
    1242:	5c 01       	movw	r10, r24
    1244:	6d 01       	movw	r12, r26
    1246:	ae 28       	or	r10, r14
    1248:	bf 28       	or	r11, r15
    124a:	c0 2a       	or	r12, r16
    124c:	d1 2a       	or	r13, r17
    124e:	a2 16       	cp	r10, r18
    1250:	b3 06       	cpc	r11, r19
    1252:	c4 06       	cpc	r12, r20
    1254:	d5 06       	cpc	r13, r21
    1256:	90 f4       	brcc	.+36     	; 0x127c <__umoddi3+0x4a8>
    1258:	a2 0c       	add	r10, r2
    125a:	b3 1c       	adc	r11, r3
    125c:	c4 1c       	adc	r12, r4
    125e:	d5 1c       	adc	r13, r5
    1260:	a2 14       	cp	r10, r2
    1262:	b3 04       	cpc	r11, r3
    1264:	c4 04       	cpc	r12, r4
    1266:	d5 04       	cpc	r13, r5
    1268:	48 f0       	brcs	.+18     	; 0x127c <__umoddi3+0x4a8>
    126a:	a2 16       	cp	r10, r18
    126c:	b3 06       	cpc	r11, r19
    126e:	c4 06       	cpc	r12, r20
    1270:	d5 06       	cpc	r13, r21
    1272:	20 f4       	brcc	.+8      	; 0x127c <__umoddi3+0x4a8>
    1274:	a2 0c       	add	r10, r2
    1276:	b3 1c       	adc	r11, r3
    1278:	c4 1c       	adc	r12, r4
    127a:	d5 1c       	adc	r13, r5
    127c:	a2 1a       	sub	r10, r18
    127e:	b3 0a       	sbc	r11, r19
    1280:	c4 0a       	sbc	r12, r20
    1282:	d5 0a       	sbc	r13, r21
    1284:	c6 01       	movw	r24, r12
    1286:	b5 01       	movw	r22, r10
    1288:	a4 01       	movw	r20, r8
    128a:	93 01       	movw	r18, r6
    128c:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
    1290:	7b 01       	movw	r14, r22
    1292:	8c 01       	movw	r16, r24
    1294:	c6 01       	movw	r24, r12
    1296:	b5 01       	movw	r22, r10
    1298:	a4 01       	movw	r20, r8
    129a:	93 01       	movw	r18, r6
    129c:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
    12a0:	ca 01       	movw	r24, r20
    12a2:	b9 01       	movw	r22, r18
    12a4:	25 96       	adiw	r28, 0x05	; 5
    12a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    12a8:	3d ad       	ldd	r19, Y+61	; 0x3d
    12aa:	4e ad       	ldd	r20, Y+62	; 0x3e
    12ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    12ae:	25 97       	sbiw	r28, 0x05	; 5
    12b0:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
    12b4:	9b 01       	movw	r18, r22
    12b6:	ac 01       	movw	r20, r24
    12b8:	87 01       	movw	r16, r14
    12ba:	ff 24       	eor	r15, r15
    12bc:	ee 24       	eor	r14, r14
    12be:	8d a5       	ldd	r24, Y+45	; 0x2d
    12c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    12c2:	af a5       	ldd	r26, Y+47	; 0x2f
    12c4:	b8 a9       	ldd	r27, Y+48	; 0x30
    12c6:	a0 70       	andi	r26, 0x00	; 0
    12c8:	b0 70       	andi	r27, 0x00	; 0
    12ca:	57 01       	movw	r10, r14
    12cc:	68 01       	movw	r12, r16
    12ce:	a8 2a       	or	r10, r24
    12d0:	b9 2a       	or	r11, r25
    12d2:	ca 2a       	or	r12, r26
    12d4:	db 2a       	or	r13, r27
    12d6:	a2 16       	cp	r10, r18
    12d8:	b3 06       	cpc	r11, r19
    12da:	c4 06       	cpc	r12, r20
    12dc:	d5 06       	cpc	r13, r21
    12de:	90 f4       	brcc	.+36     	; 0x1304 <__umoddi3+0x530>
    12e0:	a2 0c       	add	r10, r2
    12e2:	b3 1c       	adc	r11, r3
    12e4:	c4 1c       	adc	r12, r4
    12e6:	d5 1c       	adc	r13, r5
    12e8:	a2 14       	cp	r10, r2
    12ea:	b3 04       	cpc	r11, r3
    12ec:	c4 04       	cpc	r12, r4
    12ee:	d5 04       	cpc	r13, r5
    12f0:	48 f0       	brcs	.+18     	; 0x1304 <__umoddi3+0x530>
    12f2:	a2 16       	cp	r10, r18
    12f4:	b3 06       	cpc	r11, r19
    12f6:	c4 06       	cpc	r12, r20
    12f8:	d5 06       	cpc	r13, r21
    12fa:	20 f4       	brcc	.+8      	; 0x1304 <__umoddi3+0x530>
    12fc:	a2 0c       	add	r10, r2
    12fe:	b3 1c       	adc	r11, r3
    1300:	c4 1c       	adc	r12, r4
    1302:	d5 1c       	adc	r13, r5
    1304:	6c 96       	adiw	r28, 0x1c	; 28
    1306:	ec ac       	ldd	r14, Y+60	; 0x3c
    1308:	fd ac       	ldd	r15, Y+61	; 0x3d
    130a:	0e ad       	ldd	r16, Y+62	; 0x3e
    130c:	1f ad       	ldd	r17, Y+63	; 0x3f
    130e:	6c 97       	sbiw	r28, 0x1c	; 28
    1310:	68 96       	adiw	r28, 0x18	; 24
    1312:	0f ac       	ldd	r0, Y+63	; 0x3f
    1314:	68 97       	sbiw	r28, 0x18	; 24
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <__umoddi3+0x54c>
    1318:	ee 0c       	add	r14, r14
    131a:	ff 1c       	adc	r15, r15
    131c:	00 1f       	adc	r16, r16
    131e:	11 1f       	adc	r17, r17
    1320:	0a 94       	dec	r0
    1322:	d2 f7       	brpl	.-12     	; 0x1318 <__umoddi3+0x544>
    1324:	e9 aa       	std	Y+49, r14	; 0x31
    1326:	fa aa       	std	Y+50, r15	; 0x32
    1328:	0b ab       	std	Y+51, r16	; 0x33
    132a:	1c ab       	std	Y+52, r17	; 0x34
    132c:	a2 1a       	sub	r10, r18
    132e:	b3 0a       	sbc	r11, r19
    1330:	c4 0a       	sbc	r12, r20
    1332:	d5 0a       	sbc	r13, r21
    1334:	32 01       	movw	r6, r4
    1336:	88 24       	eor	r8, r8
    1338:	99 24       	eor	r9, r9
    133a:	b2 01       	movw	r22, r4
    133c:	a1 01       	movw	r20, r2
    133e:	60 70       	andi	r22, 0x00	; 0
    1340:	70 70       	andi	r23, 0x00	; 0
    1342:	29 96       	adiw	r28, 0x09	; 9
    1344:	4c af       	std	Y+60, r20	; 0x3c
    1346:	5d af       	std	Y+61, r21	; 0x3d
    1348:	6e af       	std	Y+62, r22	; 0x3e
    134a:	7f af       	std	Y+63, r23	; 0x3f
    134c:	29 97       	sbiw	r28, 0x09	; 9
    134e:	c6 01       	movw	r24, r12
    1350:	b5 01       	movw	r22, r10
    1352:	a4 01       	movw	r20, r8
    1354:	93 01       	movw	r18, r6
    1356:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
    135a:	7b 01       	movw	r14, r22
    135c:	8c 01       	movw	r16, r24
    135e:	c6 01       	movw	r24, r12
    1360:	b5 01       	movw	r22, r10
    1362:	a4 01       	movw	r20, r8
    1364:	93 01       	movw	r18, r6
    1366:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
    136a:	ca 01       	movw	r24, r20
    136c:	b9 01       	movw	r22, r18
    136e:	29 96       	adiw	r28, 0x09	; 9
    1370:	2c ad       	ldd	r18, Y+60	; 0x3c
    1372:	3d ad       	ldd	r19, Y+61	; 0x3d
    1374:	4e ad       	ldd	r20, Y+62	; 0x3e
    1376:	5f ad       	ldd	r21, Y+63	; 0x3f
    1378:	29 97       	sbiw	r28, 0x09	; 9
    137a:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
    137e:	9b 01       	movw	r18, r22
    1380:	ac 01       	movw	r20, r24
    1382:	87 01       	movw	r16, r14
    1384:	ff 24       	eor	r15, r15
    1386:	ee 24       	eor	r14, r14
    1388:	a9 a8       	ldd	r10, Y+49	; 0x31
    138a:	ba a8       	ldd	r11, Y+50	; 0x32
    138c:	cb a8       	ldd	r12, Y+51	; 0x33
    138e:	dc a8       	ldd	r13, Y+52	; 0x34
    1390:	c6 01       	movw	r24, r12
    1392:	aa 27       	eor	r26, r26
    1394:	bb 27       	eor	r27, r27
    1396:	57 01       	movw	r10, r14
    1398:	68 01       	movw	r12, r16
    139a:	a8 2a       	or	r10, r24
    139c:	b9 2a       	or	r11, r25
    139e:	ca 2a       	or	r12, r26
    13a0:	db 2a       	or	r13, r27
    13a2:	a2 16       	cp	r10, r18
    13a4:	b3 06       	cpc	r11, r19
    13a6:	c4 06       	cpc	r12, r20
    13a8:	d5 06       	cpc	r13, r21
    13aa:	90 f4       	brcc	.+36     	; 0x13d0 <__umoddi3+0x5fc>
    13ac:	a2 0c       	add	r10, r2
    13ae:	b3 1c       	adc	r11, r3
    13b0:	c4 1c       	adc	r12, r4
    13b2:	d5 1c       	adc	r13, r5
    13b4:	a2 14       	cp	r10, r2
    13b6:	b3 04       	cpc	r11, r3
    13b8:	c4 04       	cpc	r12, r4
    13ba:	d5 04       	cpc	r13, r5
    13bc:	48 f0       	brcs	.+18     	; 0x13d0 <__umoddi3+0x5fc>
    13be:	a2 16       	cp	r10, r18
    13c0:	b3 06       	cpc	r11, r19
    13c2:	c4 06       	cpc	r12, r20
    13c4:	d5 06       	cpc	r13, r21
    13c6:	20 f4       	brcc	.+8      	; 0x13d0 <__umoddi3+0x5fc>
    13c8:	a2 0c       	add	r10, r2
    13ca:	b3 1c       	adc	r11, r3
    13cc:	c4 1c       	adc	r12, r4
    13ce:	d5 1c       	adc	r13, r5
    13d0:	a2 1a       	sub	r10, r18
    13d2:	b3 0a       	sbc	r11, r19
    13d4:	c4 0a       	sbc	r12, r20
    13d6:	d5 0a       	sbc	r13, r21
    13d8:	c6 01       	movw	r24, r12
    13da:	b5 01       	movw	r22, r10
    13dc:	a4 01       	movw	r20, r8
    13de:	93 01       	movw	r18, r6
    13e0:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
    13e4:	7b 01       	movw	r14, r22
    13e6:	8c 01       	movw	r16, r24
    13e8:	c6 01       	movw	r24, r12
    13ea:	b5 01       	movw	r22, r10
    13ec:	a4 01       	movw	r20, r8
    13ee:	93 01       	movw	r18, r6
    13f0:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
    13f4:	ca 01       	movw	r24, r20
    13f6:	b9 01       	movw	r22, r18
    13f8:	29 96       	adiw	r28, 0x09	; 9
    13fa:	2c ad       	ldd	r18, Y+60	; 0x3c
    13fc:	3d ad       	ldd	r19, Y+61	; 0x3d
    13fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1400:	5f ad       	ldd	r21, Y+63	; 0x3f
    1402:	29 97       	sbiw	r28, 0x09	; 9
    1404:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
    1408:	9b 01       	movw	r18, r22
    140a:	ac 01       	movw	r20, r24
    140c:	87 01       	movw	r16, r14
    140e:	ff 24       	eor	r15, r15
    1410:	ee 24       	eor	r14, r14
    1412:	89 a9       	ldd	r24, Y+49	; 0x31
    1414:	9a a9       	ldd	r25, Y+50	; 0x32
    1416:	ab a9       	ldd	r26, Y+51	; 0x33
    1418:	bc a9       	ldd	r27, Y+52	; 0x34
    141a:	a0 70       	andi	r26, 0x00	; 0
    141c:	b0 70       	andi	r27, 0x00	; 0
    141e:	e8 2a       	or	r14, r24
    1420:	f9 2a       	or	r15, r25
    1422:	0a 2b       	or	r16, r26
    1424:	1b 2b       	or	r17, r27
    1426:	e2 16       	cp	r14, r18
    1428:	f3 06       	cpc	r15, r19
    142a:	04 07       	cpc	r16, r20
    142c:	15 07       	cpc	r17, r21
    142e:	90 f4       	brcc	.+36     	; 0x1454 <__umoddi3+0x680>
    1430:	e2 0c       	add	r14, r2
    1432:	f3 1c       	adc	r15, r3
    1434:	04 1d       	adc	r16, r4
    1436:	15 1d       	adc	r17, r5
    1438:	e2 14       	cp	r14, r2
    143a:	f3 04       	cpc	r15, r3
    143c:	04 05       	cpc	r16, r4
    143e:	15 05       	cpc	r17, r5
    1440:	48 f0       	brcs	.+18     	; 0x1454 <__umoddi3+0x680>
    1442:	e2 16       	cp	r14, r18
    1444:	f3 06       	cpc	r15, r19
    1446:	04 07       	cpc	r16, r20
    1448:	15 07       	cpc	r17, r21
    144a:	20 f4       	brcc	.+8      	; 0x1454 <__umoddi3+0x680>
    144c:	e2 0c       	add	r14, r2
    144e:	f3 1c       	adc	r15, r3
    1450:	04 1d       	adc	r16, r4
    1452:	15 1d       	adc	r17, r5
    1454:	e2 1a       	sub	r14, r18
    1456:	f3 0a       	sbc	r15, r19
    1458:	04 0b       	sbc	r16, r20
    145a:	15 0b       	sbc	r17, r21
    145c:	d8 01       	movw	r26, r16
    145e:	c7 01       	movw	r24, r14
    1460:	09 ac       	ldd	r0, Y+57	; 0x39
    1462:	04 c0       	rjmp	.+8      	; 0x146c <__umoddi3+0x698>
    1464:	b6 95       	lsr	r27
    1466:	a7 95       	ror	r26
    1468:	97 95       	ror	r25
    146a:	87 95       	ror	r24
    146c:	0a 94       	dec	r0
    146e:	d2 f7       	brpl	.-12     	; 0x1464 <__umoddi3+0x690>
    1470:	89 8b       	std	Y+17, r24	; 0x11
    1472:	9a 8b       	std	Y+18, r25	; 0x12
    1474:	ab 8b       	std	Y+19, r26	; 0x13
    1476:	bc 8b       	std	Y+20, r27	; 0x14
    1478:	1d 8a       	std	Y+21, r1	; 0x15
    147a:	1e 8a       	std	Y+22, r1	; 0x16
    147c:	1f 8a       	std	Y+23, r1	; 0x17
    147e:	18 8e       	std	Y+24, r1	; 0x18
    1480:	28 2f       	mov	r18, r24
    1482:	3a 89       	ldd	r19, Y+18	; 0x12
    1484:	4b 89       	ldd	r20, Y+19	; 0x13
    1486:	5c 89       	ldd	r21, Y+20	; 0x14
    1488:	6d 89       	ldd	r22, Y+21	; 0x15
    148a:	0c c3       	rjmp	.+1560   	; 0x1aa4 <__umoddi3+0xcd0>
    148c:	6a 14       	cp	r6, r10
    148e:	7b 04       	cpc	r7, r11
    1490:	8c 04       	cpc	r8, r12
    1492:	9d 04       	cpc	r9, r13
    1494:	08 f4       	brcc	.+2      	; 0x1498 <__umoddi3+0x6c4>
    1496:	09 c3       	rjmp	.+1554   	; 0x1aaa <__umoddi3+0xcd6>
    1498:	00 e0       	ldi	r16, 0x00	; 0
    149a:	a0 16       	cp	r10, r16
    149c:	00 e0       	ldi	r16, 0x00	; 0
    149e:	b0 06       	cpc	r11, r16
    14a0:	01 e0       	ldi	r16, 0x01	; 1
    14a2:	c0 06       	cpc	r12, r16
    14a4:	00 e0       	ldi	r16, 0x00	; 0
    14a6:	d0 06       	cpc	r13, r16
    14a8:	88 f4       	brcc	.+34     	; 0x14cc <__umoddi3+0x6f8>
    14aa:	1f ef       	ldi	r17, 0xFF	; 255
    14ac:	a1 16       	cp	r10, r17
    14ae:	b1 04       	cpc	r11, r1
    14b0:	c1 04       	cpc	r12, r1
    14b2:	d1 04       	cpc	r13, r1
    14b4:	39 f0       	breq	.+14     	; 0x14c4 <__umoddi3+0x6f0>
    14b6:	30 f0       	brcs	.+12     	; 0x14c4 <__umoddi3+0x6f0>
    14b8:	28 e0       	ldi	r18, 0x08	; 8
    14ba:	e2 2e       	mov	r14, r18
    14bc:	f1 2c       	mov	r15, r1
    14be:	01 2d       	mov	r16, r1
    14c0:	11 2d       	mov	r17, r1
    14c2:	18 c0       	rjmp	.+48     	; 0x14f4 <__umoddi3+0x720>
    14c4:	ee 24       	eor	r14, r14
    14c6:	ff 24       	eor	r15, r15
    14c8:	87 01       	movw	r16, r14
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <__umoddi3+0x720>
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	a4 16       	cp	r10, r20
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	b4 06       	cpc	r11, r20
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	c4 06       	cpc	r12, r20
    14d8:	41 e0       	ldi	r20, 0x01	; 1
    14da:	d4 06       	cpc	r13, r20
    14dc:	30 f0       	brcs	.+12     	; 0x14ea <__umoddi3+0x716>
    14de:	98 e1       	ldi	r25, 0x18	; 24
    14e0:	e9 2e       	mov	r14, r25
    14e2:	f1 2c       	mov	r15, r1
    14e4:	01 2d       	mov	r16, r1
    14e6:	11 2d       	mov	r17, r1
    14e8:	05 c0       	rjmp	.+10     	; 0x14f4 <__umoddi3+0x720>
    14ea:	80 e1       	ldi	r24, 0x10	; 16
    14ec:	e8 2e       	mov	r14, r24
    14ee:	f1 2c       	mov	r15, r1
    14f0:	01 2d       	mov	r16, r1
    14f2:	11 2d       	mov	r17, r1
    14f4:	d6 01       	movw	r26, r12
    14f6:	c5 01       	movw	r24, r10
    14f8:	0e 2c       	mov	r0, r14
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <__umoddi3+0x730>
    14fc:	b6 95       	lsr	r27
    14fe:	a7 95       	ror	r26
    1500:	97 95       	ror	r25
    1502:	87 95       	ror	r24
    1504:	0a 94       	dec	r0
    1506:	d2 f7       	brpl	.-12     	; 0x14fc <__umoddi3+0x728>
    1508:	89 57       	subi	r24, 0x79	; 121
    150a:	9f 4f       	sbci	r25, 0xFF	; 255
    150c:	dc 01       	movw	r26, r24
    150e:	2c 91       	ld	r18, X
    1510:	80 e2       	ldi	r24, 0x20	; 32
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a0 e0       	ldi	r26, 0x00	; 0
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	8e 19       	sub	r24, r14
    151a:	9f 09       	sbc	r25, r15
    151c:	a0 0b       	sbc	r26, r16
    151e:	b1 0b       	sbc	r27, r17
    1520:	82 1b       	sub	r24, r18
    1522:	91 09       	sbc	r25, r1
    1524:	a1 09       	sbc	r26, r1
    1526:	b1 09       	sbc	r27, r1
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	a1 05       	cpc	r26, r1
    152c:	b1 05       	cpc	r27, r1
    152e:	09 f0       	breq	.+2      	; 0x1532 <__umoddi3+0x75e>
    1530:	4f c0       	rjmp	.+158    	; 0x15d0 <__umoddi3+0x7fc>
    1532:	a6 14       	cp	r10, r6
    1534:	b7 04       	cpc	r11, r7
    1536:	c8 04       	cpc	r12, r8
    1538:	d9 04       	cpc	r13, r9
    153a:	58 f0       	brcs	.+22     	; 0x1552 <__umoddi3+0x77e>
    153c:	6c 96       	adiw	r28, 0x1c	; 28
    153e:	ec ac       	ldd	r14, Y+60	; 0x3c
    1540:	fd ac       	ldd	r15, Y+61	; 0x3d
    1542:	0e ad       	ldd	r16, Y+62	; 0x3e
    1544:	1f ad       	ldd	r17, Y+63	; 0x3f
    1546:	6c 97       	sbiw	r28, 0x1c	; 28
    1548:	e2 14       	cp	r14, r2
    154a:	f3 04       	cpc	r15, r3
    154c:	04 05       	cpc	r16, r4
    154e:	15 05       	cpc	r17, r5
    1550:	68 f1       	brcs	.+90     	; 0x15ac <__umoddi3+0x7d8>
    1552:	6c 96       	adiw	r28, 0x1c	; 28
    1554:	ec ac       	ldd	r14, Y+60	; 0x3c
    1556:	fd ac       	ldd	r15, Y+61	; 0x3d
    1558:	0e ad       	ldd	r16, Y+62	; 0x3e
    155a:	1f ad       	ldd	r17, Y+63	; 0x3f
    155c:	6c 97       	sbiw	r28, 0x1c	; 28
    155e:	e2 18       	sub	r14, r2
    1560:	f3 08       	sbc	r15, r3
    1562:	04 09       	sbc	r16, r4
    1564:	15 09       	sbc	r17, r5
    1566:	a4 01       	movw	r20, r8
    1568:	93 01       	movw	r18, r6
    156a:	2a 19       	sub	r18, r10
    156c:	3b 09       	sbc	r19, r11
    156e:	4c 09       	sbc	r20, r12
    1570:	5d 09       	sbc	r21, r13
    1572:	aa 24       	eor	r10, r10
    1574:	bb 24       	eor	r11, r11
    1576:	65 01       	movw	r12, r10
    1578:	6c 96       	adiw	r28, 0x1c	; 28
    157a:	6c ad       	ldd	r22, Y+60	; 0x3c
    157c:	7d ad       	ldd	r23, Y+61	; 0x3d
    157e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1580:	9f ad       	ldd	r25, Y+63	; 0x3f
    1582:	6c 97       	sbiw	r28, 0x1c	; 28
    1584:	6e 15       	cp	r22, r14
    1586:	7f 05       	cpc	r23, r15
    1588:	80 07       	cpc	r24, r16
    158a:	91 07       	cpc	r25, r17
    158c:	28 f4       	brcc	.+10     	; 0x1598 <__umoddi3+0x7c4>
    158e:	b1 e0       	ldi	r27, 0x01	; 1
    1590:	ab 2e       	mov	r10, r27
    1592:	b1 2c       	mov	r11, r1
    1594:	c1 2c       	mov	r12, r1
    1596:	d1 2c       	mov	r13, r1
    1598:	da 01       	movw	r26, r20
    159a:	c9 01       	movw	r24, r18
    159c:	8a 19       	sub	r24, r10
    159e:	9b 09       	sbc	r25, r11
    15a0:	ac 09       	sbc	r26, r12
    15a2:	bd 09       	sbc	r27, r13
    15a4:	8d ab       	std	Y+53, r24	; 0x35
    15a6:	9e ab       	std	Y+54, r25	; 0x36
    15a8:	af ab       	std	Y+55, r26	; 0x37
    15aa:	b8 af       	std	Y+56, r27	; 0x38
    15ac:	e9 8a       	std	Y+17, r14	; 0x11
    15ae:	fa 8a       	std	Y+18, r15	; 0x12
    15b0:	0b 8b       	std	Y+19, r16	; 0x13
    15b2:	1c 8b       	std	Y+20, r17	; 0x14
    15b4:	6d a8       	ldd	r6, Y+53	; 0x35
    15b6:	7e a8       	ldd	r7, Y+54	; 0x36
    15b8:	8f a8       	ldd	r8, Y+55	; 0x37
    15ba:	98 ac       	ldd	r9, Y+56	; 0x38
    15bc:	6d 8a       	std	Y+21, r6	; 0x15
    15be:	7e 8a       	std	Y+22, r7	; 0x16
    15c0:	8f 8a       	std	Y+23, r8	; 0x17
    15c2:	98 8e       	std	Y+24, r9	; 0x18
    15c4:	2e 2d       	mov	r18, r14
    15c6:	3a 89       	ldd	r19, Y+18	; 0x12
    15c8:	4b 89       	ldd	r20, Y+19	; 0x13
    15ca:	5c 89       	ldd	r21, Y+20	; 0x14
    15cc:	6d a9       	ldd	r22, Y+53	; 0x35
    15ce:	6a c2       	rjmp	.+1236   	; 0x1aa4 <__umoddi3+0xcd0>
    15d0:	67 96       	adiw	r28, 0x17	; 23
    15d2:	8f af       	std	Y+63, r24	; 0x3f
    15d4:	67 97       	sbiw	r28, 0x17	; 23
    15d6:	a6 01       	movw	r20, r12
    15d8:	95 01       	movw	r18, r10
    15da:	08 2e       	mov	r0, r24
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <__umoddi3+0x812>
    15de:	22 0f       	add	r18, r18
    15e0:	33 1f       	adc	r19, r19
    15e2:	44 1f       	adc	r20, r20
    15e4:	55 1f       	adc	r21, r21
    15e6:	0a 94       	dec	r0
    15e8:	d2 f7       	brpl	.-12     	; 0x15de <__umoddi3+0x80a>
    15ea:	a0 e2       	ldi	r26, 0x20	; 32
    15ec:	aa 2e       	mov	r10, r26
    15ee:	a8 1a       	sub	r10, r24
    15f0:	66 96       	adiw	r28, 0x16	; 22
    15f2:	af ae       	std	Y+63, r10	; 0x3f
    15f4:	66 97       	sbiw	r28, 0x16	; 22
    15f6:	d2 01       	movw	r26, r4
    15f8:	c1 01       	movw	r24, r2
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <__umoddi3+0x830>
    15fc:	b6 95       	lsr	r27
    15fe:	a7 95       	ror	r26
    1600:	97 95       	ror	r25
    1602:	87 95       	ror	r24
    1604:	aa 94       	dec	r10
    1606:	d2 f7       	brpl	.-12     	; 0x15fc <__umoddi3+0x828>
    1608:	6c 01       	movw	r12, r24
    160a:	7d 01       	movw	r14, r26
    160c:	c2 2a       	or	r12, r18
    160e:	d3 2a       	or	r13, r19
    1610:	e4 2a       	or	r14, r20
    1612:	f5 2a       	or	r15, r21
    1614:	c9 a6       	std	Y+41, r12	; 0x29
    1616:	da a6       	std	Y+42, r13	; 0x2a
    1618:	eb a6       	std	Y+43, r14	; 0x2b
    161a:	fc a6       	std	Y+44, r15	; 0x2c
    161c:	82 01       	movw	r16, r4
    161e:	71 01       	movw	r14, r2
    1620:	67 96       	adiw	r28, 0x17	; 23
    1622:	0f ac       	ldd	r0, Y+63	; 0x3f
    1624:	67 97       	sbiw	r28, 0x17	; 23
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <__umoddi3+0x85c>
    1628:	ee 0c       	add	r14, r14
    162a:	ff 1c       	adc	r15, r15
    162c:	00 1f       	adc	r16, r16
    162e:	11 1f       	adc	r17, r17
    1630:	0a 94       	dec	r0
    1632:	d2 f7       	brpl	.-12     	; 0x1628 <__umoddi3+0x854>
    1634:	ed a2       	std	Y+37, r14	; 0x25
    1636:	fe a2       	std	Y+38, r15	; 0x26
    1638:	0f a3       	std	Y+39, r16	; 0x27
    163a:	18 a7       	std	Y+40, r17	; 0x28
    163c:	64 01       	movw	r12, r8
    163e:	53 01       	movw	r10, r6
    1640:	66 96       	adiw	r28, 0x16	; 22
    1642:	0f ac       	ldd	r0, Y+63	; 0x3f
    1644:	66 97       	sbiw	r28, 0x16	; 22
    1646:	04 c0       	rjmp	.+8      	; 0x1650 <__umoddi3+0x87c>
    1648:	d6 94       	lsr	r13
    164a:	c7 94       	ror	r12
    164c:	b7 94       	ror	r11
    164e:	a7 94       	ror	r10
    1650:	0a 94       	dec	r0
    1652:	d2 f7       	brpl	.-12     	; 0x1648 <__umoddi3+0x874>
    1654:	a4 01       	movw	r20, r8
    1656:	93 01       	movw	r18, r6
    1658:	67 96       	adiw	r28, 0x17	; 23
    165a:	0f ac       	ldd	r0, Y+63	; 0x3f
    165c:	67 97       	sbiw	r28, 0x17	; 23
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <__umoddi3+0x894>
    1660:	22 0f       	add	r18, r18
    1662:	33 1f       	adc	r19, r19
    1664:	44 1f       	adc	r20, r20
    1666:	55 1f       	adc	r21, r21
    1668:	0a 94       	dec	r0
    166a:	d2 f7       	brpl	.-12     	; 0x1660 <__umoddi3+0x88c>
    166c:	6c 96       	adiw	r28, 0x1c	; 28
    166e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1670:	9d ad       	ldd	r25, Y+61	; 0x3d
    1672:	ae ad       	ldd	r26, Y+62	; 0x3e
    1674:	bf ad       	ldd	r27, Y+63	; 0x3f
    1676:	6c 97       	sbiw	r28, 0x1c	; 28
    1678:	66 96       	adiw	r28, 0x16	; 22
    167a:	0f ac       	ldd	r0, Y+63	; 0x3f
    167c:	66 97       	sbiw	r28, 0x16	; 22
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <__umoddi3+0x8b4>
    1680:	b6 95       	lsr	r27
    1682:	a7 95       	ror	r26
    1684:	97 95       	ror	r25
    1686:	87 95       	ror	r24
    1688:	0a 94       	dec	r0
    168a:	d2 f7       	brpl	.-12     	; 0x1680 <__umoddi3+0x8ac>
    168c:	3c 01       	movw	r6, r24
    168e:	4d 01       	movw	r8, r26
    1690:	62 2a       	or	r6, r18
    1692:	73 2a       	or	r7, r19
    1694:	84 2a       	or	r8, r20
    1696:	95 2a       	or	r9, r21
    1698:	69 a2       	std	Y+33, r6	; 0x21
    169a:	7a a2       	std	Y+34, r7	; 0x22
    169c:	8b a2       	std	Y+35, r8	; 0x23
    169e:	9c a2       	std	Y+36, r9	; 0x24
    16a0:	6c 96       	adiw	r28, 0x1c	; 28
    16a2:	ec ac       	ldd	r14, Y+60	; 0x3c
    16a4:	fd ac       	ldd	r15, Y+61	; 0x3d
    16a6:	0e ad       	ldd	r16, Y+62	; 0x3e
    16a8:	1f ad       	ldd	r17, Y+63	; 0x3f
    16aa:	6c 97       	sbiw	r28, 0x1c	; 28
    16ac:	67 96       	adiw	r28, 0x17	; 23
    16ae:	0f ac       	ldd	r0, Y+63	; 0x3f
    16b0:	67 97       	sbiw	r28, 0x17	; 23
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <__umoddi3+0x8e8>
    16b4:	ee 0c       	add	r14, r14
    16b6:	ff 1c       	adc	r15, r15
    16b8:	00 1f       	adc	r16, r16
    16ba:	11 1f       	adc	r17, r17
    16bc:	0a 94       	dec	r0
    16be:	d2 f7       	brpl	.-12     	; 0x16b4 <__umoddi3+0x8e0>
    16c0:	ed 8e       	std	Y+29, r14	; 0x1d
    16c2:	fe 8e       	std	Y+30, r15	; 0x1e
    16c4:	0f 8f       	std	Y+31, r16	; 0x1f
    16c6:	18 a3       	std	Y+32, r17	; 0x20
    16c8:	49 a5       	ldd	r20, Y+41	; 0x29
    16ca:	5a a5       	ldd	r21, Y+42	; 0x2a
    16cc:	6b a5       	ldd	r22, Y+43	; 0x2b
    16ce:	7c a5       	ldd	r23, Y+44	; 0x2c
    16d0:	3b 01       	movw	r6, r22
    16d2:	88 24       	eor	r8, r8
    16d4:	99 24       	eor	r9, r9
    16d6:	60 70       	andi	r22, 0x00	; 0
    16d8:	70 70       	andi	r23, 0x00	; 0
    16da:	2d 96       	adiw	r28, 0x0d	; 13
    16dc:	4c af       	std	Y+60, r20	; 0x3c
    16de:	5d af       	std	Y+61, r21	; 0x3d
    16e0:	6e af       	std	Y+62, r22	; 0x3e
    16e2:	7f af       	std	Y+63, r23	; 0x3f
    16e4:	2d 97       	sbiw	r28, 0x0d	; 13
    16e6:	c6 01       	movw	r24, r12
    16e8:	b5 01       	movw	r22, r10
    16ea:	a4 01       	movw	r20, r8
    16ec:	93 01       	movw	r18, r6
    16ee:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
    16f2:	7b 01       	movw	r14, r22
    16f4:	8c 01       	movw	r16, r24
    16f6:	c6 01       	movw	r24, r12
    16f8:	b5 01       	movw	r22, r10
    16fa:	a4 01       	movw	r20, r8
    16fc:	93 01       	movw	r18, r6
    16fe:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
    1702:	c9 01       	movw	r24, r18
    1704:	da 01       	movw	r26, r20
    1706:	1c 01       	movw	r2, r24
    1708:	2d 01       	movw	r4, r26
    170a:	c2 01       	movw	r24, r4
    170c:	b1 01       	movw	r22, r2
    170e:	2d 96       	adiw	r28, 0x0d	; 13
    1710:	2c ad       	ldd	r18, Y+60	; 0x3c
    1712:	3d ad       	ldd	r19, Y+61	; 0x3d
    1714:	4e ad       	ldd	r20, Y+62	; 0x3e
    1716:	5f ad       	ldd	r21, Y+63	; 0x3f
    1718:	2d 97       	sbiw	r28, 0x0d	; 13
    171a:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
    171e:	9b 01       	movw	r18, r22
    1720:	ac 01       	movw	r20, r24
    1722:	87 01       	movw	r16, r14
    1724:	ff 24       	eor	r15, r15
    1726:	ee 24       	eor	r14, r14
    1728:	a9 a0       	ldd	r10, Y+33	; 0x21
    172a:	ba a0       	ldd	r11, Y+34	; 0x22
    172c:	cb a0       	ldd	r12, Y+35	; 0x23
    172e:	dc a0       	ldd	r13, Y+36	; 0x24
    1730:	c6 01       	movw	r24, r12
    1732:	aa 27       	eor	r26, r26
    1734:	bb 27       	eor	r27, r27
    1736:	57 01       	movw	r10, r14
    1738:	68 01       	movw	r12, r16
    173a:	a8 2a       	or	r10, r24
    173c:	b9 2a       	or	r11, r25
    173e:	ca 2a       	or	r12, r26
    1740:	db 2a       	or	r13, r27
    1742:	a2 16       	cp	r10, r18
    1744:	b3 06       	cpc	r11, r19
    1746:	c4 06       	cpc	r12, r20
    1748:	d5 06       	cpc	r13, r21
    174a:	00 f5       	brcc	.+64     	; 0x178c <__umoddi3+0x9b8>
    174c:	08 94       	sec
    174e:	21 08       	sbc	r2, r1
    1750:	31 08       	sbc	r3, r1
    1752:	41 08       	sbc	r4, r1
    1754:	51 08       	sbc	r5, r1
    1756:	e9 a4       	ldd	r14, Y+41	; 0x29
    1758:	fa a4       	ldd	r15, Y+42	; 0x2a
    175a:	0b a5       	ldd	r16, Y+43	; 0x2b
    175c:	1c a5       	ldd	r17, Y+44	; 0x2c
    175e:	ae 0c       	add	r10, r14
    1760:	bf 1c       	adc	r11, r15
    1762:	c0 1e       	adc	r12, r16
    1764:	d1 1e       	adc	r13, r17
    1766:	ae 14       	cp	r10, r14
    1768:	bf 04       	cpc	r11, r15
    176a:	c0 06       	cpc	r12, r16
    176c:	d1 06       	cpc	r13, r17
    176e:	70 f0       	brcs	.+28     	; 0x178c <__umoddi3+0x9b8>
    1770:	a2 16       	cp	r10, r18
    1772:	b3 06       	cpc	r11, r19
    1774:	c4 06       	cpc	r12, r20
    1776:	d5 06       	cpc	r13, r21
    1778:	48 f4       	brcc	.+18     	; 0x178c <__umoddi3+0x9b8>
    177a:	08 94       	sec
    177c:	21 08       	sbc	r2, r1
    177e:	31 08       	sbc	r3, r1
    1780:	41 08       	sbc	r4, r1
    1782:	51 08       	sbc	r5, r1
    1784:	ae 0c       	add	r10, r14
    1786:	bf 1c       	adc	r11, r15
    1788:	c0 1e       	adc	r12, r16
    178a:	d1 1e       	adc	r13, r17
    178c:	a2 1a       	sub	r10, r18
    178e:	b3 0a       	sbc	r11, r19
    1790:	c4 0a       	sbc	r12, r20
    1792:	d5 0a       	sbc	r13, r21
    1794:	c6 01       	movw	r24, r12
    1796:	b5 01       	movw	r22, r10
    1798:	a4 01       	movw	r20, r8
    179a:	93 01       	movw	r18, r6
    179c:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
    17a0:	7b 01       	movw	r14, r22
    17a2:	8c 01       	movw	r16, r24
    17a4:	c6 01       	movw	r24, r12
    17a6:	b5 01       	movw	r22, r10
    17a8:	a4 01       	movw	r20, r8
    17aa:	93 01       	movw	r18, r6
    17ac:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
    17b0:	c9 01       	movw	r24, r18
    17b2:	da 01       	movw	r26, r20
    17b4:	3c 01       	movw	r6, r24
    17b6:	4d 01       	movw	r8, r26
    17b8:	c4 01       	movw	r24, r8
    17ba:	b3 01       	movw	r22, r6
    17bc:	2d 96       	adiw	r28, 0x0d	; 13
    17be:	2c ad       	ldd	r18, Y+60	; 0x3c
    17c0:	3d ad       	ldd	r19, Y+61	; 0x3d
    17c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    17c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    17c6:	2d 97       	sbiw	r28, 0x0d	; 13
    17c8:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
    17cc:	9b 01       	movw	r18, r22
    17ce:	ac 01       	movw	r20, r24
    17d0:	87 01       	movw	r16, r14
    17d2:	ff 24       	eor	r15, r15
    17d4:	ee 24       	eor	r14, r14
    17d6:	89 a1       	ldd	r24, Y+33	; 0x21
    17d8:	9a a1       	ldd	r25, Y+34	; 0x22
    17da:	ab a1       	ldd	r26, Y+35	; 0x23
    17dc:	bc a1       	ldd	r27, Y+36	; 0x24
    17de:	a0 70       	andi	r26, 0x00	; 0
    17e0:	b0 70       	andi	r27, 0x00	; 0
    17e2:	57 01       	movw	r10, r14
    17e4:	68 01       	movw	r12, r16
    17e6:	a8 2a       	or	r10, r24
    17e8:	b9 2a       	or	r11, r25
    17ea:	ca 2a       	or	r12, r26
    17ec:	db 2a       	or	r13, r27
    17ee:	a2 16       	cp	r10, r18
    17f0:	b3 06       	cpc	r11, r19
    17f2:	c4 06       	cpc	r12, r20
    17f4:	d5 06       	cpc	r13, r21
    17f6:	00 f5       	brcc	.+64     	; 0x1838 <__umoddi3+0xa64>
    17f8:	08 94       	sec
    17fa:	61 08       	sbc	r6, r1
    17fc:	71 08       	sbc	r7, r1
    17fe:	81 08       	sbc	r8, r1
    1800:	91 08       	sbc	r9, r1
    1802:	69 a5       	ldd	r22, Y+41	; 0x29
    1804:	7a a5       	ldd	r23, Y+42	; 0x2a
    1806:	8b a5       	ldd	r24, Y+43	; 0x2b
    1808:	9c a5       	ldd	r25, Y+44	; 0x2c
    180a:	a6 0e       	add	r10, r22
    180c:	b7 1e       	adc	r11, r23
    180e:	c8 1e       	adc	r12, r24
    1810:	d9 1e       	adc	r13, r25
    1812:	a6 16       	cp	r10, r22
    1814:	b7 06       	cpc	r11, r23
    1816:	c8 06       	cpc	r12, r24
    1818:	d9 06       	cpc	r13, r25
    181a:	70 f0       	brcs	.+28     	; 0x1838 <__umoddi3+0xa64>
    181c:	a2 16       	cp	r10, r18
    181e:	b3 06       	cpc	r11, r19
    1820:	c4 06       	cpc	r12, r20
    1822:	d5 06       	cpc	r13, r21
    1824:	48 f4       	brcc	.+18     	; 0x1838 <__umoddi3+0xa64>
    1826:	08 94       	sec
    1828:	61 08       	sbc	r6, r1
    182a:	71 08       	sbc	r7, r1
    182c:	81 08       	sbc	r8, r1
    182e:	91 08       	sbc	r9, r1
    1830:	a6 0e       	add	r10, r22
    1832:	b7 1e       	adc	r11, r23
    1834:	c8 1e       	adc	r12, r24
    1836:	d9 1e       	adc	r13, r25
    1838:	d6 01       	movw	r26, r12
    183a:	c5 01       	movw	r24, r10
    183c:	82 1b       	sub	r24, r18
    183e:	93 0b       	sbc	r25, r19
    1840:	a4 0b       	sbc	r26, r20
    1842:	b5 0b       	sbc	r27, r21
    1844:	89 8f       	std	Y+25, r24	; 0x19
    1846:	9a 8f       	std	Y+26, r25	; 0x1a
    1848:	ab 8f       	std	Y+27, r26	; 0x1b
    184a:	bc 8f       	std	Y+28, r27	; 0x1c
    184c:	d1 01       	movw	r26, r2
    184e:	99 27       	eor	r25, r25
    1850:	88 27       	eor	r24, r24
    1852:	84 01       	movw	r16, r8
    1854:	73 01       	movw	r14, r6
    1856:	e8 2a       	or	r14, r24
    1858:	f9 2a       	or	r15, r25
    185a:	0a 2b       	or	r16, r26
    185c:	1b 2b       	or	r17, r27
    185e:	4f ef       	ldi	r20, 0xFF	; 255
    1860:	a4 2e       	mov	r10, r20
    1862:	4f ef       	ldi	r20, 0xFF	; 255
    1864:	b4 2e       	mov	r11, r20
    1866:	c1 2c       	mov	r12, r1
    1868:	d1 2c       	mov	r13, r1
    186a:	ae 20       	and	r10, r14
    186c:	bf 20       	and	r11, r15
    186e:	c0 22       	and	r12, r16
    1870:	d1 22       	and	r13, r17
    1872:	78 01       	movw	r14, r16
    1874:	00 27       	eor	r16, r16
    1876:	11 27       	eor	r17, r17
    1878:	6d a0       	ldd	r6, Y+37	; 0x25
    187a:	7e a0       	ldd	r7, Y+38	; 0x26
    187c:	8f a0       	ldd	r8, Y+39	; 0x27
    187e:	98 a4       	ldd	r9, Y+40	; 0x28
    1880:	4f ef       	ldi	r20, 0xFF	; 255
    1882:	5f ef       	ldi	r21, 0xFF	; 255
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	64 22       	and	r6, r20
    188a:	75 22       	and	r7, r21
    188c:	86 22       	and	r8, r22
    188e:	97 22       	and	r9, r23
    1890:	8d a1       	ldd	r24, Y+37	; 0x25
    1892:	9e a1       	ldd	r25, Y+38	; 0x26
    1894:	af a1       	ldd	r26, Y+39	; 0x27
    1896:	b8 a5       	ldd	r27, Y+40	; 0x28
    1898:	bd 01       	movw	r22, r26
    189a:	88 27       	eor	r24, r24
    189c:	99 27       	eor	r25, r25
    189e:	65 96       	adiw	r28, 0x15	; 21
    18a0:	6c af       	std	Y+60, r22	; 0x3c
    18a2:	7d af       	std	Y+61, r23	; 0x3d
    18a4:	8e af       	std	Y+62, r24	; 0x3e
    18a6:	9f af       	std	Y+63, r25	; 0x3f
    18a8:	65 97       	sbiw	r28, 0x15	; 21
    18aa:	c6 01       	movw	r24, r12
    18ac:	b5 01       	movw	r22, r10
    18ae:	a4 01       	movw	r20, r8
    18b0:	93 01       	movw	r18, r6
    18b2:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
    18b6:	61 96       	adiw	r28, 0x11	; 17
    18b8:	6c af       	std	Y+60, r22	; 0x3c
    18ba:	7d af       	std	Y+61, r23	; 0x3d
    18bc:	8e af       	std	Y+62, r24	; 0x3e
    18be:	9f af       	std	Y+63, r25	; 0x3f
    18c0:	61 97       	sbiw	r28, 0x11	; 17
    18c2:	c6 01       	movw	r24, r12
    18c4:	b5 01       	movw	r22, r10
    18c6:	65 96       	adiw	r28, 0x15	; 21
    18c8:	2c ad       	ldd	r18, Y+60	; 0x3c
    18ca:	3d ad       	ldd	r19, Y+61	; 0x3d
    18cc:	4e ad       	ldd	r20, Y+62	; 0x3e
    18ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    18d0:	65 97       	sbiw	r28, 0x15	; 21
    18d2:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
    18d6:	1b 01       	movw	r2, r22
    18d8:	2c 01       	movw	r4, r24
    18da:	c8 01       	movw	r24, r16
    18dc:	b7 01       	movw	r22, r14
    18de:	a4 01       	movw	r20, r8
    18e0:	93 01       	movw	r18, r6
    18e2:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
    18e6:	5b 01       	movw	r10, r22
    18e8:	6c 01       	movw	r12, r24
    18ea:	c8 01       	movw	r24, r16
    18ec:	b7 01       	movw	r22, r14
    18ee:	65 96       	adiw	r28, 0x15	; 21
    18f0:	2c ad       	ldd	r18, Y+60	; 0x3c
    18f2:	3d ad       	ldd	r19, Y+61	; 0x3d
    18f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    18f6:	5f ad       	ldd	r21, Y+63	; 0x3f
    18f8:	65 97       	sbiw	r28, 0x15	; 21
    18fa:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__mulsi3>
    18fe:	7b 01       	movw	r14, r22
    1900:	8c 01       	movw	r16, r24
    1902:	a6 01       	movw	r20, r12
    1904:	95 01       	movw	r18, r10
    1906:	22 0d       	add	r18, r2
    1908:	33 1d       	adc	r19, r3
    190a:	44 1d       	adc	r20, r4
    190c:	55 1d       	adc	r21, r5
    190e:	61 96       	adiw	r28, 0x11	; 17
    1910:	6c ac       	ldd	r6, Y+60	; 0x3c
    1912:	7d ac       	ldd	r7, Y+61	; 0x3d
    1914:	8e ac       	ldd	r8, Y+62	; 0x3e
    1916:	9f ac       	ldd	r9, Y+63	; 0x3f
    1918:	61 97       	sbiw	r28, 0x11	; 17
    191a:	c4 01       	movw	r24, r8
    191c:	aa 27       	eor	r26, r26
    191e:	bb 27       	eor	r27, r27
    1920:	28 0f       	add	r18, r24
    1922:	39 1f       	adc	r19, r25
    1924:	4a 1f       	adc	r20, r26
    1926:	5b 1f       	adc	r21, r27
    1928:	2a 15       	cp	r18, r10
    192a:	3b 05       	cpc	r19, r11
    192c:	4c 05       	cpc	r20, r12
    192e:	5d 05       	cpc	r21, r13
    1930:	48 f4       	brcc	.+18     	; 0x1944 <__umoddi3+0xb70>
    1932:	81 2c       	mov	r8, r1
    1934:	91 2c       	mov	r9, r1
    1936:	e1 e0       	ldi	r30, 0x01	; 1
    1938:	ae 2e       	mov	r10, r30
    193a:	b1 2c       	mov	r11, r1
    193c:	e8 0c       	add	r14, r8
    193e:	f9 1c       	adc	r15, r9
    1940:	0a 1d       	adc	r16, r10
    1942:	1b 1d       	adc	r17, r11
    1944:	ca 01       	movw	r24, r20
    1946:	aa 27       	eor	r26, r26
    1948:	bb 27       	eor	r27, r27
    194a:	57 01       	movw	r10, r14
    194c:	68 01       	movw	r12, r16
    194e:	a8 0e       	add	r10, r24
    1950:	b9 1e       	adc	r11, r25
    1952:	ca 1e       	adc	r12, r26
    1954:	db 1e       	adc	r13, r27
    1956:	a9 01       	movw	r20, r18
    1958:	33 27       	eor	r19, r19
    195a:	22 27       	eor	r18, r18
    195c:	61 96       	adiw	r28, 0x11	; 17
    195e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1960:	9d ad       	ldd	r25, Y+61	; 0x3d
    1962:	ae ad       	ldd	r26, Y+62	; 0x3e
    1964:	bf ad       	ldd	r27, Y+63	; 0x3f
    1966:	61 97       	sbiw	r28, 0x11	; 17
    1968:	a0 70       	andi	r26, 0x00	; 0
    196a:	b0 70       	andi	r27, 0x00	; 0
    196c:	28 0f       	add	r18, r24
    196e:	39 1f       	adc	r19, r25
    1970:	4a 1f       	adc	r20, r26
    1972:	5b 1f       	adc	r21, r27
    1974:	e9 8c       	ldd	r14, Y+25	; 0x19
    1976:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1978:	0b 8d       	ldd	r16, Y+27	; 0x1b
    197a:	1c 8d       	ldd	r17, Y+28	; 0x1c
    197c:	ea 14       	cp	r14, r10
    197e:	fb 04       	cpc	r15, r11
    1980:	0c 05       	cpc	r16, r12
    1982:	1d 05       	cpc	r17, r13
    1984:	70 f0       	brcs	.+28     	; 0x19a2 <__umoddi3+0xbce>
    1986:	ae 14       	cp	r10, r14
    1988:	bf 04       	cpc	r11, r15
    198a:	c0 06       	cpc	r12, r16
    198c:	d1 06       	cpc	r13, r17
    198e:	69 f5       	brne	.+90     	; 0x19ea <__umoddi3+0xc16>
    1990:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1992:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1994:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1996:	98 a1       	ldd	r25, Y+32	; 0x20
    1998:	62 17       	cp	r22, r18
    199a:	73 07       	cpc	r23, r19
    199c:	84 07       	cpc	r24, r20
    199e:	95 07       	cpc	r25, r21
    19a0:	20 f5       	brcc	.+72     	; 0x19ea <__umoddi3+0xc16>
    19a2:	da 01       	movw	r26, r20
    19a4:	c9 01       	movw	r24, r18
    19a6:	6d a0       	ldd	r6, Y+37	; 0x25
    19a8:	7e a0       	ldd	r7, Y+38	; 0x26
    19aa:	8f a0       	ldd	r8, Y+39	; 0x27
    19ac:	98 a4       	ldd	r9, Y+40	; 0x28
    19ae:	86 19       	sub	r24, r6
    19b0:	97 09       	sbc	r25, r7
    19b2:	a8 09       	sbc	r26, r8
    19b4:	b9 09       	sbc	r27, r9
    19b6:	e9 a4       	ldd	r14, Y+41	; 0x29
    19b8:	fa a4       	ldd	r15, Y+42	; 0x2a
    19ba:	0b a5       	ldd	r16, Y+43	; 0x2b
    19bc:	1c a5       	ldd	r17, Y+44	; 0x2c
    19be:	ae 18       	sub	r10, r14
    19c0:	bf 08       	sbc	r11, r15
    19c2:	c0 0a       	sbc	r12, r16
    19c4:	d1 0a       	sbc	r13, r17
    19c6:	ee 24       	eor	r14, r14
    19c8:	ff 24       	eor	r15, r15
    19ca:	87 01       	movw	r16, r14
    19cc:	28 17       	cp	r18, r24
    19ce:	39 07       	cpc	r19, r25
    19d0:	4a 07       	cpc	r20, r26
    19d2:	5b 07       	cpc	r21, r27
    19d4:	28 f4       	brcc	.+10     	; 0x19e0 <__umoddi3+0xc0c>
    19d6:	21 e0       	ldi	r18, 0x01	; 1
    19d8:	e2 2e       	mov	r14, r18
    19da:	f1 2c       	mov	r15, r1
    19dc:	01 2d       	mov	r16, r1
    19de:	11 2d       	mov	r17, r1
    19e0:	ae 18       	sub	r10, r14
    19e2:	bf 08       	sbc	r11, r15
    19e4:	c0 0a       	sbc	r12, r16
    19e6:	d1 0a       	sbc	r13, r17
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <__umoddi3+0xc1a>
    19ea:	da 01       	movw	r26, r20
    19ec:	c9 01       	movw	r24, r18
    19ee:	6d 8c       	ldd	r6, Y+29	; 0x1d
    19f0:	7e 8c       	ldd	r7, Y+30	; 0x1e
    19f2:	8f 8c       	ldd	r8, Y+31	; 0x1f
    19f4:	98 a0       	ldd	r9, Y+32	; 0x20
    19f6:	68 1a       	sub	r6, r24
    19f8:	79 0a       	sbc	r7, r25
    19fa:	8a 0a       	sbc	r8, r26
    19fc:	9b 0a       	sbc	r9, r27
    19fe:	49 8d       	ldd	r20, Y+25	; 0x19
    1a00:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1a02:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1a04:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1a06:	4a 19       	sub	r20, r10
    1a08:	5b 09       	sbc	r21, r11
    1a0a:	6c 09       	sbc	r22, r12
    1a0c:	7d 09       	sbc	r23, r13
    1a0e:	5a 01       	movw	r10, r20
    1a10:	6b 01       	movw	r12, r22
    1a12:	22 24       	eor	r2, r2
    1a14:	33 24       	eor	r3, r3
    1a16:	21 01       	movw	r4, r2
    1a18:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a1a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a20:	66 15       	cp	r22, r6
    1a22:	77 05       	cpc	r23, r7
    1a24:	88 05       	cpc	r24, r8
    1a26:	99 05       	cpc	r25, r9
    1a28:	28 f4       	brcc	.+10     	; 0x1a34 <__umoddi3+0xc60>
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	28 2e       	mov	r2, r24
    1a2e:	31 2c       	mov	r3, r1
    1a30:	41 2c       	mov	r4, r1
    1a32:	51 2c       	mov	r5, r1
    1a34:	86 01       	movw	r16, r12
    1a36:	75 01       	movw	r14, r10
    1a38:	e2 18       	sub	r14, r2
    1a3a:	f3 08       	sbc	r15, r3
    1a3c:	04 09       	sbc	r16, r4
    1a3e:	15 09       	sbc	r17, r5
    1a40:	a8 01       	movw	r20, r16
    1a42:	97 01       	movw	r18, r14
    1a44:	66 96       	adiw	r28, 0x16	; 22
    1a46:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a48:	66 97       	sbiw	r28, 0x16	; 22
    1a4a:	04 c0       	rjmp	.+8      	; 0x1a54 <__umoddi3+0xc80>
    1a4c:	22 0f       	add	r18, r18
    1a4e:	33 1f       	adc	r19, r19
    1a50:	44 1f       	adc	r20, r20
    1a52:	55 1f       	adc	r21, r21
    1a54:	0a 94       	dec	r0
    1a56:	d2 f7       	brpl	.-12     	; 0x1a4c <__umoddi3+0xc78>
    1a58:	d4 01       	movw	r26, r8
    1a5a:	c3 01       	movw	r24, r6
    1a5c:	67 96       	adiw	r28, 0x17	; 23
    1a5e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a60:	67 97       	sbiw	r28, 0x17	; 23
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <__umoddi3+0xc98>
    1a64:	b6 95       	lsr	r27
    1a66:	a7 95       	ror	r26
    1a68:	97 95       	ror	r25
    1a6a:	87 95       	ror	r24
    1a6c:	0a 94       	dec	r0
    1a6e:	d2 f7       	brpl	.-12     	; 0x1a64 <__umoddi3+0xc90>
    1a70:	28 2b       	or	r18, r24
    1a72:	39 2b       	or	r19, r25
    1a74:	4a 2b       	or	r20, r26
    1a76:	5b 2b       	or	r21, r27
    1a78:	29 8b       	std	Y+17, r18	; 0x11
    1a7a:	3a 8b       	std	Y+18, r19	; 0x12
    1a7c:	4b 8b       	std	Y+19, r20	; 0x13
    1a7e:	5c 8b       	std	Y+20, r21	; 0x14
    1a80:	67 96       	adiw	r28, 0x17	; 23
    1a82:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a84:	67 97       	sbiw	r28, 0x17	; 23
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <__umoddi3+0xcbc>
    1a88:	16 95       	lsr	r17
    1a8a:	07 95       	ror	r16
    1a8c:	f7 94       	ror	r15
    1a8e:	e7 94       	ror	r14
    1a90:	0a 94       	dec	r0
    1a92:	d2 f7       	brpl	.-12     	; 0x1a88 <__umoddi3+0xcb4>
    1a94:	ed 8a       	std	Y+21, r14	; 0x15
    1a96:	fe 8a       	std	Y+22, r15	; 0x16
    1a98:	0f 8b       	std	Y+23, r16	; 0x17
    1a9a:	18 8f       	std	Y+24, r17	; 0x18
    1a9c:	3a 89       	ldd	r19, Y+18	; 0x12
    1a9e:	4b 89       	ldd	r20, Y+19	; 0x13
    1aa0:	5c 89       	ldd	r21, Y+20	; 0x14
    1aa2:	6e 2d       	mov	r22, r14
    1aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aaa:	c5 5a       	subi	r28, 0xA5	; 165
    1aac:	df 4f       	sbci	r29, 0xFF	; 255
    1aae:	e2 e1       	ldi	r30, 0x12	; 18
    1ab0:	0c 94 23 24 	jmp	0x4846	; 0x4846 <__epilogue_restores__>

00001ab4 <_fpadd_parts>:
    1ab4:	a0 e0       	ldi	r26, 0x00	; 0
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e0 e6       	ldi	r30, 0x60	; 96
    1aba:	fd e0       	ldi	r31, 0x0D	; 13
    1abc:	0c 94 07 24 	jmp	0x480e	; 0x480e <__prologue_saves__>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	2b 01       	movw	r4, r22
    1ac4:	fa 01       	movw	r30, r20
    1ac6:	9c 91       	ld	r25, X
    1ac8:	92 30       	cpi	r25, 0x02	; 2
    1aca:	08 f4       	brcc	.+2      	; 0x1ace <_fpadd_parts+0x1a>
    1acc:	39 c1       	rjmp	.+626    	; 0x1d40 <_fpadd_parts+0x28c>
    1ace:	eb 01       	movw	r28, r22
    1ad0:	88 81       	ld	r24, Y
    1ad2:	82 30       	cpi	r24, 0x02	; 2
    1ad4:	08 f4       	brcc	.+2      	; 0x1ad8 <_fpadd_parts+0x24>
    1ad6:	33 c1       	rjmp	.+614    	; 0x1d3e <_fpadd_parts+0x28a>
    1ad8:	94 30       	cpi	r25, 0x04	; 4
    1ada:	69 f4       	brne	.+26     	; 0x1af6 <_fpadd_parts+0x42>
    1adc:	84 30       	cpi	r24, 0x04	; 4
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <_fpadd_parts+0x2e>
    1ae0:	2f c1       	rjmp	.+606    	; 0x1d40 <_fpadd_parts+0x28c>
    1ae2:	11 96       	adiw	r26, 0x01	; 1
    1ae4:	9c 91       	ld	r25, X
    1ae6:	11 97       	sbiw	r26, 0x01	; 1
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	98 17       	cp	r25, r24
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <_fpadd_parts+0x3c>
    1aee:	28 c1       	rjmp	.+592    	; 0x1d40 <_fpadd_parts+0x28c>
    1af0:	af e7       	ldi	r26, 0x7F	; 127
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	25 c1       	rjmp	.+586    	; 0x1d40 <_fpadd_parts+0x28c>
    1af6:	84 30       	cpi	r24, 0x04	; 4
    1af8:	09 f4       	brne	.+2      	; 0x1afc <_fpadd_parts+0x48>
    1afa:	21 c1       	rjmp	.+578    	; 0x1d3e <_fpadd_parts+0x28a>
    1afc:	82 30       	cpi	r24, 0x02	; 2
    1afe:	a9 f4       	brne	.+42     	; 0x1b2a <_fpadd_parts+0x76>
    1b00:	92 30       	cpi	r25, 0x02	; 2
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <_fpadd_parts+0x52>
    1b04:	1d c1       	rjmp	.+570    	; 0x1d40 <_fpadd_parts+0x28c>
    1b06:	9a 01       	movw	r18, r20
    1b08:	ad 01       	movw	r20, r26
    1b0a:	88 e0       	ldi	r24, 0x08	; 8
    1b0c:	ea 01       	movw	r28, r20
    1b0e:	09 90       	ld	r0, Y+
    1b10:	ae 01       	movw	r20, r28
    1b12:	e9 01       	movw	r28, r18
    1b14:	09 92       	st	Y+, r0
    1b16:	9e 01       	movw	r18, r28
    1b18:	81 50       	subi	r24, 0x01	; 1
    1b1a:	c1 f7       	brne	.-16     	; 0x1b0c <_fpadd_parts+0x58>
    1b1c:	e2 01       	movw	r28, r4
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	11 96       	adiw	r26, 0x01	; 1
    1b22:	9c 91       	ld	r25, X
    1b24:	89 23       	and	r24, r25
    1b26:	81 83       	std	Z+1, r24	; 0x01
    1b28:	08 c1       	rjmp	.+528    	; 0x1d3a <_fpadd_parts+0x286>
    1b2a:	92 30       	cpi	r25, 0x02	; 2
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <_fpadd_parts+0x7c>
    1b2e:	07 c1       	rjmp	.+526    	; 0x1d3e <_fpadd_parts+0x28a>
    1b30:	12 96       	adiw	r26, 0x02	; 2
    1b32:	2d 90       	ld	r2, X+
    1b34:	3c 90       	ld	r3, X
    1b36:	13 97       	sbiw	r26, 0x03	; 3
    1b38:	eb 01       	movw	r28, r22
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3e:	14 96       	adiw	r26, 0x04	; 4
    1b40:	ad 90       	ld	r10, X+
    1b42:	bd 90       	ld	r11, X+
    1b44:	cd 90       	ld	r12, X+
    1b46:	dc 90       	ld	r13, X
    1b48:	17 97       	sbiw	r26, 0x07	; 7
    1b4a:	ec 80       	ldd	r14, Y+4	; 0x04
    1b4c:	fd 80       	ldd	r15, Y+5	; 0x05
    1b4e:	0e 81       	ldd	r16, Y+6	; 0x06
    1b50:	1f 81       	ldd	r17, Y+7	; 0x07
    1b52:	91 01       	movw	r18, r2
    1b54:	28 1b       	sub	r18, r24
    1b56:	39 0b       	sbc	r19, r25
    1b58:	b9 01       	movw	r22, r18
    1b5a:	37 ff       	sbrs	r19, 7
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <_fpadd_parts+0xb2>
    1b5e:	66 27       	eor	r22, r22
    1b60:	77 27       	eor	r23, r23
    1b62:	62 1b       	sub	r22, r18
    1b64:	73 0b       	sbc	r23, r19
    1b66:	60 32       	cpi	r22, 0x20	; 32
    1b68:	71 05       	cpc	r23, r1
    1b6a:	0c f0       	brlt	.+2      	; 0x1b6e <_fpadd_parts+0xba>
    1b6c:	61 c0       	rjmp	.+194    	; 0x1c30 <_fpadd_parts+0x17c>
    1b6e:	12 16       	cp	r1, r18
    1b70:	13 06       	cpc	r1, r19
    1b72:	6c f5       	brge	.+90     	; 0x1bce <_fpadd_parts+0x11a>
    1b74:	37 01       	movw	r6, r14
    1b76:	48 01       	movw	r8, r16
    1b78:	06 2e       	mov	r0, r22
    1b7a:	04 c0       	rjmp	.+8      	; 0x1b84 <_fpadd_parts+0xd0>
    1b7c:	96 94       	lsr	r9
    1b7e:	87 94       	ror	r8
    1b80:	77 94       	ror	r7
    1b82:	67 94       	ror	r6
    1b84:	0a 94       	dec	r0
    1b86:	d2 f7       	brpl	.-12     	; 0x1b7c <_fpadd_parts+0xc8>
    1b88:	21 e0       	ldi	r18, 0x01	; 1
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <_fpadd_parts+0xe6>
    1b92:	22 0f       	add	r18, r18
    1b94:	33 1f       	adc	r19, r19
    1b96:	44 1f       	adc	r20, r20
    1b98:	55 1f       	adc	r21, r21
    1b9a:	6a 95       	dec	r22
    1b9c:	d2 f7       	brpl	.-12     	; 0x1b92 <_fpadd_parts+0xde>
    1b9e:	21 50       	subi	r18, 0x01	; 1
    1ba0:	30 40       	sbci	r19, 0x00	; 0
    1ba2:	40 40       	sbci	r20, 0x00	; 0
    1ba4:	50 40       	sbci	r21, 0x00	; 0
    1ba6:	2e 21       	and	r18, r14
    1ba8:	3f 21       	and	r19, r15
    1baa:	40 23       	and	r20, r16
    1bac:	51 23       	and	r21, r17
    1bae:	21 15       	cp	r18, r1
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	41 05       	cpc	r20, r1
    1bb4:	51 05       	cpc	r21, r1
    1bb6:	21 f0       	breq	.+8      	; 0x1bc0 <_fpadd_parts+0x10c>
    1bb8:	21 e0       	ldi	r18, 0x01	; 1
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	79 01       	movw	r14, r18
    1bc2:	8a 01       	movw	r16, r20
    1bc4:	e6 28       	or	r14, r6
    1bc6:	f7 28       	or	r15, r7
    1bc8:	08 29       	or	r16, r8
    1bca:	19 29       	or	r17, r9
    1bcc:	3c c0       	rjmp	.+120    	; 0x1c46 <_fpadd_parts+0x192>
    1bce:	23 2b       	or	r18, r19
    1bd0:	d1 f1       	breq	.+116    	; 0x1c46 <_fpadd_parts+0x192>
    1bd2:	26 0e       	add	r2, r22
    1bd4:	37 1e       	adc	r3, r23
    1bd6:	35 01       	movw	r6, r10
    1bd8:	46 01       	movw	r8, r12
    1bda:	06 2e       	mov	r0, r22
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <_fpadd_parts+0x132>
    1bde:	96 94       	lsr	r9
    1be0:	87 94       	ror	r8
    1be2:	77 94       	ror	r7
    1be4:	67 94       	ror	r6
    1be6:	0a 94       	dec	r0
    1be8:	d2 f7       	brpl	.-12     	; 0x1bde <_fpadd_parts+0x12a>
    1bea:	21 e0       	ldi	r18, 0x01	; 1
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	04 c0       	rjmp	.+8      	; 0x1bfc <_fpadd_parts+0x148>
    1bf4:	22 0f       	add	r18, r18
    1bf6:	33 1f       	adc	r19, r19
    1bf8:	44 1f       	adc	r20, r20
    1bfa:	55 1f       	adc	r21, r21
    1bfc:	6a 95       	dec	r22
    1bfe:	d2 f7       	brpl	.-12     	; 0x1bf4 <_fpadd_parts+0x140>
    1c00:	21 50       	subi	r18, 0x01	; 1
    1c02:	30 40       	sbci	r19, 0x00	; 0
    1c04:	40 40       	sbci	r20, 0x00	; 0
    1c06:	50 40       	sbci	r21, 0x00	; 0
    1c08:	2a 21       	and	r18, r10
    1c0a:	3b 21       	and	r19, r11
    1c0c:	4c 21       	and	r20, r12
    1c0e:	5d 21       	and	r21, r13
    1c10:	21 15       	cp	r18, r1
    1c12:	31 05       	cpc	r19, r1
    1c14:	41 05       	cpc	r20, r1
    1c16:	51 05       	cpc	r21, r1
    1c18:	21 f0       	breq	.+8      	; 0x1c22 <_fpadd_parts+0x16e>
    1c1a:	21 e0       	ldi	r18, 0x01	; 1
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	59 01       	movw	r10, r18
    1c24:	6a 01       	movw	r12, r20
    1c26:	a6 28       	or	r10, r6
    1c28:	b7 28       	or	r11, r7
    1c2a:	c8 28       	or	r12, r8
    1c2c:	d9 28       	or	r13, r9
    1c2e:	0b c0       	rjmp	.+22     	; 0x1c46 <_fpadd_parts+0x192>
    1c30:	82 15       	cp	r24, r2
    1c32:	93 05       	cpc	r25, r3
    1c34:	2c f0       	brlt	.+10     	; 0x1c40 <_fpadd_parts+0x18c>
    1c36:	1c 01       	movw	r2, r24
    1c38:	aa 24       	eor	r10, r10
    1c3a:	bb 24       	eor	r11, r11
    1c3c:	65 01       	movw	r12, r10
    1c3e:	03 c0       	rjmp	.+6      	; 0x1c46 <_fpadd_parts+0x192>
    1c40:	ee 24       	eor	r14, r14
    1c42:	ff 24       	eor	r15, r15
    1c44:	87 01       	movw	r16, r14
    1c46:	11 96       	adiw	r26, 0x01	; 1
    1c48:	9c 91       	ld	r25, X
    1c4a:	d2 01       	movw	r26, r4
    1c4c:	11 96       	adiw	r26, 0x01	; 1
    1c4e:	8c 91       	ld	r24, X
    1c50:	98 17       	cp	r25, r24
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <_fpadd_parts+0x1a2>
    1c54:	45 c0       	rjmp	.+138    	; 0x1ce0 <_fpadd_parts+0x22c>
    1c56:	99 23       	and	r25, r25
    1c58:	39 f0       	breq	.+14     	; 0x1c68 <_fpadd_parts+0x1b4>
    1c5a:	a8 01       	movw	r20, r16
    1c5c:	97 01       	movw	r18, r14
    1c5e:	2a 19       	sub	r18, r10
    1c60:	3b 09       	sbc	r19, r11
    1c62:	4c 09       	sbc	r20, r12
    1c64:	5d 09       	sbc	r21, r13
    1c66:	06 c0       	rjmp	.+12     	; 0x1c74 <_fpadd_parts+0x1c0>
    1c68:	a6 01       	movw	r20, r12
    1c6a:	95 01       	movw	r18, r10
    1c6c:	2e 19       	sub	r18, r14
    1c6e:	3f 09       	sbc	r19, r15
    1c70:	40 0b       	sbc	r20, r16
    1c72:	51 0b       	sbc	r21, r17
    1c74:	57 fd       	sbrc	r21, 7
    1c76:	08 c0       	rjmp	.+16     	; 0x1c88 <_fpadd_parts+0x1d4>
    1c78:	11 82       	std	Z+1, r1	; 0x01
    1c7a:	33 82       	std	Z+3, r3	; 0x03
    1c7c:	22 82       	std	Z+2, r2	; 0x02
    1c7e:	24 83       	std	Z+4, r18	; 0x04
    1c80:	35 83       	std	Z+5, r19	; 0x05
    1c82:	46 83       	std	Z+6, r20	; 0x06
    1c84:	57 83       	std	Z+7, r21	; 0x07
    1c86:	1d c0       	rjmp	.+58     	; 0x1cc2 <_fpadd_parts+0x20e>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	81 83       	std	Z+1, r24	; 0x01
    1c8c:	33 82       	std	Z+3, r3	; 0x03
    1c8e:	22 82       	std	Z+2, r2	; 0x02
    1c90:	88 27       	eor	r24, r24
    1c92:	99 27       	eor	r25, r25
    1c94:	dc 01       	movw	r26, r24
    1c96:	82 1b       	sub	r24, r18
    1c98:	93 0b       	sbc	r25, r19
    1c9a:	a4 0b       	sbc	r26, r20
    1c9c:	b5 0b       	sbc	r27, r21
    1c9e:	84 83       	std	Z+4, r24	; 0x04
    1ca0:	95 83       	std	Z+5, r25	; 0x05
    1ca2:	a6 83       	std	Z+6, r26	; 0x06
    1ca4:	b7 83       	std	Z+7, r27	; 0x07
    1ca6:	0d c0       	rjmp	.+26     	; 0x1cc2 <_fpadd_parts+0x20e>
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	44 1f       	adc	r20, r20
    1cae:	55 1f       	adc	r21, r21
    1cb0:	24 83       	std	Z+4, r18	; 0x04
    1cb2:	35 83       	std	Z+5, r19	; 0x05
    1cb4:	46 83       	std	Z+6, r20	; 0x06
    1cb6:	57 83       	std	Z+7, r21	; 0x07
    1cb8:	82 81       	ldd	r24, Z+2	; 0x02
    1cba:	93 81       	ldd	r25, Z+3	; 0x03
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	93 83       	std	Z+3, r25	; 0x03
    1cc0:	82 83       	std	Z+2, r24	; 0x02
    1cc2:	24 81       	ldd	r18, Z+4	; 0x04
    1cc4:	35 81       	ldd	r19, Z+5	; 0x05
    1cc6:	46 81       	ldd	r20, Z+6	; 0x06
    1cc8:	57 81       	ldd	r21, Z+7	; 0x07
    1cca:	da 01       	movw	r26, r20
    1ccc:	c9 01       	movw	r24, r18
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	a1 09       	sbc	r26, r1
    1cd2:	b1 09       	sbc	r27, r1
    1cd4:	8f 5f       	subi	r24, 0xFF	; 255
    1cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd8:	af 4f       	sbci	r26, 0xFF	; 255
    1cda:	bf 43       	sbci	r27, 0x3F	; 63
    1cdc:	28 f3       	brcs	.-54     	; 0x1ca8 <_fpadd_parts+0x1f4>
    1cde:	0b c0       	rjmp	.+22     	; 0x1cf6 <_fpadd_parts+0x242>
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	33 82       	std	Z+3, r3	; 0x03
    1ce4:	22 82       	std	Z+2, r2	; 0x02
    1ce6:	ea 0c       	add	r14, r10
    1ce8:	fb 1c       	adc	r15, r11
    1cea:	0c 1d       	adc	r16, r12
    1cec:	1d 1d       	adc	r17, r13
    1cee:	e4 82       	std	Z+4, r14	; 0x04
    1cf0:	f5 82       	std	Z+5, r15	; 0x05
    1cf2:	06 83       	std	Z+6, r16	; 0x06
    1cf4:	17 83       	std	Z+7, r17	; 0x07
    1cf6:	83 e0       	ldi	r24, 0x03	; 3
    1cf8:	80 83       	st	Z, r24
    1cfa:	24 81       	ldd	r18, Z+4	; 0x04
    1cfc:	35 81       	ldd	r19, Z+5	; 0x05
    1cfe:	46 81       	ldd	r20, Z+6	; 0x06
    1d00:	57 81       	ldd	r21, Z+7	; 0x07
    1d02:	57 ff       	sbrs	r21, 7
    1d04:	1a c0       	rjmp	.+52     	; 0x1d3a <_fpadd_parts+0x286>
    1d06:	c9 01       	movw	r24, r18
    1d08:	aa 27       	eor	r26, r26
    1d0a:	97 fd       	sbrc	r25, 7
    1d0c:	a0 95       	com	r26
    1d0e:	ba 2f       	mov	r27, r26
    1d10:	81 70       	andi	r24, 0x01	; 1
    1d12:	90 70       	andi	r25, 0x00	; 0
    1d14:	a0 70       	andi	r26, 0x00	; 0
    1d16:	b0 70       	andi	r27, 0x00	; 0
    1d18:	56 95       	lsr	r21
    1d1a:	47 95       	ror	r20
    1d1c:	37 95       	ror	r19
    1d1e:	27 95       	ror	r18
    1d20:	82 2b       	or	r24, r18
    1d22:	93 2b       	or	r25, r19
    1d24:	a4 2b       	or	r26, r20
    1d26:	b5 2b       	or	r27, r21
    1d28:	84 83       	std	Z+4, r24	; 0x04
    1d2a:	95 83       	std	Z+5, r25	; 0x05
    1d2c:	a6 83       	std	Z+6, r26	; 0x06
    1d2e:	b7 83       	std	Z+7, r27	; 0x07
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	93 83       	std	Z+3, r25	; 0x03
    1d38:	82 83       	std	Z+2, r24	; 0x02
    1d3a:	df 01       	movw	r26, r30
    1d3c:	01 c0       	rjmp	.+2      	; 0x1d40 <_fpadd_parts+0x28c>
    1d3e:	d2 01       	movw	r26, r4
    1d40:	cd 01       	movw	r24, r26
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	e2 e1       	ldi	r30, 0x12	; 18
    1d48:	0c 94 23 24 	jmp	0x4846	; 0x4846 <__epilogue_restores__>

00001d4c <__subsf3>:
    1d4c:	a0 e2       	ldi	r26, 0x20	; 32
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	ec ea       	ldi	r30, 0xAC	; 172
    1d52:	fe e0       	ldi	r31, 0x0E	; 14
    1d54:	0c 94 13 24 	jmp	0x4826	; 0x4826 <__prologue_saves__+0x18>
    1d58:	69 83       	std	Y+1, r22	; 0x01
    1d5a:	7a 83       	std	Y+2, r23	; 0x02
    1d5c:	8b 83       	std	Y+3, r24	; 0x03
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	2d 83       	std	Y+5, r18	; 0x05
    1d62:	3e 83       	std	Y+6, r19	; 0x06
    1d64:	4f 83       	std	Y+7, r20	; 0x07
    1d66:	58 87       	std	Y+8, r21	; 0x08
    1d68:	e9 e0       	ldi	r30, 0x09	; 9
    1d6a:	ee 2e       	mov	r14, r30
    1d6c:	f1 2c       	mov	r15, r1
    1d6e:	ec 0e       	add	r14, r28
    1d70:	fd 1e       	adc	r15, r29
    1d72:	ce 01       	movw	r24, r28
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	b7 01       	movw	r22, r14
    1d78:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    1d7c:	8e 01       	movw	r16, r28
    1d7e:	0f 5e       	subi	r16, 0xEF	; 239
    1d80:	1f 4f       	sbci	r17, 0xFF	; 255
    1d82:	ce 01       	movw	r24, r28
    1d84:	05 96       	adiw	r24, 0x05	; 5
    1d86:	b8 01       	movw	r22, r16
    1d88:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    1d8c:	8a 89       	ldd	r24, Y+18	; 0x12
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	89 27       	eor	r24, r25
    1d92:	8a 8b       	std	Y+18, r24	; 0x12
    1d94:	c7 01       	movw	r24, r14
    1d96:	b8 01       	movw	r22, r16
    1d98:	ae 01       	movw	r20, r28
    1d9a:	47 5e       	subi	r20, 0xE7	; 231
    1d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_fpadd_parts>
    1da2:	0e 94 8e 11 	call	0x231c	; 0x231c <__pack_f>
    1da6:	a0 96       	adiw	r28, 0x20	; 32
    1da8:	e6 e0       	ldi	r30, 0x06	; 6
    1daa:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__epilogue_restores__+0x18>

00001dae <__addsf3>:
    1dae:	a0 e2       	ldi	r26, 0x20	; 32
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	ed ed       	ldi	r30, 0xDD	; 221
    1db4:	fe e0       	ldi	r31, 0x0E	; 14
    1db6:	0c 94 13 24 	jmp	0x4826	; 0x4826 <__prologue_saves__+0x18>
    1dba:	69 83       	std	Y+1, r22	; 0x01
    1dbc:	7a 83       	std	Y+2, r23	; 0x02
    1dbe:	8b 83       	std	Y+3, r24	; 0x03
    1dc0:	9c 83       	std	Y+4, r25	; 0x04
    1dc2:	2d 83       	std	Y+5, r18	; 0x05
    1dc4:	3e 83       	std	Y+6, r19	; 0x06
    1dc6:	4f 83       	std	Y+7, r20	; 0x07
    1dc8:	58 87       	std	Y+8, r21	; 0x08
    1dca:	f9 e0       	ldi	r31, 0x09	; 9
    1dcc:	ef 2e       	mov	r14, r31
    1dce:	f1 2c       	mov	r15, r1
    1dd0:	ec 0e       	add	r14, r28
    1dd2:	fd 1e       	adc	r15, r29
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	01 96       	adiw	r24, 0x01	; 1
    1dd8:	b7 01       	movw	r22, r14
    1dda:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    1dde:	8e 01       	movw	r16, r28
    1de0:	0f 5e       	subi	r16, 0xEF	; 239
    1de2:	1f 4f       	sbci	r17, 0xFF	; 255
    1de4:	ce 01       	movw	r24, r28
    1de6:	05 96       	adiw	r24, 0x05	; 5
    1de8:	b8 01       	movw	r22, r16
    1dea:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    1dee:	c7 01       	movw	r24, r14
    1df0:	b8 01       	movw	r22, r16
    1df2:	ae 01       	movw	r20, r28
    1df4:	47 5e       	subi	r20, 0xE7	; 231
    1df6:	5f 4f       	sbci	r21, 0xFF	; 255
    1df8:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_fpadd_parts>
    1dfc:	0e 94 8e 11 	call	0x231c	; 0x231c <__pack_f>
    1e00:	a0 96       	adiw	r28, 0x20	; 32
    1e02:	e6 e0       	ldi	r30, 0x06	; 6
    1e04:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__epilogue_restores__+0x18>

00001e08 <__mulsf3>:
    1e08:	a0 e2       	ldi	r26, 0x20	; 32
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	ea e0       	ldi	r30, 0x0A	; 10
    1e0e:	ff e0       	ldi	r31, 0x0F	; 15
    1e10:	0c 94 07 24 	jmp	0x480e	; 0x480e <__prologue_saves__>
    1e14:	69 83       	std	Y+1, r22	; 0x01
    1e16:	7a 83       	std	Y+2, r23	; 0x02
    1e18:	8b 83       	std	Y+3, r24	; 0x03
    1e1a:	9c 83       	std	Y+4, r25	; 0x04
    1e1c:	2d 83       	std	Y+5, r18	; 0x05
    1e1e:	3e 83       	std	Y+6, r19	; 0x06
    1e20:	4f 83       	std	Y+7, r20	; 0x07
    1e22:	58 87       	std	Y+8, r21	; 0x08
    1e24:	ce 01       	movw	r24, r28
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	be 01       	movw	r22, r28
    1e2a:	67 5f       	subi	r22, 0xF7	; 247
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    1e32:	ce 01       	movw	r24, r28
    1e34:	05 96       	adiw	r24, 0x05	; 5
    1e36:	be 01       	movw	r22, r28
    1e38:	6f 5e       	subi	r22, 0xEF	; 239
    1e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    1e40:	99 85       	ldd	r25, Y+9	; 0x09
    1e42:	92 30       	cpi	r25, 0x02	; 2
    1e44:	88 f0       	brcs	.+34     	; 0x1e68 <__mulsf3+0x60>
    1e46:	89 89       	ldd	r24, Y+17	; 0x11
    1e48:	82 30       	cpi	r24, 0x02	; 2
    1e4a:	c8 f0       	brcs	.+50     	; 0x1e7e <__mulsf3+0x76>
    1e4c:	94 30       	cpi	r25, 0x04	; 4
    1e4e:	19 f4       	brne	.+6      	; 0x1e56 <__mulsf3+0x4e>
    1e50:	82 30       	cpi	r24, 0x02	; 2
    1e52:	51 f4       	brne	.+20     	; 0x1e68 <__mulsf3+0x60>
    1e54:	04 c0       	rjmp	.+8      	; 0x1e5e <__mulsf3+0x56>
    1e56:	84 30       	cpi	r24, 0x04	; 4
    1e58:	29 f4       	brne	.+10     	; 0x1e64 <__mulsf3+0x5c>
    1e5a:	92 30       	cpi	r25, 0x02	; 2
    1e5c:	81 f4       	brne	.+32     	; 0x1e7e <__mulsf3+0x76>
    1e5e:	8f e7       	ldi	r24, 0x7F	; 127
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	c6 c0       	rjmp	.+396    	; 0x1ff0 <__mulsf3+0x1e8>
    1e64:	92 30       	cpi	r25, 0x02	; 2
    1e66:	49 f4       	brne	.+18     	; 0x1e7a <__mulsf3+0x72>
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6c:	8a 89       	ldd	r24, Y+18	; 0x12
    1e6e:	98 13       	cpse	r25, r24
    1e70:	21 e0       	ldi	r18, 0x01	; 1
    1e72:	2a 87       	std	Y+10, r18	; 0x0a
    1e74:	ce 01       	movw	r24, r28
    1e76:	09 96       	adiw	r24, 0x09	; 9
    1e78:	bb c0       	rjmp	.+374    	; 0x1ff0 <__mulsf3+0x1e8>
    1e7a:	82 30       	cpi	r24, 0x02	; 2
    1e7c:	49 f4       	brne	.+18     	; 0x1e90 <__mulsf3+0x88>
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e82:	8a 89       	ldd	r24, Y+18	; 0x12
    1e84:	98 13       	cpse	r25, r24
    1e86:	21 e0       	ldi	r18, 0x01	; 1
    1e88:	2a 8b       	std	Y+18, r18	; 0x12
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	41 96       	adiw	r24, 0x11	; 17
    1e8e:	b0 c0       	rjmp	.+352    	; 0x1ff0 <__mulsf3+0x1e8>
    1e90:	2d 84       	ldd	r2, Y+13	; 0x0d
    1e92:	3e 84       	ldd	r3, Y+14	; 0x0e
    1e94:	4f 84       	ldd	r4, Y+15	; 0x0f
    1e96:	58 88       	ldd	r5, Y+16	; 0x10
    1e98:	6d 88       	ldd	r6, Y+21	; 0x15
    1e9a:	7e 88       	ldd	r7, Y+22	; 0x16
    1e9c:	8f 88       	ldd	r8, Y+23	; 0x17
    1e9e:	98 8c       	ldd	r9, Y+24	; 0x18
    1ea0:	ee 24       	eor	r14, r14
    1ea2:	ff 24       	eor	r15, r15
    1ea4:	87 01       	movw	r16, r14
    1ea6:	aa 24       	eor	r10, r10
    1ea8:	bb 24       	eor	r11, r11
    1eaa:	65 01       	movw	r12, r10
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	70 e0       	ldi	r23, 0x00	; 0
    1eb4:	e0 e0       	ldi	r30, 0x00	; 0
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	c1 01       	movw	r24, r2
    1eba:	81 70       	andi	r24, 0x01	; 1
    1ebc:	90 70       	andi	r25, 0x00	; 0
    1ebe:	89 2b       	or	r24, r25
    1ec0:	e9 f0       	breq	.+58     	; 0x1efc <__mulsf3+0xf4>
    1ec2:	e6 0c       	add	r14, r6
    1ec4:	f7 1c       	adc	r15, r7
    1ec6:	08 1d       	adc	r16, r8
    1ec8:	19 1d       	adc	r17, r9
    1eca:	9a 01       	movw	r18, r20
    1ecc:	ab 01       	movw	r20, r22
    1ece:	2a 0d       	add	r18, r10
    1ed0:	3b 1d       	adc	r19, r11
    1ed2:	4c 1d       	adc	r20, r12
    1ed4:	5d 1d       	adc	r21, r13
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a0 e0       	ldi	r26, 0x00	; 0
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e6 14       	cp	r14, r6
    1ee0:	f7 04       	cpc	r15, r7
    1ee2:	08 05       	cpc	r16, r8
    1ee4:	19 05       	cpc	r17, r9
    1ee6:	20 f4       	brcc	.+8      	; 0x1ef0 <__mulsf3+0xe8>
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a0 e0       	ldi	r26, 0x00	; 0
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	ba 01       	movw	r22, r20
    1ef2:	a9 01       	movw	r20, r18
    1ef4:	48 0f       	add	r20, r24
    1ef6:	59 1f       	adc	r21, r25
    1ef8:	6a 1f       	adc	r22, r26
    1efa:	7b 1f       	adc	r23, r27
    1efc:	aa 0c       	add	r10, r10
    1efe:	bb 1c       	adc	r11, r11
    1f00:	cc 1c       	adc	r12, r12
    1f02:	dd 1c       	adc	r13, r13
    1f04:	97 fe       	sbrs	r9, 7
    1f06:	08 c0       	rjmp	.+16     	; 0x1f18 <__mulsf3+0x110>
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	a0 e0       	ldi	r26, 0x00	; 0
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	a8 2a       	or	r10, r24
    1f12:	b9 2a       	or	r11, r25
    1f14:	ca 2a       	or	r12, r26
    1f16:	db 2a       	or	r13, r27
    1f18:	31 96       	adiw	r30, 0x01	; 1
    1f1a:	e0 32       	cpi	r30, 0x20	; 32
    1f1c:	f1 05       	cpc	r31, r1
    1f1e:	49 f0       	breq	.+18     	; 0x1f32 <__mulsf3+0x12a>
    1f20:	66 0c       	add	r6, r6
    1f22:	77 1c       	adc	r7, r7
    1f24:	88 1c       	adc	r8, r8
    1f26:	99 1c       	adc	r9, r9
    1f28:	56 94       	lsr	r5
    1f2a:	47 94       	ror	r4
    1f2c:	37 94       	ror	r3
    1f2e:	27 94       	ror	r2
    1f30:	c3 cf       	rjmp	.-122    	; 0x1eb8 <__mulsf3+0xb0>
    1f32:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f34:	ea 89       	ldd	r30, Y+18	; 0x12
    1f36:	2b 89       	ldd	r18, Y+19	; 0x13
    1f38:	3c 89       	ldd	r19, Y+20	; 0x14
    1f3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f3e:	28 0f       	add	r18, r24
    1f40:	39 1f       	adc	r19, r25
    1f42:	2e 5f       	subi	r18, 0xFE	; 254
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	17 c0       	rjmp	.+46     	; 0x1f76 <__mulsf3+0x16e>
    1f48:	ca 01       	movw	r24, r20
    1f4a:	81 70       	andi	r24, 0x01	; 1
    1f4c:	90 70       	andi	r25, 0x00	; 0
    1f4e:	89 2b       	or	r24, r25
    1f50:	61 f0       	breq	.+24     	; 0x1f6a <__mulsf3+0x162>
    1f52:	16 95       	lsr	r17
    1f54:	07 95       	ror	r16
    1f56:	f7 94       	ror	r15
    1f58:	e7 94       	ror	r14
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a0 e0       	ldi	r26, 0x00	; 0
    1f60:	b0 e8       	ldi	r27, 0x80	; 128
    1f62:	e8 2a       	or	r14, r24
    1f64:	f9 2a       	or	r15, r25
    1f66:	0a 2b       	or	r16, r26
    1f68:	1b 2b       	or	r17, r27
    1f6a:	76 95       	lsr	r23
    1f6c:	67 95       	ror	r22
    1f6e:	57 95       	ror	r21
    1f70:	47 95       	ror	r20
    1f72:	2f 5f       	subi	r18, 0xFF	; 255
    1f74:	3f 4f       	sbci	r19, 0xFF	; 255
    1f76:	77 fd       	sbrc	r23, 7
    1f78:	e7 cf       	rjmp	.-50     	; 0x1f48 <__mulsf3+0x140>
    1f7a:	0c c0       	rjmp	.+24     	; 0x1f94 <__mulsf3+0x18c>
    1f7c:	44 0f       	add	r20, r20
    1f7e:	55 1f       	adc	r21, r21
    1f80:	66 1f       	adc	r22, r22
    1f82:	77 1f       	adc	r23, r23
    1f84:	17 fd       	sbrc	r17, 7
    1f86:	41 60       	ori	r20, 0x01	; 1
    1f88:	ee 0c       	add	r14, r14
    1f8a:	ff 1c       	adc	r15, r15
    1f8c:	00 1f       	adc	r16, r16
    1f8e:	11 1f       	adc	r17, r17
    1f90:	21 50       	subi	r18, 0x01	; 1
    1f92:	30 40       	sbci	r19, 0x00	; 0
    1f94:	40 30       	cpi	r20, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	59 07       	cpc	r21, r25
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	69 07       	cpc	r22, r25
    1f9e:	90 e4       	ldi	r25, 0x40	; 64
    1fa0:	79 07       	cpc	r23, r25
    1fa2:	60 f3       	brcs	.-40     	; 0x1f7c <__mulsf3+0x174>
    1fa4:	2b 8f       	std	Y+27, r18	; 0x1b
    1fa6:	3c 8f       	std	Y+28, r19	; 0x1c
    1fa8:	db 01       	movw	r26, r22
    1faa:	ca 01       	movw	r24, r20
    1fac:	8f 77       	andi	r24, 0x7F	; 127
    1fae:	90 70       	andi	r25, 0x00	; 0
    1fb0:	a0 70       	andi	r26, 0x00	; 0
    1fb2:	b0 70       	andi	r27, 0x00	; 0
    1fb4:	80 34       	cpi	r24, 0x40	; 64
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	a1 05       	cpc	r26, r1
    1fba:	b1 05       	cpc	r27, r1
    1fbc:	61 f4       	brne	.+24     	; 0x1fd6 <__mulsf3+0x1ce>
    1fbe:	47 fd       	sbrc	r20, 7
    1fc0:	0a c0       	rjmp	.+20     	; 0x1fd6 <__mulsf3+0x1ce>
    1fc2:	e1 14       	cp	r14, r1
    1fc4:	f1 04       	cpc	r15, r1
    1fc6:	01 05       	cpc	r16, r1
    1fc8:	11 05       	cpc	r17, r1
    1fca:	29 f0       	breq	.+10     	; 0x1fd6 <__mulsf3+0x1ce>
    1fcc:	40 5c       	subi	r20, 0xC0	; 192
    1fce:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd0:	6f 4f       	sbci	r22, 0xFF	; 255
    1fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd4:	40 78       	andi	r20, 0x80	; 128
    1fd6:	1a 8e       	std	Y+26, r1	; 0x1a
    1fd8:	fe 17       	cp	r31, r30
    1fda:	11 f0       	breq	.+4      	; 0x1fe0 <__mulsf3+0x1d8>
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	8a 8f       	std	Y+26, r24	; 0x1a
    1fe0:	4d 8f       	std	Y+29, r20	; 0x1d
    1fe2:	5e 8f       	std	Y+30, r21	; 0x1e
    1fe4:	6f 8f       	std	Y+31, r22	; 0x1f
    1fe6:	78 a3       	std	Y+32, r23	; 0x20
    1fe8:	83 e0       	ldi	r24, 0x03	; 3
    1fea:	89 8f       	std	Y+25, r24	; 0x19
    1fec:	ce 01       	movw	r24, r28
    1fee:	49 96       	adiw	r24, 0x19	; 25
    1ff0:	0e 94 8e 11 	call	0x231c	; 0x231c <__pack_f>
    1ff4:	a0 96       	adiw	r28, 0x20	; 32
    1ff6:	e2 e1       	ldi	r30, 0x12	; 18
    1ff8:	0c 94 23 24 	jmp	0x4846	; 0x4846 <__epilogue_restores__>

00001ffc <__divsf3>:
    1ffc:	a8 e1       	ldi	r26, 0x18	; 24
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e4 e0       	ldi	r30, 0x04	; 4
    2002:	f0 e1       	ldi	r31, 0x10	; 16
    2004:	0c 94 0f 24 	jmp	0x481e	; 0x481e <__prologue_saves__+0x10>
    2008:	69 83       	std	Y+1, r22	; 0x01
    200a:	7a 83       	std	Y+2, r23	; 0x02
    200c:	8b 83       	std	Y+3, r24	; 0x03
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	2d 83       	std	Y+5, r18	; 0x05
    2012:	3e 83       	std	Y+6, r19	; 0x06
    2014:	4f 83       	std	Y+7, r20	; 0x07
    2016:	58 87       	std	Y+8, r21	; 0x08
    2018:	b9 e0       	ldi	r27, 0x09	; 9
    201a:	eb 2e       	mov	r14, r27
    201c:	f1 2c       	mov	r15, r1
    201e:	ec 0e       	add	r14, r28
    2020:	fd 1e       	adc	r15, r29
    2022:	ce 01       	movw	r24, r28
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	b7 01       	movw	r22, r14
    2028:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    202c:	8e 01       	movw	r16, r28
    202e:	0f 5e       	subi	r16, 0xEF	; 239
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	ce 01       	movw	r24, r28
    2034:	05 96       	adiw	r24, 0x05	; 5
    2036:	b8 01       	movw	r22, r16
    2038:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    203c:	29 85       	ldd	r18, Y+9	; 0x09
    203e:	22 30       	cpi	r18, 0x02	; 2
    2040:	08 f4       	brcc	.+2      	; 0x2044 <__divsf3+0x48>
    2042:	7e c0       	rjmp	.+252    	; 0x2140 <__divsf3+0x144>
    2044:	39 89       	ldd	r19, Y+17	; 0x11
    2046:	32 30       	cpi	r19, 0x02	; 2
    2048:	10 f4       	brcc	.+4      	; 0x204e <__divsf3+0x52>
    204a:	b8 01       	movw	r22, r16
    204c:	7c c0       	rjmp	.+248    	; 0x2146 <__divsf3+0x14a>
    204e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2050:	9a 89       	ldd	r25, Y+18	; 0x12
    2052:	89 27       	eor	r24, r25
    2054:	8a 87       	std	Y+10, r24	; 0x0a
    2056:	24 30       	cpi	r18, 0x04	; 4
    2058:	11 f0       	breq	.+4      	; 0x205e <__divsf3+0x62>
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 f4       	brne	.+12     	; 0x206a <__divsf3+0x6e>
    205e:	23 17       	cp	r18, r19
    2060:	09 f0       	breq	.+2      	; 0x2064 <__divsf3+0x68>
    2062:	6e c0       	rjmp	.+220    	; 0x2140 <__divsf3+0x144>
    2064:	6f e7       	ldi	r22, 0x7F	; 127
    2066:	70 e0       	ldi	r23, 0x00	; 0
    2068:	6e c0       	rjmp	.+220    	; 0x2146 <__divsf3+0x14a>
    206a:	34 30       	cpi	r19, 0x04	; 4
    206c:	39 f4       	brne	.+14     	; 0x207c <__divsf3+0x80>
    206e:	1d 86       	std	Y+13, r1	; 0x0d
    2070:	1e 86       	std	Y+14, r1	; 0x0e
    2072:	1f 86       	std	Y+15, r1	; 0x0f
    2074:	18 8a       	std	Y+16, r1	; 0x10
    2076:	1c 86       	std	Y+12, r1	; 0x0c
    2078:	1b 86       	std	Y+11, r1	; 0x0b
    207a:	04 c0       	rjmp	.+8      	; 0x2084 <__divsf3+0x88>
    207c:	32 30       	cpi	r19, 0x02	; 2
    207e:	21 f4       	brne	.+8      	; 0x2088 <__divsf3+0x8c>
    2080:	84 e0       	ldi	r24, 0x04	; 4
    2082:	89 87       	std	Y+9, r24	; 0x09
    2084:	b7 01       	movw	r22, r14
    2086:	5f c0       	rjmp	.+190    	; 0x2146 <__divsf3+0x14a>
    2088:	2b 85       	ldd	r18, Y+11	; 0x0b
    208a:	3c 85       	ldd	r19, Y+12	; 0x0c
    208c:	8b 89       	ldd	r24, Y+19	; 0x13
    208e:	9c 89       	ldd	r25, Y+20	; 0x14
    2090:	28 1b       	sub	r18, r24
    2092:	39 0b       	sbc	r19, r25
    2094:	3c 87       	std	Y+12, r19	; 0x0c
    2096:	2b 87       	std	Y+11, r18	; 0x0b
    2098:	ed 84       	ldd	r14, Y+13	; 0x0d
    209a:	fe 84       	ldd	r15, Y+14	; 0x0e
    209c:	0f 85       	ldd	r16, Y+15	; 0x0f
    209e:	18 89       	ldd	r17, Y+16	; 0x10
    20a0:	ad 88       	ldd	r10, Y+21	; 0x15
    20a2:	be 88       	ldd	r11, Y+22	; 0x16
    20a4:	cf 88       	ldd	r12, Y+23	; 0x17
    20a6:	d8 8c       	ldd	r13, Y+24	; 0x18
    20a8:	ea 14       	cp	r14, r10
    20aa:	fb 04       	cpc	r15, r11
    20ac:	0c 05       	cpc	r16, r12
    20ae:	1d 05       	cpc	r17, r13
    20b0:	40 f4       	brcc	.+16     	; 0x20c2 <__divsf3+0xc6>
    20b2:	ee 0c       	add	r14, r14
    20b4:	ff 1c       	adc	r15, r15
    20b6:	00 1f       	adc	r16, r16
    20b8:	11 1f       	adc	r17, r17
    20ba:	21 50       	subi	r18, 0x01	; 1
    20bc:	30 40       	sbci	r19, 0x00	; 0
    20be:	3c 87       	std	Y+12, r19	; 0x0c
    20c0:	2b 87       	std	Y+11, r18	; 0x0b
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	a0 e0       	ldi	r26, 0x00	; 0
    20d0:	b0 e4       	ldi	r27, 0x40	; 64
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	ea 14       	cp	r14, r10
    20d8:	fb 04       	cpc	r15, r11
    20da:	0c 05       	cpc	r16, r12
    20dc:	1d 05       	cpc	r17, r13
    20de:	40 f0       	brcs	.+16     	; 0x20f0 <__divsf3+0xf4>
    20e0:	28 2b       	or	r18, r24
    20e2:	39 2b       	or	r19, r25
    20e4:	4a 2b       	or	r20, r26
    20e6:	5b 2b       	or	r21, r27
    20e8:	ea 18       	sub	r14, r10
    20ea:	fb 08       	sbc	r15, r11
    20ec:	0c 09       	sbc	r16, r12
    20ee:	1d 09       	sbc	r17, r13
    20f0:	b6 95       	lsr	r27
    20f2:	a7 95       	ror	r26
    20f4:	97 95       	ror	r25
    20f6:	87 95       	ror	r24
    20f8:	ee 0c       	add	r14, r14
    20fa:	ff 1c       	adc	r15, r15
    20fc:	00 1f       	adc	r16, r16
    20fe:	11 1f       	adc	r17, r17
    2100:	6f 5f       	subi	r22, 0xFF	; 255
    2102:	7f 4f       	sbci	r23, 0xFF	; 255
    2104:	6f 31       	cpi	r22, 0x1F	; 31
    2106:	71 05       	cpc	r23, r1
    2108:	31 f7       	brne	.-52     	; 0x20d6 <__divsf3+0xda>
    210a:	da 01       	movw	r26, r20
    210c:	c9 01       	movw	r24, r18
    210e:	8f 77       	andi	r24, 0x7F	; 127
    2110:	90 70       	andi	r25, 0x00	; 0
    2112:	a0 70       	andi	r26, 0x00	; 0
    2114:	b0 70       	andi	r27, 0x00	; 0
    2116:	80 34       	cpi	r24, 0x40	; 64
    2118:	91 05       	cpc	r25, r1
    211a:	a1 05       	cpc	r26, r1
    211c:	b1 05       	cpc	r27, r1
    211e:	61 f4       	brne	.+24     	; 0x2138 <__divsf3+0x13c>
    2120:	27 fd       	sbrc	r18, 7
    2122:	0a c0       	rjmp	.+20     	; 0x2138 <__divsf3+0x13c>
    2124:	e1 14       	cp	r14, r1
    2126:	f1 04       	cpc	r15, r1
    2128:	01 05       	cpc	r16, r1
    212a:	11 05       	cpc	r17, r1
    212c:	29 f0       	breq	.+10     	; 0x2138 <__divsf3+0x13c>
    212e:	20 5c       	subi	r18, 0xC0	; 192
    2130:	3f 4f       	sbci	r19, 0xFF	; 255
    2132:	4f 4f       	sbci	r20, 0xFF	; 255
    2134:	5f 4f       	sbci	r21, 0xFF	; 255
    2136:	20 78       	andi	r18, 0x80	; 128
    2138:	2d 87       	std	Y+13, r18	; 0x0d
    213a:	3e 87       	std	Y+14, r19	; 0x0e
    213c:	4f 87       	std	Y+15, r20	; 0x0f
    213e:	58 8b       	std	Y+16, r21	; 0x10
    2140:	be 01       	movw	r22, r28
    2142:	67 5f       	subi	r22, 0xF7	; 247
    2144:	7f 4f       	sbci	r23, 0xFF	; 255
    2146:	cb 01       	movw	r24, r22
    2148:	0e 94 8e 11 	call	0x231c	; 0x231c <__pack_f>
    214c:	68 96       	adiw	r28, 0x18	; 24
    214e:	ea e0       	ldi	r30, 0x0A	; 10
    2150:	0c 94 2b 24 	jmp	0x4856	; 0x4856 <__epilogue_restores__+0x10>

00002154 <__gtsf2>:
    2154:	a8 e1       	ldi	r26, 0x18	; 24
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e0 eb       	ldi	r30, 0xB0	; 176
    215a:	f0 e1       	ldi	r31, 0x10	; 16
    215c:	0c 94 13 24 	jmp	0x4826	; 0x4826 <__prologue_saves__+0x18>
    2160:	69 83       	std	Y+1, r22	; 0x01
    2162:	7a 83       	std	Y+2, r23	; 0x02
    2164:	8b 83       	std	Y+3, r24	; 0x03
    2166:	9c 83       	std	Y+4, r25	; 0x04
    2168:	2d 83       	std	Y+5, r18	; 0x05
    216a:	3e 83       	std	Y+6, r19	; 0x06
    216c:	4f 83       	std	Y+7, r20	; 0x07
    216e:	58 87       	std	Y+8, r21	; 0x08
    2170:	89 e0       	ldi	r24, 0x09	; 9
    2172:	e8 2e       	mov	r14, r24
    2174:	f1 2c       	mov	r15, r1
    2176:	ec 0e       	add	r14, r28
    2178:	fd 1e       	adc	r15, r29
    217a:	ce 01       	movw	r24, r28
    217c:	01 96       	adiw	r24, 0x01	; 1
    217e:	b7 01       	movw	r22, r14
    2180:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    2184:	8e 01       	movw	r16, r28
    2186:	0f 5e       	subi	r16, 0xEF	; 239
    2188:	1f 4f       	sbci	r17, 0xFF	; 255
    218a:	ce 01       	movw	r24, r28
    218c:	05 96       	adiw	r24, 0x05	; 5
    218e:	b8 01       	movw	r22, r16
    2190:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	82 30       	cpi	r24, 0x02	; 2
    2198:	40 f0       	brcs	.+16     	; 0x21aa <__gtsf2+0x56>
    219a:	89 89       	ldd	r24, Y+17	; 0x11
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	28 f0       	brcs	.+10     	; 0x21aa <__gtsf2+0x56>
    21a0:	c7 01       	movw	r24, r14
    21a2:	b8 01       	movw	r22, r16
    21a4:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__fpcmp_parts_f>
    21a8:	01 c0       	rjmp	.+2      	; 0x21ac <__gtsf2+0x58>
    21aa:	8f ef       	ldi	r24, 0xFF	; 255
    21ac:	68 96       	adiw	r28, 0x18	; 24
    21ae:	e6 e0       	ldi	r30, 0x06	; 6
    21b0:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__epilogue_restores__+0x18>

000021b4 <__gesf2>:
    21b4:	a8 e1       	ldi	r26, 0x18	; 24
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e0 ee       	ldi	r30, 0xE0	; 224
    21ba:	f0 e1       	ldi	r31, 0x10	; 16
    21bc:	0c 94 13 24 	jmp	0x4826	; 0x4826 <__prologue_saves__+0x18>
    21c0:	69 83       	std	Y+1, r22	; 0x01
    21c2:	7a 83       	std	Y+2, r23	; 0x02
    21c4:	8b 83       	std	Y+3, r24	; 0x03
    21c6:	9c 83       	std	Y+4, r25	; 0x04
    21c8:	2d 83       	std	Y+5, r18	; 0x05
    21ca:	3e 83       	std	Y+6, r19	; 0x06
    21cc:	4f 83       	std	Y+7, r20	; 0x07
    21ce:	58 87       	std	Y+8, r21	; 0x08
    21d0:	89 e0       	ldi	r24, 0x09	; 9
    21d2:	e8 2e       	mov	r14, r24
    21d4:	f1 2c       	mov	r15, r1
    21d6:	ec 0e       	add	r14, r28
    21d8:	fd 1e       	adc	r15, r29
    21da:	ce 01       	movw	r24, r28
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	b7 01       	movw	r22, r14
    21e0:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    21e4:	8e 01       	movw	r16, r28
    21e6:	0f 5e       	subi	r16, 0xEF	; 239
    21e8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ea:	ce 01       	movw	r24, r28
    21ec:	05 96       	adiw	r24, 0x05	; 5
    21ee:	b8 01       	movw	r22, r16
    21f0:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	82 30       	cpi	r24, 0x02	; 2
    21f8:	40 f0       	brcs	.+16     	; 0x220a <__gesf2+0x56>
    21fa:	89 89       	ldd	r24, Y+17	; 0x11
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	28 f0       	brcs	.+10     	; 0x220a <__gesf2+0x56>
    2200:	c7 01       	movw	r24, r14
    2202:	b8 01       	movw	r22, r16
    2204:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__fpcmp_parts_f>
    2208:	01 c0       	rjmp	.+2      	; 0x220c <__gesf2+0x58>
    220a:	8f ef       	ldi	r24, 0xFF	; 255
    220c:	68 96       	adiw	r28, 0x18	; 24
    220e:	e6 e0       	ldi	r30, 0x06	; 6
    2210:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__epilogue_restores__+0x18>

00002214 <__ltsf2>:
    2214:	a8 e1       	ldi	r26, 0x18	; 24
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e0 e1       	ldi	r30, 0x10	; 16
    221a:	f1 e1       	ldi	r31, 0x11	; 17
    221c:	0c 94 13 24 	jmp	0x4826	; 0x4826 <__prologue_saves__+0x18>
    2220:	69 83       	std	Y+1, r22	; 0x01
    2222:	7a 83       	std	Y+2, r23	; 0x02
    2224:	8b 83       	std	Y+3, r24	; 0x03
    2226:	9c 83       	std	Y+4, r25	; 0x04
    2228:	2d 83       	std	Y+5, r18	; 0x05
    222a:	3e 83       	std	Y+6, r19	; 0x06
    222c:	4f 83       	std	Y+7, r20	; 0x07
    222e:	58 87       	std	Y+8, r21	; 0x08
    2230:	89 e0       	ldi	r24, 0x09	; 9
    2232:	e8 2e       	mov	r14, r24
    2234:	f1 2c       	mov	r15, r1
    2236:	ec 0e       	add	r14, r28
    2238:	fd 1e       	adc	r15, r29
    223a:	ce 01       	movw	r24, r28
    223c:	01 96       	adiw	r24, 0x01	; 1
    223e:	b7 01       	movw	r22, r14
    2240:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    2244:	8e 01       	movw	r16, r28
    2246:	0f 5e       	subi	r16, 0xEF	; 239
    2248:	1f 4f       	sbci	r17, 0xFF	; 255
    224a:	ce 01       	movw	r24, r28
    224c:	05 96       	adiw	r24, 0x05	; 5
    224e:	b8 01       	movw	r22, r16
    2250:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    2254:	89 85       	ldd	r24, Y+9	; 0x09
    2256:	82 30       	cpi	r24, 0x02	; 2
    2258:	40 f0       	brcs	.+16     	; 0x226a <__ltsf2+0x56>
    225a:	89 89       	ldd	r24, Y+17	; 0x11
    225c:	82 30       	cpi	r24, 0x02	; 2
    225e:	28 f0       	brcs	.+10     	; 0x226a <__ltsf2+0x56>
    2260:	c7 01       	movw	r24, r14
    2262:	b8 01       	movw	r22, r16
    2264:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__fpcmp_parts_f>
    2268:	01 c0       	rjmp	.+2      	; 0x226c <__ltsf2+0x58>
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	68 96       	adiw	r28, 0x18	; 24
    226e:	e6 e0       	ldi	r30, 0x06	; 6
    2270:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__epilogue_restores__+0x18>

00002274 <__fixsfsi>:
    2274:	ac e0       	ldi	r26, 0x0C	; 12
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e0 e4       	ldi	r30, 0x40	; 64
    227a:	f1 e1       	ldi	r31, 0x11	; 17
    227c:	0c 94 17 24 	jmp	0x482e	; 0x482e <__prologue_saves__+0x20>
    2280:	69 83       	std	Y+1, r22	; 0x01
    2282:	7a 83       	std	Y+2, r23	; 0x02
    2284:	8b 83       	std	Y+3, r24	; 0x03
    2286:	9c 83       	std	Y+4, r25	; 0x04
    2288:	ce 01       	movw	r24, r28
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	be 01       	movw	r22, r28
    228e:	6b 5f       	subi	r22, 0xFB	; 251
    2290:	7f 4f       	sbci	r23, 0xFF	; 255
    2292:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	82 30       	cpi	r24, 0x02	; 2
    229a:	61 f1       	breq	.+88     	; 0x22f4 <__fixsfsi+0x80>
    229c:	82 30       	cpi	r24, 0x02	; 2
    229e:	50 f1       	brcs	.+84     	; 0x22f4 <__fixsfsi+0x80>
    22a0:	84 30       	cpi	r24, 0x04	; 4
    22a2:	21 f4       	brne	.+8      	; 0x22ac <__fixsfsi+0x38>
    22a4:	8e 81       	ldd	r24, Y+6	; 0x06
    22a6:	88 23       	and	r24, r24
    22a8:	51 f1       	breq	.+84     	; 0x22fe <__fixsfsi+0x8a>
    22aa:	2e c0       	rjmp	.+92     	; 0x2308 <__fixsfsi+0x94>
    22ac:	2f 81       	ldd	r18, Y+7	; 0x07
    22ae:	38 85       	ldd	r19, Y+8	; 0x08
    22b0:	37 fd       	sbrc	r19, 7
    22b2:	20 c0       	rjmp	.+64     	; 0x22f4 <__fixsfsi+0x80>
    22b4:	6e 81       	ldd	r22, Y+6	; 0x06
    22b6:	2f 31       	cpi	r18, 0x1F	; 31
    22b8:	31 05       	cpc	r19, r1
    22ba:	1c f0       	brlt	.+6      	; 0x22c2 <__fixsfsi+0x4e>
    22bc:	66 23       	and	r22, r22
    22be:	f9 f0       	breq	.+62     	; 0x22fe <__fixsfsi+0x8a>
    22c0:	23 c0       	rjmp	.+70     	; 0x2308 <__fixsfsi+0x94>
    22c2:	8e e1       	ldi	r24, 0x1E	; 30
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	82 1b       	sub	r24, r18
    22c8:	93 0b       	sbc	r25, r19
    22ca:	29 85       	ldd	r18, Y+9	; 0x09
    22cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    22ce:	4b 85       	ldd	r20, Y+11	; 0x0b
    22d0:	5c 85       	ldd	r21, Y+12	; 0x0c
    22d2:	04 c0       	rjmp	.+8      	; 0x22dc <__fixsfsi+0x68>
    22d4:	56 95       	lsr	r21
    22d6:	47 95       	ror	r20
    22d8:	37 95       	ror	r19
    22da:	27 95       	ror	r18
    22dc:	8a 95       	dec	r24
    22de:	d2 f7       	brpl	.-12     	; 0x22d4 <__fixsfsi+0x60>
    22e0:	66 23       	and	r22, r22
    22e2:	b1 f0       	breq	.+44     	; 0x2310 <__fixsfsi+0x9c>
    22e4:	50 95       	com	r21
    22e6:	40 95       	com	r20
    22e8:	30 95       	com	r19
    22ea:	21 95       	neg	r18
    22ec:	3f 4f       	sbci	r19, 0xFF	; 255
    22ee:	4f 4f       	sbci	r20, 0xFF	; 255
    22f0:	5f 4f       	sbci	r21, 0xFF	; 255
    22f2:	0e c0       	rjmp	.+28     	; 0x2310 <__fixsfsi+0x9c>
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	50 e0       	ldi	r21, 0x00	; 0
    22fc:	09 c0       	rjmp	.+18     	; 0x2310 <__fixsfsi+0x9c>
    22fe:	2f ef       	ldi	r18, 0xFF	; 255
    2300:	3f ef       	ldi	r19, 0xFF	; 255
    2302:	4f ef       	ldi	r20, 0xFF	; 255
    2304:	5f e7       	ldi	r21, 0x7F	; 127
    2306:	04 c0       	rjmp	.+8      	; 0x2310 <__fixsfsi+0x9c>
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	50 e8       	ldi	r21, 0x80	; 128
    2310:	b9 01       	movw	r22, r18
    2312:	ca 01       	movw	r24, r20
    2314:	2c 96       	adiw	r28, 0x0c	; 12
    2316:	e2 e0       	ldi	r30, 0x02	; 2
    2318:	0c 94 33 24 	jmp	0x4866	; 0x4866 <__epilogue_restores__+0x20>

0000231c <__pack_f>:
    231c:	df 92       	push	r13
    231e:	ef 92       	push	r14
    2320:	ff 92       	push	r15
    2322:	0f 93       	push	r16
    2324:	1f 93       	push	r17
    2326:	fc 01       	movw	r30, r24
    2328:	e4 80       	ldd	r14, Z+4	; 0x04
    232a:	f5 80       	ldd	r15, Z+5	; 0x05
    232c:	06 81       	ldd	r16, Z+6	; 0x06
    232e:	17 81       	ldd	r17, Z+7	; 0x07
    2330:	d1 80       	ldd	r13, Z+1	; 0x01
    2332:	80 81       	ld	r24, Z
    2334:	82 30       	cpi	r24, 0x02	; 2
    2336:	48 f4       	brcc	.+18     	; 0x234a <__pack_f+0x2e>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a0 e1       	ldi	r26, 0x10	; 16
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e8 2a       	or	r14, r24
    2342:	f9 2a       	or	r15, r25
    2344:	0a 2b       	or	r16, r26
    2346:	1b 2b       	or	r17, r27
    2348:	a5 c0       	rjmp	.+330    	; 0x2494 <__pack_f+0x178>
    234a:	84 30       	cpi	r24, 0x04	; 4
    234c:	09 f4       	brne	.+2      	; 0x2350 <__pack_f+0x34>
    234e:	9f c0       	rjmp	.+318    	; 0x248e <__pack_f+0x172>
    2350:	82 30       	cpi	r24, 0x02	; 2
    2352:	21 f4       	brne	.+8      	; 0x235c <__pack_f+0x40>
    2354:	ee 24       	eor	r14, r14
    2356:	ff 24       	eor	r15, r15
    2358:	87 01       	movw	r16, r14
    235a:	05 c0       	rjmp	.+10     	; 0x2366 <__pack_f+0x4a>
    235c:	e1 14       	cp	r14, r1
    235e:	f1 04       	cpc	r15, r1
    2360:	01 05       	cpc	r16, r1
    2362:	11 05       	cpc	r17, r1
    2364:	19 f4       	brne	.+6      	; 0x236c <__pack_f+0x50>
    2366:	e0 e0       	ldi	r30, 0x00	; 0
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	96 c0       	rjmp	.+300    	; 0x2498 <__pack_f+0x17c>
    236c:	62 81       	ldd	r22, Z+2	; 0x02
    236e:	73 81       	ldd	r23, Z+3	; 0x03
    2370:	9f ef       	ldi	r25, 0xFF	; 255
    2372:	62 38       	cpi	r22, 0x82	; 130
    2374:	79 07       	cpc	r23, r25
    2376:	0c f0       	brlt	.+2      	; 0x237a <__pack_f+0x5e>
    2378:	5b c0       	rjmp	.+182    	; 0x2430 <__pack_f+0x114>
    237a:	22 e8       	ldi	r18, 0x82	; 130
    237c:	3f ef       	ldi	r19, 0xFF	; 255
    237e:	26 1b       	sub	r18, r22
    2380:	37 0b       	sbc	r19, r23
    2382:	2a 31       	cpi	r18, 0x1A	; 26
    2384:	31 05       	cpc	r19, r1
    2386:	2c f0       	brlt	.+10     	; 0x2392 <__pack_f+0x76>
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e0       	ldi	r20, 0x00	; 0
    238e:	50 e0       	ldi	r21, 0x00	; 0
    2390:	2a c0       	rjmp	.+84     	; 0x23e6 <__pack_f+0xca>
    2392:	b8 01       	movw	r22, r16
    2394:	a7 01       	movw	r20, r14
    2396:	02 2e       	mov	r0, r18
    2398:	04 c0       	rjmp	.+8      	; 0x23a2 <__pack_f+0x86>
    239a:	76 95       	lsr	r23
    239c:	67 95       	ror	r22
    239e:	57 95       	ror	r21
    23a0:	47 95       	ror	r20
    23a2:	0a 94       	dec	r0
    23a4:	d2 f7       	brpl	.-12     	; 0x239a <__pack_f+0x7e>
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	a0 e0       	ldi	r26, 0x00	; 0
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <__pack_f+0x9c>
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	aa 1f       	adc	r26, r26
    23b6:	bb 1f       	adc	r27, r27
    23b8:	2a 95       	dec	r18
    23ba:	d2 f7       	brpl	.-12     	; 0x23b0 <__pack_f+0x94>
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	a1 09       	sbc	r26, r1
    23c0:	b1 09       	sbc	r27, r1
    23c2:	8e 21       	and	r24, r14
    23c4:	9f 21       	and	r25, r15
    23c6:	a0 23       	and	r26, r16
    23c8:	b1 23       	and	r27, r17
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	a1 05       	cpc	r26, r1
    23ce:	b1 05       	cpc	r27, r1
    23d0:	21 f0       	breq	.+8      	; 0x23da <__pack_f+0xbe>
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	a0 e0       	ldi	r26, 0x00	; 0
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	9a 01       	movw	r18, r20
    23dc:	ab 01       	movw	r20, r22
    23de:	28 2b       	or	r18, r24
    23e0:	39 2b       	or	r19, r25
    23e2:	4a 2b       	or	r20, r26
    23e4:	5b 2b       	or	r21, r27
    23e6:	da 01       	movw	r26, r20
    23e8:	c9 01       	movw	r24, r18
    23ea:	8f 77       	andi	r24, 0x7F	; 127
    23ec:	90 70       	andi	r25, 0x00	; 0
    23ee:	a0 70       	andi	r26, 0x00	; 0
    23f0:	b0 70       	andi	r27, 0x00	; 0
    23f2:	80 34       	cpi	r24, 0x40	; 64
    23f4:	91 05       	cpc	r25, r1
    23f6:	a1 05       	cpc	r26, r1
    23f8:	b1 05       	cpc	r27, r1
    23fa:	39 f4       	brne	.+14     	; 0x240a <__pack_f+0xee>
    23fc:	27 ff       	sbrs	r18, 7
    23fe:	09 c0       	rjmp	.+18     	; 0x2412 <__pack_f+0xf6>
    2400:	20 5c       	subi	r18, 0xC0	; 192
    2402:	3f 4f       	sbci	r19, 0xFF	; 255
    2404:	4f 4f       	sbci	r20, 0xFF	; 255
    2406:	5f 4f       	sbci	r21, 0xFF	; 255
    2408:	04 c0       	rjmp	.+8      	; 0x2412 <__pack_f+0xf6>
    240a:	21 5c       	subi	r18, 0xC1	; 193
    240c:	3f 4f       	sbci	r19, 0xFF	; 255
    240e:	4f 4f       	sbci	r20, 0xFF	; 255
    2410:	5f 4f       	sbci	r21, 0xFF	; 255
    2412:	e0 e0       	ldi	r30, 0x00	; 0
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	20 30       	cpi	r18, 0x00	; 0
    2418:	a0 e0       	ldi	r26, 0x00	; 0
    241a:	3a 07       	cpc	r19, r26
    241c:	a0 e0       	ldi	r26, 0x00	; 0
    241e:	4a 07       	cpc	r20, r26
    2420:	a0 e4       	ldi	r26, 0x40	; 64
    2422:	5a 07       	cpc	r21, r26
    2424:	10 f0       	brcs	.+4      	; 0x242a <__pack_f+0x10e>
    2426:	e1 e0       	ldi	r30, 0x01	; 1
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	79 01       	movw	r14, r18
    242c:	8a 01       	movw	r16, r20
    242e:	27 c0       	rjmp	.+78     	; 0x247e <__pack_f+0x162>
    2430:	60 38       	cpi	r22, 0x80	; 128
    2432:	71 05       	cpc	r23, r1
    2434:	64 f5       	brge	.+88     	; 0x248e <__pack_f+0x172>
    2436:	fb 01       	movw	r30, r22
    2438:	e1 58       	subi	r30, 0x81	; 129
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	d8 01       	movw	r26, r16
    243e:	c7 01       	movw	r24, r14
    2440:	8f 77       	andi	r24, 0x7F	; 127
    2442:	90 70       	andi	r25, 0x00	; 0
    2444:	a0 70       	andi	r26, 0x00	; 0
    2446:	b0 70       	andi	r27, 0x00	; 0
    2448:	80 34       	cpi	r24, 0x40	; 64
    244a:	91 05       	cpc	r25, r1
    244c:	a1 05       	cpc	r26, r1
    244e:	b1 05       	cpc	r27, r1
    2450:	39 f4       	brne	.+14     	; 0x2460 <__pack_f+0x144>
    2452:	e7 fe       	sbrs	r14, 7
    2454:	0d c0       	rjmp	.+26     	; 0x2470 <__pack_f+0x154>
    2456:	80 e4       	ldi	r24, 0x40	; 64
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	a0 e0       	ldi	r26, 0x00	; 0
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	04 c0       	rjmp	.+8      	; 0x2468 <__pack_f+0x14c>
    2460:	8f e3       	ldi	r24, 0x3F	; 63
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	a0 e0       	ldi	r26, 0x00	; 0
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e8 0e       	add	r14, r24
    246a:	f9 1e       	adc	r15, r25
    246c:	0a 1f       	adc	r16, r26
    246e:	1b 1f       	adc	r17, r27
    2470:	17 ff       	sbrs	r17, 7
    2472:	05 c0       	rjmp	.+10     	; 0x247e <__pack_f+0x162>
    2474:	16 95       	lsr	r17
    2476:	07 95       	ror	r16
    2478:	f7 94       	ror	r15
    247a:	e7 94       	ror	r14
    247c:	31 96       	adiw	r30, 0x01	; 1
    247e:	87 e0       	ldi	r24, 0x07	; 7
    2480:	16 95       	lsr	r17
    2482:	07 95       	ror	r16
    2484:	f7 94       	ror	r15
    2486:	e7 94       	ror	r14
    2488:	8a 95       	dec	r24
    248a:	d1 f7       	brne	.-12     	; 0x2480 <__pack_f+0x164>
    248c:	05 c0       	rjmp	.+10     	; 0x2498 <__pack_f+0x17c>
    248e:	ee 24       	eor	r14, r14
    2490:	ff 24       	eor	r15, r15
    2492:	87 01       	movw	r16, r14
    2494:	ef ef       	ldi	r30, 0xFF	; 255
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	6e 2f       	mov	r22, r30
    249a:	67 95       	ror	r22
    249c:	66 27       	eor	r22, r22
    249e:	67 95       	ror	r22
    24a0:	90 2f       	mov	r25, r16
    24a2:	9f 77       	andi	r25, 0x7F	; 127
    24a4:	d7 94       	ror	r13
    24a6:	dd 24       	eor	r13, r13
    24a8:	d7 94       	ror	r13
    24aa:	8e 2f       	mov	r24, r30
    24ac:	86 95       	lsr	r24
    24ae:	49 2f       	mov	r20, r25
    24b0:	46 2b       	or	r20, r22
    24b2:	58 2f       	mov	r21, r24
    24b4:	5d 29       	or	r21, r13
    24b6:	b7 01       	movw	r22, r14
    24b8:	ca 01       	movw	r24, r20
    24ba:	1f 91       	pop	r17
    24bc:	0f 91       	pop	r16
    24be:	ff 90       	pop	r15
    24c0:	ef 90       	pop	r14
    24c2:	df 90       	pop	r13
    24c4:	08 95       	ret

000024c6 <__unpack_f>:
    24c6:	fc 01       	movw	r30, r24
    24c8:	db 01       	movw	r26, r22
    24ca:	40 81       	ld	r20, Z
    24cc:	51 81       	ldd	r21, Z+1	; 0x01
    24ce:	22 81       	ldd	r18, Z+2	; 0x02
    24d0:	62 2f       	mov	r22, r18
    24d2:	6f 77       	andi	r22, 0x7F	; 127
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	22 1f       	adc	r18, r18
    24d8:	22 27       	eor	r18, r18
    24da:	22 1f       	adc	r18, r18
    24dc:	93 81       	ldd	r25, Z+3	; 0x03
    24de:	89 2f       	mov	r24, r25
    24e0:	88 0f       	add	r24, r24
    24e2:	82 2b       	or	r24, r18
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	99 1f       	adc	r25, r25
    24ea:	99 27       	eor	r25, r25
    24ec:	99 1f       	adc	r25, r25
    24ee:	11 96       	adiw	r26, 0x01	; 1
    24f0:	9c 93       	st	X, r25
    24f2:	11 97       	sbiw	r26, 0x01	; 1
    24f4:	21 15       	cp	r18, r1
    24f6:	31 05       	cpc	r19, r1
    24f8:	a9 f5       	brne	.+106    	; 0x2564 <__unpack_f+0x9e>
    24fa:	41 15       	cp	r20, r1
    24fc:	51 05       	cpc	r21, r1
    24fe:	61 05       	cpc	r22, r1
    2500:	71 05       	cpc	r23, r1
    2502:	11 f4       	brne	.+4      	; 0x2508 <__unpack_f+0x42>
    2504:	82 e0       	ldi	r24, 0x02	; 2
    2506:	37 c0       	rjmp	.+110    	; 0x2576 <__unpack_f+0xb0>
    2508:	82 e8       	ldi	r24, 0x82	; 130
    250a:	9f ef       	ldi	r25, 0xFF	; 255
    250c:	13 96       	adiw	r26, 0x03	; 3
    250e:	9c 93       	st	X, r25
    2510:	8e 93       	st	-X, r24
    2512:	12 97       	sbiw	r26, 0x02	; 2
    2514:	9a 01       	movw	r18, r20
    2516:	ab 01       	movw	r20, r22
    2518:	67 e0       	ldi	r22, 0x07	; 7
    251a:	22 0f       	add	r18, r18
    251c:	33 1f       	adc	r19, r19
    251e:	44 1f       	adc	r20, r20
    2520:	55 1f       	adc	r21, r21
    2522:	6a 95       	dec	r22
    2524:	d1 f7       	brne	.-12     	; 0x251a <__unpack_f+0x54>
    2526:	83 e0       	ldi	r24, 0x03	; 3
    2528:	8c 93       	st	X, r24
    252a:	0d c0       	rjmp	.+26     	; 0x2546 <__unpack_f+0x80>
    252c:	22 0f       	add	r18, r18
    252e:	33 1f       	adc	r19, r19
    2530:	44 1f       	adc	r20, r20
    2532:	55 1f       	adc	r21, r21
    2534:	12 96       	adiw	r26, 0x02	; 2
    2536:	8d 91       	ld	r24, X+
    2538:	9c 91       	ld	r25, X
    253a:	13 97       	sbiw	r26, 0x03	; 3
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	13 96       	adiw	r26, 0x03	; 3
    2540:	9c 93       	st	X, r25
    2542:	8e 93       	st	-X, r24
    2544:	12 97       	sbiw	r26, 0x02	; 2
    2546:	20 30       	cpi	r18, 0x00	; 0
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	38 07       	cpc	r19, r24
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	48 07       	cpc	r20, r24
    2550:	80 e4       	ldi	r24, 0x40	; 64
    2552:	58 07       	cpc	r21, r24
    2554:	58 f3       	brcs	.-42     	; 0x252c <__unpack_f+0x66>
    2556:	14 96       	adiw	r26, 0x04	; 4
    2558:	2d 93       	st	X+, r18
    255a:	3d 93       	st	X+, r19
    255c:	4d 93       	st	X+, r20
    255e:	5c 93       	st	X, r21
    2560:	17 97       	sbiw	r26, 0x07	; 7
    2562:	08 95       	ret
    2564:	2f 3f       	cpi	r18, 0xFF	; 255
    2566:	31 05       	cpc	r19, r1
    2568:	79 f4       	brne	.+30     	; 0x2588 <__unpack_f+0xc2>
    256a:	41 15       	cp	r20, r1
    256c:	51 05       	cpc	r21, r1
    256e:	61 05       	cpc	r22, r1
    2570:	71 05       	cpc	r23, r1
    2572:	19 f4       	brne	.+6      	; 0x257a <__unpack_f+0xb4>
    2574:	84 e0       	ldi	r24, 0x04	; 4
    2576:	8c 93       	st	X, r24
    2578:	08 95       	ret
    257a:	64 ff       	sbrs	r22, 4
    257c:	03 c0       	rjmp	.+6      	; 0x2584 <__unpack_f+0xbe>
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	8c 93       	st	X, r24
    2582:	12 c0       	rjmp	.+36     	; 0x25a8 <__unpack_f+0xe2>
    2584:	1c 92       	st	X, r1
    2586:	10 c0       	rjmp	.+32     	; 0x25a8 <__unpack_f+0xe2>
    2588:	2f 57       	subi	r18, 0x7F	; 127
    258a:	30 40       	sbci	r19, 0x00	; 0
    258c:	13 96       	adiw	r26, 0x03	; 3
    258e:	3c 93       	st	X, r19
    2590:	2e 93       	st	-X, r18
    2592:	12 97       	sbiw	r26, 0x02	; 2
    2594:	83 e0       	ldi	r24, 0x03	; 3
    2596:	8c 93       	st	X, r24
    2598:	87 e0       	ldi	r24, 0x07	; 7
    259a:	44 0f       	add	r20, r20
    259c:	55 1f       	adc	r21, r21
    259e:	66 1f       	adc	r22, r22
    25a0:	77 1f       	adc	r23, r23
    25a2:	8a 95       	dec	r24
    25a4:	d1 f7       	brne	.-12     	; 0x259a <__unpack_f+0xd4>
    25a6:	70 64       	ori	r23, 0x40	; 64
    25a8:	14 96       	adiw	r26, 0x04	; 4
    25aa:	4d 93       	st	X+, r20
    25ac:	5d 93       	st	X+, r21
    25ae:	6d 93       	st	X+, r22
    25b0:	7c 93       	st	X, r23
    25b2:	17 97       	sbiw	r26, 0x07	; 7
    25b4:	08 95       	ret

000025b6 <__fpcmp_parts_f>:
    25b6:	1f 93       	push	r17
    25b8:	dc 01       	movw	r26, r24
    25ba:	fb 01       	movw	r30, r22
    25bc:	9c 91       	ld	r25, X
    25be:	92 30       	cpi	r25, 0x02	; 2
    25c0:	08 f4       	brcc	.+2      	; 0x25c4 <__fpcmp_parts_f+0xe>
    25c2:	47 c0       	rjmp	.+142    	; 0x2652 <__fpcmp_parts_f+0x9c>
    25c4:	80 81       	ld	r24, Z
    25c6:	82 30       	cpi	r24, 0x02	; 2
    25c8:	08 f4       	brcc	.+2      	; 0x25cc <__fpcmp_parts_f+0x16>
    25ca:	43 c0       	rjmp	.+134    	; 0x2652 <__fpcmp_parts_f+0x9c>
    25cc:	94 30       	cpi	r25, 0x04	; 4
    25ce:	51 f4       	brne	.+20     	; 0x25e4 <__fpcmp_parts_f+0x2e>
    25d0:	11 96       	adiw	r26, 0x01	; 1
    25d2:	1c 91       	ld	r17, X
    25d4:	84 30       	cpi	r24, 0x04	; 4
    25d6:	99 f5       	brne	.+102    	; 0x263e <__fpcmp_parts_f+0x88>
    25d8:	81 81       	ldd	r24, Z+1	; 0x01
    25da:	68 2f       	mov	r22, r24
    25dc:	70 e0       	ldi	r23, 0x00	; 0
    25de:	61 1b       	sub	r22, r17
    25e0:	71 09       	sbc	r23, r1
    25e2:	3f c0       	rjmp	.+126    	; 0x2662 <__fpcmp_parts_f+0xac>
    25e4:	84 30       	cpi	r24, 0x04	; 4
    25e6:	21 f0       	breq	.+8      	; 0x25f0 <__fpcmp_parts_f+0x3a>
    25e8:	92 30       	cpi	r25, 0x02	; 2
    25ea:	31 f4       	brne	.+12     	; 0x25f8 <__fpcmp_parts_f+0x42>
    25ec:	82 30       	cpi	r24, 0x02	; 2
    25ee:	b9 f1       	breq	.+110    	; 0x265e <__fpcmp_parts_f+0xa8>
    25f0:	81 81       	ldd	r24, Z+1	; 0x01
    25f2:	88 23       	and	r24, r24
    25f4:	89 f1       	breq	.+98     	; 0x2658 <__fpcmp_parts_f+0xa2>
    25f6:	2d c0       	rjmp	.+90     	; 0x2652 <__fpcmp_parts_f+0x9c>
    25f8:	11 96       	adiw	r26, 0x01	; 1
    25fa:	1c 91       	ld	r17, X
    25fc:	11 97       	sbiw	r26, 0x01	; 1
    25fe:	82 30       	cpi	r24, 0x02	; 2
    2600:	f1 f0       	breq	.+60     	; 0x263e <__fpcmp_parts_f+0x88>
    2602:	81 81       	ldd	r24, Z+1	; 0x01
    2604:	18 17       	cp	r17, r24
    2606:	d9 f4       	brne	.+54     	; 0x263e <__fpcmp_parts_f+0x88>
    2608:	12 96       	adiw	r26, 0x02	; 2
    260a:	2d 91       	ld	r18, X+
    260c:	3c 91       	ld	r19, X
    260e:	13 97       	sbiw	r26, 0x03	; 3
    2610:	82 81       	ldd	r24, Z+2	; 0x02
    2612:	93 81       	ldd	r25, Z+3	; 0x03
    2614:	82 17       	cp	r24, r18
    2616:	93 07       	cpc	r25, r19
    2618:	94 f0       	brlt	.+36     	; 0x263e <__fpcmp_parts_f+0x88>
    261a:	28 17       	cp	r18, r24
    261c:	39 07       	cpc	r19, r25
    261e:	bc f0       	brlt	.+46     	; 0x264e <__fpcmp_parts_f+0x98>
    2620:	14 96       	adiw	r26, 0x04	; 4
    2622:	8d 91       	ld	r24, X+
    2624:	9d 91       	ld	r25, X+
    2626:	0d 90       	ld	r0, X+
    2628:	bc 91       	ld	r27, X
    262a:	a0 2d       	mov	r26, r0
    262c:	24 81       	ldd	r18, Z+4	; 0x04
    262e:	35 81       	ldd	r19, Z+5	; 0x05
    2630:	46 81       	ldd	r20, Z+6	; 0x06
    2632:	57 81       	ldd	r21, Z+7	; 0x07
    2634:	28 17       	cp	r18, r24
    2636:	39 07       	cpc	r19, r25
    2638:	4a 07       	cpc	r20, r26
    263a:	5b 07       	cpc	r21, r27
    263c:	18 f4       	brcc	.+6      	; 0x2644 <__fpcmp_parts_f+0x8e>
    263e:	11 23       	and	r17, r17
    2640:	41 f0       	breq	.+16     	; 0x2652 <__fpcmp_parts_f+0x9c>
    2642:	0a c0       	rjmp	.+20     	; 0x2658 <__fpcmp_parts_f+0xa2>
    2644:	82 17       	cp	r24, r18
    2646:	93 07       	cpc	r25, r19
    2648:	a4 07       	cpc	r26, r20
    264a:	b5 07       	cpc	r27, r21
    264c:	40 f4       	brcc	.+16     	; 0x265e <__fpcmp_parts_f+0xa8>
    264e:	11 23       	and	r17, r17
    2650:	19 f0       	breq	.+6      	; 0x2658 <__fpcmp_parts_f+0xa2>
    2652:	61 e0       	ldi	r22, 0x01	; 1
    2654:	70 e0       	ldi	r23, 0x00	; 0
    2656:	05 c0       	rjmp	.+10     	; 0x2662 <__fpcmp_parts_f+0xac>
    2658:	6f ef       	ldi	r22, 0xFF	; 255
    265a:	7f ef       	ldi	r23, 0xFF	; 255
    265c:	02 c0       	rjmp	.+4      	; 0x2662 <__fpcmp_parts_f+0xac>
    265e:	60 e0       	ldi	r22, 0x00	; 0
    2660:	70 e0       	ldi	r23, 0x00	; 0
    2662:	cb 01       	movw	r24, r22
    2664:	1f 91       	pop	r17
    2666:	08 95       	ret

00002668 <DIO_WritePin>:


#include"DIO.h"

void DIO_WritePin(uint8 PinNum , uint8 PinValue)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	00 d0       	rcall	.+0      	; 0x266e <DIO_WritePin+0x6>
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
    2672:	89 83       	std	Y+1, r24	; 0x01
    2674:	6a 83       	std	Y+2, r22	; 0x02
	if(PinValue)
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	88 23       	and	r24, r24
    267a:	09 f4       	brne	.+2      	; 0x267e <DIO_WritePin+0x16>
    267c:	70 c0       	rjmp	.+224    	; 0x275e <DIO_WritePin+0xf6>
		{
			if((PinNum >= 0) && (PinNum <= 7)){
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	88 30       	cpi	r24, 0x08	; 8
    2682:	a0 f4       	brcc	.+40     	; 0x26ac <DIO_WritePin+0x44>
				Set_Bit(PORTA,PinNum);}
    2684:	ab e3       	ldi	r26, 0x3B	; 59
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	eb e3       	ldi	r30, 0x3B	; 59
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	48 2f       	mov	r20, r24
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	02 2e       	mov	r0, r18
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <DIO_WritePin+0x3a>
    269e:	88 0f       	add	r24, r24
    26a0:	99 1f       	adc	r25, r25
    26a2:	0a 94       	dec	r0
    26a4:	e2 f7       	brpl	.-8      	; 0x269e <DIO_WritePin+0x36>
    26a6:	84 2b       	or	r24, r20
    26a8:	8c 93       	st	X, r24
    26aa:	ce c0       	rjmp	.+412    	; 0x2848 <DIO_WritePin+0x1e0>
				else if((PinNum >= 8) && (PinNum <= 15)){
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	88 30       	cpi	r24, 0x08	; 8
    26b0:	d0 f0       	brcs	.+52     	; 0x26e6 <DIO_WritePin+0x7e>
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	80 31       	cpi	r24, 0x10	; 16
    26b6:	b8 f4       	brcc	.+46     	; 0x26e6 <DIO_WritePin+0x7e>
				Set_Bit(PORTB,(PinNum-8));}
    26b8:	a8 e3       	ldi	r26, 0x38	; 56
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e8 e3       	ldi	r30, 0x38	; 56
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	48 2f       	mov	r20, r24
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	88 2f       	mov	r24, r24
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	9c 01       	movw	r18, r24
    26cc:	28 50       	subi	r18, 0x08	; 8
    26ce:	30 40       	sbci	r19, 0x00	; 0
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	02 2e       	mov	r0, r18
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <DIO_WritePin+0x74>
    26d8:	88 0f       	add	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	0a 94       	dec	r0
    26de:	e2 f7       	brpl	.-8      	; 0x26d8 <DIO_WritePin+0x70>
    26e0:	84 2b       	or	r24, r20
    26e2:	8c 93       	st	X, r24
    26e4:	b1 c0       	rjmp	.+354    	; 0x2848 <DIO_WritePin+0x1e0>
				else if((PinNum >= 16) && (PinNum <= 23)){
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	80 31       	cpi	r24, 0x10	; 16
    26ea:	d0 f0       	brcs	.+52     	; 0x2720 <DIO_WritePin+0xb8>
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	88 31       	cpi	r24, 0x18	; 24
    26f0:	b8 f4       	brcc	.+46     	; 0x2720 <DIO_WritePin+0xb8>
				Set_Bit(PORTC,(PinNum-16));}
    26f2:	a5 e3       	ldi	r26, 0x35	; 53
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	e5 e3       	ldi	r30, 0x35	; 53
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	48 2f       	mov	r20, r24
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	88 2f       	mov	r24, r24
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	9c 01       	movw	r18, r24
    2706:	20 51       	subi	r18, 0x10	; 16
    2708:	30 40       	sbci	r19, 0x00	; 0
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	02 2e       	mov	r0, r18
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <DIO_WritePin+0xae>
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	0a 94       	dec	r0
    2718:	e2 f7       	brpl	.-8      	; 0x2712 <DIO_WritePin+0xaa>
    271a:	84 2b       	or	r24, r20
    271c:	8c 93       	st	X, r24
    271e:	94 c0       	rjmp	.+296    	; 0x2848 <DIO_WritePin+0x1e0>
				else if((PinNum >= 24) && (PinNum <= 31)){
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	88 31       	cpi	r24, 0x18	; 24
    2724:	08 f4       	brcc	.+2      	; 0x2728 <DIO_WritePin+0xc0>
    2726:	90 c0       	rjmp	.+288    	; 0x2848 <DIO_WritePin+0x1e0>
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	80 32       	cpi	r24, 0x20	; 32
    272c:	08 f0       	brcs	.+2      	; 0x2730 <DIO_WritePin+0xc8>
    272e:	8c c0       	rjmp	.+280    	; 0x2848 <DIO_WritePin+0x1e0>
				Set_Bit(PORTD,(PinNum-24));}
    2730:	a2 e3       	ldi	r26, 0x32	; 50
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	e2 e3       	ldi	r30, 0x32	; 50
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	48 2f       	mov	r20, r24
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	88 2f       	mov	r24, r24
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	9c 01       	movw	r18, r24
    2744:	28 51       	subi	r18, 0x18	; 24
    2746:	30 40       	sbci	r19, 0x00	; 0
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	02 2e       	mov	r0, r18
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <DIO_WritePin+0xec>
    2750:	88 0f       	add	r24, r24
    2752:	99 1f       	adc	r25, r25
    2754:	0a 94       	dec	r0
    2756:	e2 f7       	brpl	.-8      	; 0x2750 <DIO_WritePin+0xe8>
    2758:	84 2b       	or	r24, r20
    275a:	8c 93       	st	X, r24
    275c:	75 c0       	rjmp	.+234    	; 0x2848 <DIO_WritePin+0x1e0>
		}

		else if(!(PinValue))
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	88 23       	and	r24, r24
    2762:	09 f0       	breq	.+2      	; 0x2766 <DIO_WritePin+0xfe>
    2764:	71 c0       	rjmp	.+226    	; 0x2848 <DIO_WritePin+0x1e0>
		{
			if((PinNum >= 0) && (PinNum <= 7)){
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	88 30       	cpi	r24, 0x08	; 8
    276a:	a8 f4       	brcc	.+42     	; 0x2796 <DIO_WritePin+0x12e>
				Clear_Bit(PORTA,PinNum);}
    276c:	ab e3       	ldi	r26, 0x3B	; 59
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	eb e3       	ldi	r30, 0x3B	; 59
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	48 2f       	mov	r20, r24
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	28 2f       	mov	r18, r24
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	02 2e       	mov	r0, r18
    2784:	02 c0       	rjmp	.+4      	; 0x278a <DIO_WritePin+0x122>
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	0a 94       	dec	r0
    278c:	e2 f7       	brpl	.-8      	; 0x2786 <DIO_WritePin+0x11e>
    278e:	80 95       	com	r24
    2790:	84 23       	and	r24, r20
    2792:	8c 93       	st	X, r24
    2794:	59 c0       	rjmp	.+178    	; 0x2848 <DIO_WritePin+0x1e0>
			else if((PinNum >= 8) && (PinNum <= 15)){
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	88 30       	cpi	r24, 0x08	; 8
    279a:	d8 f0       	brcs	.+54     	; 0x27d2 <DIO_WritePin+0x16a>
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	80 31       	cpi	r24, 0x10	; 16
    27a0:	c0 f4       	brcc	.+48     	; 0x27d2 <DIO_WritePin+0x16a>
				Clear_Bit(PORTB,(PinNum-8));}
    27a2:	a8 e3       	ldi	r26, 0x38	; 56
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e8 e3       	ldi	r30, 0x38	; 56
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	48 2f       	mov	r20, r24
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	88 2f       	mov	r24, r24
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	9c 01       	movw	r18, r24
    27b6:	28 50       	subi	r18, 0x08	; 8
    27b8:	30 40       	sbci	r19, 0x00	; 0
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	02 2e       	mov	r0, r18
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <DIO_WritePin+0x15e>
    27c2:	88 0f       	add	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	0a 94       	dec	r0
    27c8:	e2 f7       	brpl	.-8      	; 0x27c2 <DIO_WritePin+0x15a>
    27ca:	80 95       	com	r24
    27cc:	84 23       	and	r24, r20
    27ce:	8c 93       	st	X, r24
    27d0:	3b c0       	rjmp	.+118    	; 0x2848 <DIO_WritePin+0x1e0>
			else if((PinNum >= 16) && (PinNum <= 23)){
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	80 31       	cpi	r24, 0x10	; 16
    27d6:	d8 f0       	brcs	.+54     	; 0x280e <DIO_WritePin+0x1a6>
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	88 31       	cpi	r24, 0x18	; 24
    27dc:	c0 f4       	brcc	.+48     	; 0x280e <DIO_WritePin+0x1a6>
				Clear_Bit(PORTC,(PinNum-16));}
    27de:	a5 e3       	ldi	r26, 0x35	; 53
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e5 e3       	ldi	r30, 0x35	; 53
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	48 2f       	mov	r20, r24
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9c 01       	movw	r18, r24
    27f2:	20 51       	subi	r18, 0x10	; 16
    27f4:	30 40       	sbci	r19, 0x00	; 0
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	02 2e       	mov	r0, r18
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <DIO_WritePin+0x19a>
    27fe:	88 0f       	add	r24, r24
    2800:	99 1f       	adc	r25, r25
    2802:	0a 94       	dec	r0
    2804:	e2 f7       	brpl	.-8      	; 0x27fe <DIO_WritePin+0x196>
    2806:	80 95       	com	r24
    2808:	84 23       	and	r24, r20
    280a:	8c 93       	st	X, r24
    280c:	1d c0       	rjmp	.+58     	; 0x2848 <DIO_WritePin+0x1e0>
			else if((PinNum >= 24) && (PinNum <= 31)){
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	88 31       	cpi	r24, 0x18	; 24
    2812:	d0 f0       	brcs	.+52     	; 0x2848 <DIO_WritePin+0x1e0>
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	80 32       	cpi	r24, 0x20	; 32
    2818:	b8 f4       	brcc	.+46     	; 0x2848 <DIO_WritePin+0x1e0>
				Clear_Bit(PORTD,(PinNum-24));}
    281a:	a2 e3       	ldi	r26, 0x32	; 50
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	e2 e3       	ldi	r30, 0x32	; 50
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	48 2f       	mov	r20, r24
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	88 2f       	mov	r24, r24
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9c 01       	movw	r18, r24
    282e:	28 51       	subi	r18, 0x18	; 24
    2830:	30 40       	sbci	r19, 0x00	; 0
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	02 2e       	mov	r0, r18
    2838:	02 c0       	rjmp	.+4      	; 0x283e <DIO_WritePin+0x1d6>
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	0a 94       	dec	r0
    2840:	e2 f7       	brpl	.-8      	; 0x283a <DIO_WritePin+0x1d2>
    2842:	80 95       	com	r24
    2844:	84 23       	and	r24, r20
    2846:	8c 93       	st	X, r24
		}
}
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <DIO_ReadPin>:


uint8 DIO_ReadPin(uint8 PinNum)
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	00 d0       	rcall	.+0      	; 0x2858 <DIO_ReadPin+0x6>
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PinValue=0;
    285e:	19 82       	std	Y+1, r1	; 0x01


	if((PinNum >= 0) && (PinNum <= 7)){
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	88 30       	cpi	r24, 0x08	; 8
    2864:	90 f4       	brcc	.+36     	; 0x288a <DIO_ReadPin+0x38>
		PinValue = Get_Bit(PINA,PinNum);}
    2866:	e9 e3       	ldi	r30, 0x39	; 57
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	28 2f       	mov	r18, r24
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	8a 81       	ldd	r24, Y+2	; 0x02
    2872:	88 2f       	mov	r24, r24
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	a9 01       	movw	r20, r18
    2878:	02 c0       	rjmp	.+4      	; 0x287e <DIO_ReadPin+0x2c>
    287a:	55 95       	asr	r21
    287c:	47 95       	ror	r20
    287e:	8a 95       	dec	r24
    2880:	e2 f7       	brpl	.-8      	; 0x287a <DIO_ReadPin+0x28>
    2882:	ca 01       	movw	r24, r20
    2884:	81 70       	andi	r24, 0x01	; 1
    2886:	89 83       	std	Y+1, r24	; 0x01
    2888:	4a c0       	rjmp	.+148    	; 0x291e <DIO_ReadPin+0xcc>
	else if((PinNum >= 8) && (PinNum <= 15)){
    288a:	8a 81       	ldd	r24, Y+2	; 0x02
    288c:	88 30       	cpi	r24, 0x08	; 8
    288e:	b0 f0       	brcs	.+44     	; 0x28bc <DIO_ReadPin+0x6a>
    2890:	8a 81       	ldd	r24, Y+2	; 0x02
    2892:	80 31       	cpi	r24, 0x10	; 16
    2894:	98 f4       	brcc	.+38     	; 0x28bc <DIO_ReadPin+0x6a>
		PinValue = Get_Bit(PINB,(PinNum-8));}
    2896:	e6 e3       	ldi	r30, 0x36	; 54
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	80 81       	ld	r24, Z
    289c:	28 2f       	mov	r18, r24
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	8a 81       	ldd	r24, Y+2	; 0x02
    28a2:	88 2f       	mov	r24, r24
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	08 97       	sbiw	r24, 0x08	; 8
    28a8:	a9 01       	movw	r20, r18
    28aa:	02 c0       	rjmp	.+4      	; 0x28b0 <DIO_ReadPin+0x5e>
    28ac:	55 95       	asr	r21
    28ae:	47 95       	ror	r20
    28b0:	8a 95       	dec	r24
    28b2:	e2 f7       	brpl	.-8      	; 0x28ac <DIO_ReadPin+0x5a>
    28b4:	ca 01       	movw	r24, r20
    28b6:	81 70       	andi	r24, 0x01	; 1
    28b8:	89 83       	std	Y+1, r24	; 0x01
    28ba:	31 c0       	rjmp	.+98     	; 0x291e <DIO_ReadPin+0xcc>
	else if((PinNum >= 16) && (PinNum <= 23)){
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	80 31       	cpi	r24, 0x10	; 16
    28c0:	b0 f0       	brcs	.+44     	; 0x28ee <DIO_ReadPin+0x9c>
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	88 31       	cpi	r24, 0x18	; 24
    28c6:	98 f4       	brcc	.+38     	; 0x28ee <DIO_ReadPin+0x9c>
		PinValue = Get_Bit(PINC,(PinNum-16));}
    28c8:	e3 e3       	ldi	r30, 0x33	; 51
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	28 2f       	mov	r18, r24
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	88 2f       	mov	r24, r24
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	40 97       	sbiw	r24, 0x10	; 16
    28da:	a9 01       	movw	r20, r18
    28dc:	02 c0       	rjmp	.+4      	; 0x28e2 <DIO_ReadPin+0x90>
    28de:	55 95       	asr	r21
    28e0:	47 95       	ror	r20
    28e2:	8a 95       	dec	r24
    28e4:	e2 f7       	brpl	.-8      	; 0x28de <DIO_ReadPin+0x8c>
    28e6:	ca 01       	movw	r24, r20
    28e8:	81 70       	andi	r24, 0x01	; 1
    28ea:	89 83       	std	Y+1, r24	; 0x01
    28ec:	18 c0       	rjmp	.+48     	; 0x291e <DIO_ReadPin+0xcc>
	else if((PinNum >= 24) && (PinNum <= 31)){
    28ee:	8a 81       	ldd	r24, Y+2	; 0x02
    28f0:	88 31       	cpi	r24, 0x18	; 24
    28f2:	a8 f0       	brcs	.+42     	; 0x291e <DIO_ReadPin+0xcc>
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	80 32       	cpi	r24, 0x20	; 32
    28f8:	90 f4       	brcc	.+36     	; 0x291e <DIO_ReadPin+0xcc>
		PinValue = Get_Bit(PIND,(PinNum-24));}
    28fa:	e0 e3       	ldi	r30, 0x30	; 48
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	28 2f       	mov	r18, r24
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	8a 81       	ldd	r24, Y+2	; 0x02
    2906:	88 2f       	mov	r24, r24
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	48 97       	sbiw	r24, 0x18	; 24
    290c:	a9 01       	movw	r20, r18
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <DIO_ReadPin+0xc2>
    2910:	55 95       	asr	r21
    2912:	47 95       	ror	r20
    2914:	8a 95       	dec	r24
    2916:	e2 f7       	brpl	.-8      	; 0x2910 <DIO_ReadPin+0xbe>
    2918:	ca 01       	movw	r24, r20
    291a:	81 70       	andi	r24, 0x01	; 1
    291c:	89 83       	std	Y+1, r24	; 0x01

	return PinValue;
    291e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <DIO_SetPinDirection>:


void DIO_SetPinDirection(uint8 PinNum,tPortDir PinDirection)
{
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	00 d0       	rcall	.+0      	; 0x2930 <DIO_SetPinDirection+0x6>
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	89 83       	std	Y+1, r24	; 0x01
    2936:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection)
    2938:	8a 81       	ldd	r24, Y+2	; 0x02
    293a:	88 23       	and	r24, r24
    293c:	09 f4       	brne	.+2      	; 0x2940 <DIO_SetPinDirection+0x16>
    293e:	70 c0       	rjmp	.+224    	; 0x2a20 <DIO_SetPinDirection+0xf6>
	{
		if((PinNum >= 0) && (PinNum <= 7)){
    2940:	89 81       	ldd	r24, Y+1	; 0x01
    2942:	88 30       	cpi	r24, 0x08	; 8
    2944:	a0 f4       	brcc	.+40     	; 0x296e <DIO_SetPinDirection+0x44>
			Set_Bit(DDRA,PinNum);}
    2946:	aa e3       	ldi	r26, 0x3A	; 58
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	ea e3       	ldi	r30, 0x3A	; 58
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	48 2f       	mov	r20, r24
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	28 2f       	mov	r18, r24
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	02 2e       	mov	r0, r18
    295e:	02 c0       	rjmp	.+4      	; 0x2964 <DIO_SetPinDirection+0x3a>
    2960:	88 0f       	add	r24, r24
    2962:	99 1f       	adc	r25, r25
    2964:	0a 94       	dec	r0
    2966:	e2 f7       	brpl	.-8      	; 0x2960 <DIO_SetPinDirection+0x36>
    2968:	84 2b       	or	r24, r20
    296a:	8c 93       	st	X, r24
    296c:	ce c0       	rjmp	.+412    	; 0x2b0a <DIO_SetPinDirection+0x1e0>
			else if((PinNum >= 8) && (PinNum <= 15)){
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	88 30       	cpi	r24, 0x08	; 8
    2972:	d0 f0       	brcs	.+52     	; 0x29a8 <DIO_SetPinDirection+0x7e>
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	80 31       	cpi	r24, 0x10	; 16
    2978:	b8 f4       	brcc	.+46     	; 0x29a8 <DIO_SetPinDirection+0x7e>
			Set_Bit(DDRB,(PinNum-8));}
    297a:	a7 e3       	ldi	r26, 0x37	; 55
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	e7 e3       	ldi	r30, 0x37	; 55
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	48 2f       	mov	r20, r24
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	88 2f       	mov	r24, r24
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	9c 01       	movw	r18, r24
    298e:	28 50       	subi	r18, 0x08	; 8
    2990:	30 40       	sbci	r19, 0x00	; 0
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	02 2e       	mov	r0, r18
    2998:	02 c0       	rjmp	.+4      	; 0x299e <DIO_SetPinDirection+0x74>
    299a:	88 0f       	add	r24, r24
    299c:	99 1f       	adc	r25, r25
    299e:	0a 94       	dec	r0
    29a0:	e2 f7       	brpl	.-8      	; 0x299a <DIO_SetPinDirection+0x70>
    29a2:	84 2b       	or	r24, r20
    29a4:	8c 93       	st	X, r24
    29a6:	b1 c0       	rjmp	.+354    	; 0x2b0a <DIO_SetPinDirection+0x1e0>
			else if((PinNum >= 16) && (PinNum <= 23)){
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	80 31       	cpi	r24, 0x10	; 16
    29ac:	d0 f0       	brcs	.+52     	; 0x29e2 <DIO_SetPinDirection+0xb8>
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	88 31       	cpi	r24, 0x18	; 24
    29b2:	b8 f4       	brcc	.+46     	; 0x29e2 <DIO_SetPinDirection+0xb8>
			Set_Bit(DDRC,(PinNum-16));}
    29b4:	a4 e3       	ldi	r26, 0x34	; 52
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	e4 e3       	ldi	r30, 0x34	; 52
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	48 2f       	mov	r20, r24
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	88 2f       	mov	r24, r24
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	9c 01       	movw	r18, r24
    29c8:	20 51       	subi	r18, 0x10	; 16
    29ca:	30 40       	sbci	r19, 0x00	; 0
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	02 2e       	mov	r0, r18
    29d2:	02 c0       	rjmp	.+4      	; 0x29d8 <DIO_SetPinDirection+0xae>
    29d4:	88 0f       	add	r24, r24
    29d6:	99 1f       	adc	r25, r25
    29d8:	0a 94       	dec	r0
    29da:	e2 f7       	brpl	.-8      	; 0x29d4 <DIO_SetPinDirection+0xaa>
    29dc:	84 2b       	or	r24, r20
    29de:	8c 93       	st	X, r24
    29e0:	94 c0       	rjmp	.+296    	; 0x2b0a <DIO_SetPinDirection+0x1e0>
			else if((PinNum >= 24) && (PinNum <= 31)){
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	88 31       	cpi	r24, 0x18	; 24
    29e6:	08 f4       	brcc	.+2      	; 0x29ea <DIO_SetPinDirection+0xc0>
    29e8:	90 c0       	rjmp	.+288    	; 0x2b0a <DIO_SetPinDirection+0x1e0>
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	80 32       	cpi	r24, 0x20	; 32
    29ee:	08 f0       	brcs	.+2      	; 0x29f2 <DIO_SetPinDirection+0xc8>
    29f0:	8c c0       	rjmp	.+280    	; 0x2b0a <DIO_SetPinDirection+0x1e0>
			Set_Bit(DDRD,(PinNum-24));}
    29f2:	a1 e3       	ldi	r26, 0x31	; 49
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	e1 e3       	ldi	r30, 0x31	; 49
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	48 2f       	mov	r20, r24
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	88 2f       	mov	r24, r24
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	9c 01       	movw	r18, r24
    2a06:	28 51       	subi	r18, 0x18	; 24
    2a08:	30 40       	sbci	r19, 0x00	; 0
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	02 2e       	mov	r0, r18
    2a10:	02 c0       	rjmp	.+4      	; 0x2a16 <DIO_SetPinDirection+0xec>
    2a12:	88 0f       	add	r24, r24
    2a14:	99 1f       	adc	r25, r25
    2a16:	0a 94       	dec	r0
    2a18:	e2 f7       	brpl	.-8      	; 0x2a12 <DIO_SetPinDirection+0xe8>
    2a1a:	84 2b       	or	r24, r20
    2a1c:	8c 93       	st	X, r24
    2a1e:	75 c0       	rjmp	.+234    	; 0x2b0a <DIO_SetPinDirection+0x1e0>
	}

	else if(PinDirection == 0)
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	88 23       	and	r24, r24
    2a24:	09 f0       	breq	.+2      	; 0x2a28 <DIO_SetPinDirection+0xfe>
    2a26:	71 c0       	rjmp	.+226    	; 0x2b0a <DIO_SetPinDirection+0x1e0>
	{
		if((PinNum >= 0) && (PinNum <= 7)){
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	88 30       	cpi	r24, 0x08	; 8
    2a2c:	a8 f4       	brcc	.+42     	; 0x2a58 <DIO_SetPinDirection+0x12e>
			Clear_Bit(DDRA,PinNum);}
    2a2e:	aa e3       	ldi	r26, 0x3A	; 58
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	ea e3       	ldi	r30, 0x3A	; 58
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	48 2f       	mov	r20, r24
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	28 2f       	mov	r18, r24
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	02 2e       	mov	r0, r18
    2a46:	02 c0       	rjmp	.+4      	; 0x2a4c <DIO_SetPinDirection+0x122>
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	0a 94       	dec	r0
    2a4e:	e2 f7       	brpl	.-8      	; 0x2a48 <DIO_SetPinDirection+0x11e>
    2a50:	80 95       	com	r24
    2a52:	84 23       	and	r24, r20
    2a54:	8c 93       	st	X, r24
    2a56:	59 c0       	rjmp	.+178    	; 0x2b0a <DIO_SetPinDirection+0x1e0>
		else if((PinNum >= 8) && (PinNum <= 15)){
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	88 30       	cpi	r24, 0x08	; 8
    2a5c:	d8 f0       	brcs	.+54     	; 0x2a94 <DIO_SetPinDirection+0x16a>
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	80 31       	cpi	r24, 0x10	; 16
    2a62:	c0 f4       	brcc	.+48     	; 0x2a94 <DIO_SetPinDirection+0x16a>
			Clear_Bit(DDRB,(PinNum-8));}
    2a64:	a7 e3       	ldi	r26, 0x37	; 55
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e7 e3       	ldi	r30, 0x37	; 55
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	48 2f       	mov	r20, r24
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	88 2f       	mov	r24, r24
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	9c 01       	movw	r18, r24
    2a78:	28 50       	subi	r18, 0x08	; 8
    2a7a:	30 40       	sbci	r19, 0x00	; 0
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	02 2e       	mov	r0, r18
    2a82:	02 c0       	rjmp	.+4      	; 0x2a88 <DIO_SetPinDirection+0x15e>
    2a84:	88 0f       	add	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	0a 94       	dec	r0
    2a8a:	e2 f7       	brpl	.-8      	; 0x2a84 <DIO_SetPinDirection+0x15a>
    2a8c:	80 95       	com	r24
    2a8e:	84 23       	and	r24, r20
    2a90:	8c 93       	st	X, r24
    2a92:	3b c0       	rjmp	.+118    	; 0x2b0a <DIO_SetPinDirection+0x1e0>
		else if((PinNum >= 16) && (PinNum <= 23)){
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	80 31       	cpi	r24, 0x10	; 16
    2a98:	d8 f0       	brcs	.+54     	; 0x2ad0 <DIO_SetPinDirection+0x1a6>
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	88 31       	cpi	r24, 0x18	; 24
    2a9e:	c0 f4       	brcc	.+48     	; 0x2ad0 <DIO_SetPinDirection+0x1a6>
			Clear_Bit(DDRC,(PinNum-16));}
    2aa0:	a4 e3       	ldi	r26, 0x34	; 52
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e4 e3       	ldi	r30, 0x34	; 52
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	48 2f       	mov	r20, r24
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	88 2f       	mov	r24, r24
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	9c 01       	movw	r18, r24
    2ab4:	20 51       	subi	r18, 0x10	; 16
    2ab6:	30 40       	sbci	r19, 0x00	; 0
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	02 2e       	mov	r0, r18
    2abe:	02 c0       	rjmp	.+4      	; 0x2ac4 <DIO_SetPinDirection+0x19a>
    2ac0:	88 0f       	add	r24, r24
    2ac2:	99 1f       	adc	r25, r25
    2ac4:	0a 94       	dec	r0
    2ac6:	e2 f7       	brpl	.-8      	; 0x2ac0 <DIO_SetPinDirection+0x196>
    2ac8:	80 95       	com	r24
    2aca:	84 23       	and	r24, r20
    2acc:	8c 93       	st	X, r24
    2ace:	1d c0       	rjmp	.+58     	; 0x2b0a <DIO_SetPinDirection+0x1e0>
		else if((PinNum >= 24) && (PinNum <= 31)){
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	88 31       	cpi	r24, 0x18	; 24
    2ad4:	d0 f0       	brcs	.+52     	; 0x2b0a <DIO_SetPinDirection+0x1e0>
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	80 32       	cpi	r24, 0x20	; 32
    2ada:	b8 f4       	brcc	.+46     	; 0x2b0a <DIO_SetPinDirection+0x1e0>
			Clear_Bit(DDRD,(PinNum-24));}
    2adc:	a1 e3       	ldi	r26, 0x31	; 49
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e1 e3       	ldi	r30, 0x31	; 49
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	48 2f       	mov	r20, r24
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	88 2f       	mov	r24, r24
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	9c 01       	movw	r18, r24
    2af0:	28 51       	subi	r18, 0x18	; 24
    2af2:	30 40       	sbci	r19, 0x00	; 0
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	02 2e       	mov	r0, r18
    2afa:	02 c0       	rjmp	.+4      	; 0x2b00 <DIO_SetPinDirection+0x1d6>
    2afc:	88 0f       	add	r24, r24
    2afe:	99 1f       	adc	r25, r25
    2b00:	0a 94       	dec	r0
    2b02:	e2 f7       	brpl	.-8      	; 0x2afc <DIO_SetPinDirection+0x1d2>
    2b04:	80 95       	com	r24
    2b06:	84 23       	and	r24, r20
    2b08:	8c 93       	st	X, r24
	}
}
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	cf 91       	pop	r28
    2b10:	df 91       	pop	r29
    2b12:	08 95       	ret

00002b14 <KPAD_Init>:
 * return:              none
 * remarks:             none
 * example:             none
 *..................................................................................*/
void KPAD_Init(void)
{
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62

	DIO_SetPinDirection(COL_1,OUTPUT);
    2b1c:	82 e1       	ldi	r24, 0x12	; 18
    2b1e:	61 e0       	ldi	r22, 0x01	; 1
    2b20:	0e 94 95 14 	call	0x292a	; 0x292a <DIO_SetPinDirection>
	DIO_SetPinDirection(COL_2,OUTPUT);
    2b24:	83 e1       	ldi	r24, 0x13	; 19
    2b26:	61 e0       	ldi	r22, 0x01	; 1
    2b28:	0e 94 95 14 	call	0x292a	; 0x292a <DIO_SetPinDirection>
	DIO_SetPinDirection(COL_3,OUTPUT);
    2b2c:	84 e1       	ldi	r24, 0x14	; 20
    2b2e:	61 e0       	ldi	r22, 0x01	; 1
    2b30:	0e 94 95 14 	call	0x292a	; 0x292a <DIO_SetPinDirection>

	DIO_SetPinDirection(ROW_1,INPUT);
    2b34:	85 e1       	ldi	r24, 0x15	; 21
    2b36:	60 e0       	ldi	r22, 0x00	; 0
    2b38:	0e 94 95 14 	call	0x292a	; 0x292a <DIO_SetPinDirection>
	DIO_SetPinDirection(ROW_2,INPUT);
    2b3c:	86 e1       	ldi	r24, 0x16	; 22
    2b3e:	60 e0       	ldi	r22, 0x00	; 0
    2b40:	0e 94 95 14 	call	0x292a	; 0x292a <DIO_SetPinDirection>
	DIO_SetPinDirection(ROW_3,INPUT);
    2b44:	87 e1       	ldi	r24, 0x17	; 23
    2b46:	60 e0       	ldi	r22, 0x00	; 0
    2b48:	0e 94 95 14 	call	0x292a	; 0x292a <DIO_SetPinDirection>

	DIO_WritePin(ROW_1,OUTPUT);
    2b4c:	85 e1       	ldi	r24, 0x15	; 21
    2b4e:	61 e0       	ldi	r22, 0x01	; 1
    2b50:	0e 94 34 13 	call	0x2668	; 0x2668 <DIO_WritePin>
	DIO_WritePin(ROW_2,OUTPUT);
    2b54:	86 e1       	ldi	r24, 0x16	; 22
    2b56:	61 e0       	ldi	r22, 0x01	; 1
    2b58:	0e 94 34 13 	call	0x2668	; 0x2668 <DIO_WritePin>
	DIO_WritePin(ROW_3,OUTPUT);
    2b5c:	87 e1       	ldi	r24, 0x17	; 23
    2b5e:	61 e0       	ldi	r22, 0x01	; 1
    2b60:	0e 94 34 13 	call	0x2668	; 0x2668 <DIO_WritePin>
//		/* Configure the row as output */
//		DIO_SetPinDirection(COL,OUTPUT);
//		/* go to next column */
//		COL++;
//	}
}
    2b64:	cf 91       	pop	r28
    2b66:	df 91       	pop	r29
    2b68:	08 95       	ret

00002b6a <KPAD_GetPressedKey>:
 * return:              Index of the pressed key
 * remarks:             none
 * example:             none
 *..................................................................................*/
uint8 KPAD_GetPressedKey(void)
{
    2b6a:	df 93       	push	r29
    2b6c:	cf 93       	push	r28
    2b6e:	00 d0       	rcall	.+0      	; 0x2b70 <KPAD_GetPressedKey+0x6>
    2b70:	00 d0       	rcall	.+0      	; 0x2b72 <KPAD_GetPressedKey+0x8>
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
	/* Initialize column counter, row counter, and pressed button index */
	uint8 COL_Counter , ROW_Counter , Index = LOW , FirstFoundKeyFlag = LOW;
    2b76:	1a 82       	std	Y+2, r1	; 0x02
    2b78:	19 82       	std	Y+1, r1	; 0x01
//	uint8 COL = 18;
	/* index of addressed row */
//	uint8 ROW ;

	/* Looping on columns of the Key Pad */
	for(COL_Counter = LOW + COL_1; COL_Counter < NUM_OF_COL + COL_1; COL_Counter++)
    2b7a:	82 e1       	ldi	r24, 0x12	; 18
    2b7c:	8c 83       	std	Y+4, r24	; 0x04
    2b7e:	2b c0       	rjmp	.+86     	; 0x2bd6 <KPAD_GetPressedKey+0x6c>
	{
		/* Activate the current Column */
		DIO_WritePin(COL_Counter,LOW);
    2b80:	8c 81       	ldd	r24, Y+4	; 0x04
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	0e 94 34 13 	call	0x2668	; 0x2668 <DIO_WritePin>

		/* Looping on rows of the Key Pad */
		for(ROW_Counter = LOW + ROW_1; ROW_Counter < NUM_OF_ROW + ROW_1; ROW_Counter++)
    2b88:	85 e1       	ldi	r24, 0x15	; 21
    2b8a:	8b 83       	std	Y+3, r24	; 0x03
    2b8c:	1a c0       	rjmp	.+52     	; 0x2bc2 <KPAD_GetPressedKey+0x58>
		{
			/* check if any first key pressed */
			if((!(DIO_ReadPin(ROW_Counter))) && (!FirstFoundKeyFlag))
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	0e 94 29 14 	call	0x2852	; 0x2852 <DIO_ReadPin>
    2b94:	88 23       	and	r24, r24
    2b96:	91 f4       	brne	.+36     	; 0x2bbc <KPAD_GetPressedKey+0x52>
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	88 23       	and	r24, r24
    2b9c:	79 f4       	brne	.+30     	; 0x2bbc <KPAD_GetPressedKey+0x52>
			{
				/* set pressed button index */
				Index = (NUM_OF_ROW * (ROW_Counter - ROW_1)) + (COL_Counter - COL_1) + 1u;
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	28 2f       	mov	r18, r24
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	c9 01       	movw	r24, r18
    2ba6:	88 0f       	add	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	82 0f       	add	r24, r18
    2bac:	93 1f       	adc	r25, r19
    2bae:	98 2f       	mov	r25, r24
    2bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb2:	89 0f       	add	r24, r25
    2bb4:	80 55       	subi	r24, 0x50	; 80
    2bb6:	8a 83       	std	Y+2, r24	; 0x02
				/* Ignore any other pressed keys */
				FirstFoundKeyFlag = HIGH;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	89 83       	std	Y+1, r24	; 0x01
	{
		/* Activate the current Column */
		DIO_WritePin(COL_Counter,LOW);

		/* Looping on rows of the Key Pad */
		for(ROW_Counter = LOW + ROW_1; ROW_Counter < NUM_OF_ROW + ROW_1; ROW_Counter++)
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbe:	8f 5f       	subi	r24, 0xFF	; 255
    2bc0:	8b 83       	std	Y+3, r24	; 0x03
    2bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc4:	88 31       	cpi	r24, 0x18	; 24
    2bc6:	18 f3       	brcs	.-58     	; 0x2b8e <KPAD_GetPressedKey+0x24>
				/* Ignore any other pressed keys */
				FirstFoundKeyFlag = HIGH;
			}
		}
		/* Deactivate the current Column */
		DIO_WritePin(COL_Counter,HIGH);
    2bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bca:	61 e0       	ldi	r22, 0x01	; 1
    2bcc:	0e 94 34 13 	call	0x2668	; 0x2668 <DIO_WritePin>
//	uint8 COL = 18;
	/* index of addressed row */
//	uint8 ROW ;

	/* Looping on columns of the Key Pad */
	for(COL_Counter = LOW + COL_1; COL_Counter < NUM_OF_COL + COL_1; COL_Counter++)
    2bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd2:	8f 5f       	subi	r24, 0xFF	; 255
    2bd4:	8c 83       	std	Y+4, r24	; 0x04
    2bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd8:	85 31       	cpi	r24, 0x15	; 21
    2bda:	90 f2       	brcs	.-92     	; 0x2b80 <KPAD_GetPressedKey+0x16>
		/* Deactivate the current Column */
		DIO_WritePin(COL_Counter,HIGH);
	}

	/* return  pressed button index */
	return Index;
    2bdc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	cf 91       	pop	r28
    2be8:	df 91       	pop	r29
    2bea:	08 95       	ret

00002bec <Sos_SetISR>:

/*******************************************************************************************************************
 * ISR & static function definition(s)
 *******************************************************************************************************************/
static void Sos_SetISR(void)
{
    2bec:	ef 92       	push	r14
    2bee:	ff 92       	push	r15
    2bf0:	0f 93       	push	r16
    2bf2:	1f 93       	push	r17
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	0f 92       	push	r0
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
	/* Declaration of isr Counter */
	uint8 isr_count;
	/* Update Tick Counter */
	Sos_u32TickCounter++;
    2bfe:	80 91 00 02 	lds	r24, 0x0200
    2c02:	90 91 01 02 	lds	r25, 0x0201
    2c06:	a0 91 02 02 	lds	r26, 0x0202
    2c0a:	b0 91 03 02 	lds	r27, 0x0203
    2c0e:	01 96       	adiw	r24, 0x01	; 1
    2c10:	a1 1d       	adc	r26, r1
    2c12:	b1 1d       	adc	r27, r1
    2c14:	80 93 00 02 	sts	0x0200, r24
    2c18:	90 93 01 02 	sts	0x0201, r25
    2c1c:	a0 93 02 02 	sts	0x0202, r26
    2c20:	b0 93 03 02 	sts	0x0203, r27

	/* Looping all the system tasks */
	for(isr_count = 0 ; isr_count < NUM_OF_TASKS ; isr_count++)
    2c24:	19 82       	std	Y+1, r1	; 0x01
    2c26:	47 c0       	rjmp	.+142    	; 0x2cb6 <Sos_SetISR+0xca>
	{
		/* Check Whether the Tick Counter Matches the Period of the Task to Be Called */
		if((Sos_SystemTasks[isr_count].State == Sos_TASK_WAITING)
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	28 2f       	mov	r18, r24
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	c9 01       	movw	r24, r18
    2c30:	88 0f       	add	r24, r24
    2c32:	99 1f       	adc	r25, r25
    2c34:	82 0f       	add	r24, r18
    2c36:	93 1f       	adc	r25, r19
    2c38:	88 0f       	add	r24, r24
    2c3a:	99 1f       	adc	r25, r25
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	e7 5f       	subi	r30, 0xF7	; 247
    2c40:	fd 4f       	sbci	r31, 0xFD	; 253
    2c42:	80 81       	ld	r24, Z
    2c44:	81 30       	cpi	r24, 0x01	; 1
    2c46:	a1 f5       	brne	.+104    	; 0x2cb0 <Sos_SetISR+0xc4>
    2c48:	e0 90 00 02 	lds	r14, 0x0200
    2c4c:	f0 90 01 02 	lds	r15, 0x0201
    2c50:	00 91 02 02 	lds	r16, 0x0202
    2c54:	10 91 03 02 	lds	r17, 0x0203
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	28 2f       	mov	r18, r24
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	c9 01       	movw	r24, r18
    2c60:	88 0f       	add	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	82 0f       	add	r24, r18
    2c66:	93 1f       	adc	r25, r19
    2c68:	01 96       	adiw	r24, 0x01	; 1
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	fc 01       	movw	r30, r24
    2c70:	ec 5f       	subi	r30, 0xFC	; 252
    2c72:	fd 4f       	sbci	r31, 0xFD	; 253
    2c74:	80 81       	ld	r24, Z
    2c76:	91 81       	ldd	r25, Z+1	; 0x01
    2c78:	9c 01       	movw	r18, r24
    2c7a:	40 e0       	ldi	r20, 0x00	; 0
    2c7c:	50 e0       	ldi	r21, 0x00	; 0
    2c7e:	c8 01       	movw	r24, r16
    2c80:	b7 01       	movw	r22, r14
    2c82:	0e 94 c6 23 	call	0x478c	; 0x478c <__udivmodsi4>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	a1 05       	cpc	r26, r1
    2c8e:	b1 05       	cpc	r27, r1
    2c90:	79 f4       	brne	.+30     	; 0x2cb0 <Sos_SetISR+0xc4>
				&& (!((Sos_u32TickCounter % Sos_SystemTasks[isr_count].Periodicity))))
		{
			/* update task state */
			Sos_SystemTasks[isr_count].State = Sos_TASK_READY;
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	28 2f       	mov	r18, r24
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	c9 01       	movw	r24, r18
    2c9a:	88 0f       	add	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	82 0f       	add	r24, r18
    2ca0:	93 1f       	adc	r25, r19
    2ca2:	88 0f       	add	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	e7 5f       	subi	r30, 0xF7	; 247
    2caa:	fd 4f       	sbci	r31, 0xFD	; 253
    2cac:	82 e0       	ldi	r24, 0x02	; 2
    2cae:	80 83       	st	Z, r24
	uint8 isr_count;
	/* Update Tick Counter */
	Sos_u32TickCounter++;

	/* Looping all the system tasks */
	for(isr_count = 0 ; isr_count < NUM_OF_TASKS ; isr_count++)
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	8f 5f       	subi	r24, 0xFF	; 255
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	83 30       	cpi	r24, 0x03	; 3
    2cba:	08 f4       	brcc	.+2      	; 0x2cbe <Sos_SetISR+0xd2>
    2cbc:	b5 cf       	rjmp	.-150    	; 0x2c28 <Sos_SetISR+0x3c>
		{
			/* update task state */
			Sos_SystemTasks[isr_count].State = Sos_TASK_READY;
		}
	}
}
    2cbe:	0f 90       	pop	r0
    2cc0:	cf 91       	pop	r28
    2cc2:	df 91       	pop	r29
    2cc4:	1f 91       	pop	r17
    2cc6:	0f 91       	pop	r16
    2cc8:	ff 90       	pop	r15
    2cca:	ef 90       	pop	r14
    2ccc:	08 95       	ret

00002cce <Sos_Init>:
 * return:              none
 * remarks:             none
 * example:             none
 *..................................................................................*/
void Sos_Init(void)
{
    2cce:	df 93       	push	r29
    2cd0:	cf 93       	push	r28
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
	/* Initialize timer 0 */
	TIM0_Init(CTC,PreScaler64);
    2cd6:	88 e0       	ldi	r24, 0x08	; 8
    2cd8:	63 e0       	ldi	r22, 0x03	; 3
    2cda:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <TIM0_Init>
	/* enable timer 0 interrupt */
	TIM0_IntEnable(CTC);
    2cde:	88 e0       	ldi	r24, 0x08	; 8
    2ce0:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <TIM0_IntEnable>
	/* Set ISR callback */
	TIM0_CTCISRCallBack(Sos_SetISR);
    2ce4:	86 ef       	ldi	r24, 0xF6	; 246
    2ce6:	95 e1       	ldi	r25, 0x15	; 21
    2ce8:	0e 94 13 19 	call	0x3226	; 0x3226 <TIM0_CTCISRCallBack>
	/* Initialize tick counter */
	Sos_u32TickCounter = 0;
    2cec:	10 92 00 02 	sts	0x0200, r1
    2cf0:	10 92 01 02 	sts	0x0201, r1
    2cf4:	10 92 02 02 	sts	0x0202, r1
    2cf8:	10 92 03 02 	sts	0x0203, r1
}
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <Sos_Deinit>:
 * return:              none
 * remarks:             none
 * example:             none
 *..................................................................................*/
extern void Sos_Deinit(void)
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
	TIM0_Deinit();
    2d0a:	0e 94 6e 17 	call	0x2edc	; 0x2edc <TIM0_Deinit>
}
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	08 95       	ret

00002d14 <Sos_Run>:
 * return:              none
 * remarks:             none
 * example:             none
 *..................................................................................*/
void Sos_Run(void)
{
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	0f 92       	push	r0
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
	uint8 SchedulerCounter;

	while(1)
	{
		/* Tasks Scheduling Loop */
		for(SchedulerCounter = 0 ; SchedulerCounter < NUM_OF_TASKS ; SchedulerCounter++)
    2d1e:	19 82       	std	Y+1, r1	; 0x01
    2d20:	54 c0       	rjmp	.+168    	; 0x2dca <Sos_Run+0xb6>
		{
			/* Check Whether the Tick Counter Matches the Period of the Task to Be Called */
			if((Sos_SystemTasks[SchedulerCounter].State == Sos_TASK_READY)
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	28 2f       	mov	r18, r24
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	c9 01       	movw	r24, r18
    2d2a:	88 0f       	add	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	82 0f       	add	r24, r18
    2d30:	93 1f       	adc	r25, r19
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	fc 01       	movw	r30, r24
    2d38:	e7 5f       	subi	r30, 0xF7	; 247
    2d3a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d3c:	80 81       	ld	r24, Z
    2d3e:	82 30       	cpi	r24, 0x02	; 2
    2d40:	09 f0       	breq	.+2      	; 0x2d44 <Sos_Run+0x30>
    2d42:	40 c0       	rjmp	.+128    	; 0x2dc4 <Sos_Run+0xb0>
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	28 2f       	mov	r18, r24
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	c9 01       	movw	r24, r18
    2d4c:	88 0f       	add	r24, r24
    2d4e:	99 1f       	adc	r25, r25
    2d50:	82 0f       	add	r24, r18
    2d52:	93 1f       	adc	r25, r19
    2d54:	88 0f       	add	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	fc 01       	movw	r30, r24
    2d5a:	ec 5f       	subi	r30, 0xFC	; 252
    2d5c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d5e:	80 81       	ld	r24, Z
    2d60:	91 81       	ldd	r25, Z+1	; 0x01
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	79 f1       	breq	.+94     	; 0x2dc4 <Sos_Run+0xb0>
					/* check if task is deleted */
					&& (Sos_SystemTasks[SchedulerCounter].TaskHandler != ((void*)0)))
			{
				/* Changg the task state to running */
				Sos_SystemTasks[SchedulerCounter].State = Sos_TASK_RUNNING;
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	28 2f       	mov	r18, r24
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	c9 01       	movw	r24, r18
    2d6e:	88 0f       	add	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	82 0f       	add	r24, r18
    2d74:	93 1f       	adc	r25, r19
    2d76:	88 0f       	add	r24, r24
    2d78:	99 1f       	adc	r25, r25
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	e7 5f       	subi	r30, 0xF7	; 247
    2d7e:	fd 4f       	sbci	r31, 0xFD	; 253
    2d80:	83 e0       	ldi	r24, 0x03	; 3
    2d82:	80 83       	st	Z, r24
				/* Call Desired Task's Handler Function */
				Sos_SystemTasks[SchedulerCounter].TaskHandler();
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	28 2f       	mov	r18, r24
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	c9 01       	movw	r24, r18
    2d8c:	88 0f       	add	r24, r24
    2d8e:	99 1f       	adc	r25, r25
    2d90:	82 0f       	add	r24, r18
    2d92:	93 1f       	adc	r25, r19
    2d94:	88 0f       	add	r24, r24
    2d96:	99 1f       	adc	r25, r25
    2d98:	fc 01       	movw	r30, r24
    2d9a:	ec 5f       	subi	r30, 0xFC	; 252
    2d9c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d9e:	01 90       	ld	r0, Z+
    2da0:	f0 81       	ld	r31, Z
    2da2:	e0 2d       	mov	r30, r0
    2da4:	09 95       	icall
				/* Change back the task state to waiting */
				Sos_SystemTasks[SchedulerCounter].State = Sos_TASK_WAITING;
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	28 2f       	mov	r18, r24
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	c9 01       	movw	r24, r18
    2dae:	88 0f       	add	r24, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	82 0f       	add	r24, r18
    2db4:	93 1f       	adc	r25, r19
    2db6:	88 0f       	add	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	fc 01       	movw	r30, r24
    2dbc:	e7 5f       	subi	r30, 0xF7	; 247
    2dbe:	fd 4f       	sbci	r31, 0xFD	; 253
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	80 83       	st	Z, r24
	uint8 SchedulerCounter;

	while(1)
	{
		/* Tasks Scheduling Loop */
		for(SchedulerCounter = 0 ; SchedulerCounter < NUM_OF_TASKS ; SchedulerCounter++)
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	8f 5f       	subi	r24, 0xFF	; 255
    2dc8:	89 83       	std	Y+1, r24	; 0x01
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	83 30       	cpi	r24, 0x03	; 3
    2dce:	08 f4       	brcc	.+2      	; 0x2dd2 <Sos_Run+0xbe>
    2dd0:	a8 cf       	rjmp	.-176    	; 0x2d22 <Sos_Run+0xe>
    2dd2:	a5 cf       	rjmp	.-182    	; 0x2d1e <Sos_Run+0xa>

00002dd4 <Sos_CreateTask>:
 * return:              none
 * remarks:             none
 * example:             none
 *..................................................................................*/
void Sos_CreateTask(void (*TaskHandler)(void) , uint16 Periodicity , uint8 Priority)
{
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	00 d0       	rcall	.+0      	; 0x2dda <Sos_CreateTask+0x6>
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <Sos_CreateTask+0x8>
    2ddc:	0f 92       	push	r0
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	9a 83       	std	Y+2, r25	; 0x02
    2de4:	89 83       	std	Y+1, r24	; 0x01
    2de6:	7c 83       	std	Y+4, r23	; 0x04
    2de8:	6b 83       	std	Y+3, r22	; 0x03
    2dea:	4d 83       	std	Y+5, r20	; 0x05
	/* Set Task's Handler Function */
	Sos_SystemTasks[Priority].TaskHandler = TaskHandler;
    2dec:	8d 81       	ldd	r24, Y+5	; 0x05
    2dee:	28 2f       	mov	r18, r24
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	c9 01       	movw	r24, r18
    2df4:	88 0f       	add	r24, r24
    2df6:	99 1f       	adc	r25, r25
    2df8:	82 0f       	add	r24, r18
    2dfa:	93 1f       	adc	r25, r19
    2dfc:	88 0f       	add	r24, r24
    2dfe:	99 1f       	adc	r25, r25
    2e00:	fc 01       	movw	r30, r24
    2e02:	ec 5f       	subi	r30, 0xFC	; 252
    2e04:	fd 4f       	sbci	r31, 0xFD	; 253
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	80 83       	st	Z, r24
	/* Set Task's Periodicity */
	Sos_SystemTasks[Priority].Periodicity = Periodicity;
    2e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e10:	28 2f       	mov	r18, r24
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	c9 01       	movw	r24, r18
    2e16:	88 0f       	add	r24, r24
    2e18:	99 1f       	adc	r25, r25
    2e1a:	82 0f       	add	r24, r18
    2e1c:	93 1f       	adc	r25, r19
    2e1e:	01 96       	adiw	r24, 0x01	; 1
    2e20:	88 0f       	add	r24, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	fc 01       	movw	r30, r24
    2e26:	ec 5f       	subi	r30, 0xFC	; 252
    2e28:	fd 4f       	sbci	r31, 0xFD	; 253
    2e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2e:	91 83       	std	Z+1, r25	; 0x01
    2e30:	80 83       	st	Z, r24
	/* Set Task's Priority */
	Sos_SystemTasks[Priority].Priority = Priority;
    2e32:	8d 81       	ldd	r24, Y+5	; 0x05
    2e34:	28 2f       	mov	r18, r24
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	c9 01       	movw	r24, r18
    2e3a:	88 0f       	add	r24, r24
    2e3c:	99 1f       	adc	r25, r25
    2e3e:	82 0f       	add	r24, r18
    2e40:	93 1f       	adc	r25, r19
    2e42:	88 0f       	add	r24, r24
    2e44:	99 1f       	adc	r25, r25
    2e46:	fc 01       	movw	r30, r24
    2e48:	e8 5f       	subi	r30, 0xF8	; 248
    2e4a:	fd 4f       	sbci	r31, 0xFD	; 253
    2e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4e:	80 83       	st	Z, r24
	/* Set Task's State Initially to be Ready */
	Sos_SystemTasks[Priority].State = Sos_TASK_READY;
    2e50:	8d 81       	ldd	r24, Y+5	; 0x05
    2e52:	28 2f       	mov	r18, r24
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	c9 01       	movw	r24, r18
    2e58:	88 0f       	add	r24, r24
    2e5a:	99 1f       	adc	r25, r25
    2e5c:	82 0f       	add	r24, r18
    2e5e:	93 1f       	adc	r25, r19
    2e60:	88 0f       	add	r24, r24
    2e62:	99 1f       	adc	r25, r25
    2e64:	fc 01       	movw	r30, r24
    2e66:	e7 5f       	subi	r30, 0xF7	; 247
    2e68:	fd 4f       	sbci	r31, 0xFD	; 253
    2e6a:	82 e0       	ldi	r24, 0x02	; 2
    2e6c:	80 83       	st	Z, r24
}
    2e6e:	0f 90       	pop	r0
    2e70:	0f 90       	pop	r0
    2e72:	0f 90       	pop	r0
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	cf 91       	pop	r28
    2e7a:	df 91       	pop	r29
    2e7c:	08 95       	ret

00002e7e <Sos_DeleteTask>:
 * return:              none
 * remarks:             none
 * example:             none
 *..................................................................................*/
void Sos_DeleteTask(uint8 Priority)
{
    2e7e:	df 93       	push	r29
    2e80:	cf 93       	push	r28
    2e82:	0f 92       	push	r0
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
    2e88:	89 83       	std	Y+1, r24	; 0x01
	/* Delete task from array of system tasks */
	Sos_SystemTasks[Priority].TaskHandler = ((void*)0);
    2e8a:	89 81       	ldd	r24, Y+1	; 0x01
    2e8c:	28 2f       	mov	r18, r24
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	c9 01       	movw	r24, r18
    2e92:	88 0f       	add	r24, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	82 0f       	add	r24, r18
    2e98:	93 1f       	adc	r25, r19
    2e9a:	88 0f       	add	r24, r24
    2e9c:	99 1f       	adc	r25, r25
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	ec 5f       	subi	r30, 0xFC	; 252
    2ea2:	fd 4f       	sbci	r31, 0xFD	; 253
    2ea4:	11 82       	std	Z+1, r1	; 0x01
    2ea6:	10 82       	st	Z, r1
}
    2ea8:	0f 90       	pop	r0
    2eaa:	cf 91       	pop	r28
    2eac:	df 91       	pop	r29
    2eae:	08 95       	ret

00002eb0 <TIM0_Init>:
#include "avr/interrupt.h"

void (*CBptr)(void);

void TIM0_Init(tMODE Timer0Mode , uint8 Prescaler)
{
    2eb0:	df 93       	push	r29
    2eb2:	cf 93       	push	r28
    2eb4:	00 d0       	rcall	.+0      	; 0x2eb6 <TIM0_Init+0x6>
    2eb6:	cd b7       	in	r28, 0x3d	; 61
    2eb8:	de b7       	in	r29, 0x3e	; 62
    2eba:	89 83       	std	Y+1, r24	; 0x01
    2ebc:	6a 83       	std	Y+2, r22	; 0x02
	TCCR0 = Timer0Mode | OC0_FUNC | Prescaler;
    2ebe:	e3 e5       	ldi	r30, 0x53	; 83
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	99 81       	ldd	r25, Y+1	; 0x01
    2ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec6:	89 2b       	or	r24, r25
    2ec8:	80 83       	st	Z, r24

    #if(Timer0Mode == CTC)
	   OCR0 = COMP_VALUE;
    2eca:	ec e5       	ldi	r30, 0x5C	; 92
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	8c e7       	ldi	r24, 0x7C	; 124
    2ed0:	80 83       	st	Z, r24
    #endif
}
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	cf 91       	pop	r28
    2ed8:	df 91       	pop	r29
    2eda:	08 95       	ret

00002edc <TIM0_Deinit>:


void TIM0_Deinit(void)
{
    2edc:	df 93       	push	r29
    2ede:	cf 93       	push	r28
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = noclk;
    2ee4:	e3 e5       	ldi	r30, 0x53	; 83
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	10 82       	st	Z, r1
}
    2eea:	cf 91       	pop	r28
    2eec:	df 91       	pop	r29
    2eee:	08 95       	ret

00002ef0 <TIM0_IntEnable>:


void TIM0_IntEnable(tMODE Timer0Mode)
{
    2ef0:	df 93       	push	r29
    2ef2:	cf 93       	push	r28
    2ef4:	0f 92       	push	r0
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	89 83       	std	Y+1, r24	; 0x01
    #if(Timer0Mode == CTC)
	   Set_Bit(SREG,i_bit);
    2efc:	af e5       	ldi	r26, 0x5F	; 95
    2efe:	b0 e0       	ldi	r27, 0x00	; 0
    2f00:	ef e5       	ldi	r30, 0x5F	; 95
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	80 68       	ori	r24, 0x80	; 128
    2f08:	8c 93       	st	X, r24
	   TIMSK |= TIM0CTCINT_EN;
    2f0a:	a9 e5       	ldi	r26, 0x59	; 89
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	e9 e5       	ldi	r30, 0x59	; 89
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	82 60       	ori	r24, 0x02	; 2
    2f16:	8c 93       	st	X, r24
    #elif(Timer0Mode == OVF)
	   Set_Bit(SREG,i_bit);
	   TIMSK |= TIM0OVFINT_EN;
    #endif
}
    2f18:	0f 90       	pop	r0
    2f1a:	cf 91       	pop	r28
    2f1c:	df 91       	pop	r29
    2f1e:	08 95       	ret

00002f20 <TIM0_msDelay>:


void TIM0_msDelay(uint32 DelayTime)
{
    2f20:	df 93       	push	r29
    2f22:	cf 93       	push	r28
    2f24:	00 d0       	rcall	.+0      	; 0x2f26 <TIM0_msDelay+0x6>
    2f26:	00 d0       	rcall	.+0      	; 0x2f28 <TIM0_msDelay+0x8>
    2f28:	0f 92       	push	r0
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
    2f2e:	69 83       	std	Y+1, r22	; 0x01
    2f30:	7a 83       	std	Y+2, r23	; 0x02
    2f32:	8b 83       	std	Y+3, r24	; 0x03
    2f34:	9c 83       	std	Y+4, r25	; 0x04
	TCCR0 = CTC | PreScaler64;
    2f36:	e3 e5       	ldi	r30, 0x53	; 83
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	8b e0       	ldi	r24, 0x0B	; 11
    2f3c:	80 83       	st	Z, r24
	OCR0  = COMP_VALUE;
    2f3e:	ec e5       	ldi	r30, 0x5C	; 92
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	8c e7       	ldi	r24, 0x7C	; 124
    2f44:	80 83       	st	Z, r24
    2f46:	11 c0       	rjmp	.+34     	; 0x2f6a <TIM0_msDelay+0x4a>

	while(DelayTime--)
	{
		Set_Bit(TIFR,OCF0);
    2f48:	a8 e5       	ldi	r26, 0x58	; 88
    2f4a:	b0 e0       	ldi	r27, 0x00	; 0
    2f4c:	e8 e5       	ldi	r30, 0x58	; 88
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	82 60       	ori	r24, 0x02	; 2
    2f54:	8c 93       	st	X, r24
		while(!(Get_Bit(TIFR,OCF0)));
    2f56:	e8 e5       	ldi	r30, 0x58	; 88
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	80 81       	ld	r24, Z
    2f5c:	86 95       	lsr	r24
    2f5e:	88 2f       	mov	r24, r24
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	81 70       	andi	r24, 0x01	; 1
    2f64:	90 70       	andi	r25, 0x00	; 0
    2f66:	00 97       	sbiw	r24, 0x00	; 0
    2f68:	b1 f3       	breq	.-20     	; 0x2f56 <TIM0_msDelay+0x36>
void TIM0_msDelay(uint32 DelayTime)
{
	TCCR0 = CTC | PreScaler64;
	OCR0  = COMP_VALUE;

	while(DelayTime--)
    2f6a:	1d 82       	std	Y+5, r1	; 0x05
    2f6c:	89 81       	ldd	r24, Y+1	; 0x01
    2f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f70:	ab 81       	ldd	r26, Y+3	; 0x03
    2f72:	bc 81       	ldd	r27, Y+4	; 0x04
    2f74:	00 97       	sbiw	r24, 0x00	; 0
    2f76:	a1 05       	cpc	r26, r1
    2f78:	b1 05       	cpc	r27, r1
    2f7a:	11 f0       	breq	.+4      	; 0x2f80 <TIM0_msDelay+0x60>
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	8d 83       	std	Y+5, r24	; 0x05
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	9a 81       	ldd	r25, Y+2	; 0x02
    2f84:	ab 81       	ldd	r26, Y+3	; 0x03
    2f86:	bc 81       	ldd	r27, Y+4	; 0x04
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	a1 09       	sbc	r26, r1
    2f8c:	b1 09       	sbc	r27, r1
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	9a 83       	std	Y+2, r25	; 0x02
    2f92:	ab 83       	std	Y+3, r26	; 0x03
    2f94:	bc 83       	std	Y+4, r27	; 0x04
    2f96:	8d 81       	ldd	r24, Y+5	; 0x05
    2f98:	88 23       	and	r24, r24
    2f9a:	b1 f6       	brne	.-84     	; 0x2f48 <TIM0_msDelay+0x28>
	{
		Set_Bit(TIFR,OCF0);
		while(!(Get_Bit(TIFR,OCF0)));
	}
}
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	08 95       	ret

00002fac <TIM0_usDelay>:


void TIM0_usDelay(uint64 DelayTime)
{
    2fac:	af 92       	push	r10
    2fae:	bf 92       	push	r11
    2fb0:	cf 92       	push	r12
    2fb2:	df 92       	push	r13
    2fb4:	ef 92       	push	r14
    2fb6:	ff 92       	push	r15
    2fb8:	0f 93       	push	r16
    2fba:	1f 93       	push	r17
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	2b 97       	sbiw	r28, 0x0b	; 11
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	2b 83       	std	Y+3, r18	; 0x03
    2fd2:	3c 83       	std	Y+4, r19	; 0x04
    2fd4:	4d 83       	std	Y+5, r20	; 0x05
    2fd6:	5e 83       	std	Y+6, r21	; 0x06
    2fd8:	6f 83       	std	Y+7, r22	; 0x07
    2fda:	78 87       	std	Y+8, r23	; 0x08
    2fdc:	89 87       	std	Y+9, r24	; 0x09
    2fde:	9a 87       	std	Y+10, r25	; 0x0a
	uint8 temp1 , temp2;
	TCNT0 = 0;
    2fe0:	e2 e5       	ldi	r30, 0x52	; 82
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	10 82       	st	Z, r1
	TCCR0 = CTC | PreScaler8;
    2fe6:	e3 e5       	ldi	r30, 0x53	; 83
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	8a e0       	ldi	r24, 0x0A	; 10
    2fec:	80 83       	st	Z, r24

	if(COMP_VALUE > DelayTime){
    2fee:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ff0:	88 23       	and	r24, r24
    2ff2:	79 f5       	brne	.+94     	; 0x3052 <TIM0_usDelay+0xa6>
    2ff4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ff6:	88 23       	and	r24, r24
    2ff8:	39 f5       	brne	.+78     	; 0x3048 <TIM0_usDelay+0x9c>
    2ffa:	89 85       	ldd	r24, Y+9	; 0x09
    2ffc:	88 23       	and	r24, r24
    2ffe:	49 f5       	brne	.+82     	; 0x3052 <TIM0_usDelay+0xa6>
    3000:	89 85       	ldd	r24, Y+9	; 0x09
    3002:	88 23       	and	r24, r24
    3004:	09 f5       	brne	.+66     	; 0x3048 <TIM0_usDelay+0x9c>
    3006:	88 85       	ldd	r24, Y+8	; 0x08
    3008:	88 23       	and	r24, r24
    300a:	19 f5       	brne	.+70     	; 0x3052 <TIM0_usDelay+0xa6>
    300c:	88 85       	ldd	r24, Y+8	; 0x08
    300e:	88 23       	and	r24, r24
    3010:	d9 f4       	brne	.+54     	; 0x3048 <TIM0_usDelay+0x9c>
    3012:	8f 81       	ldd	r24, Y+7	; 0x07
    3014:	88 23       	and	r24, r24
    3016:	e9 f4       	brne	.+58     	; 0x3052 <TIM0_usDelay+0xa6>
    3018:	8f 81       	ldd	r24, Y+7	; 0x07
    301a:	88 23       	and	r24, r24
    301c:	a9 f4       	brne	.+42     	; 0x3048 <TIM0_usDelay+0x9c>
    301e:	8e 81       	ldd	r24, Y+6	; 0x06
    3020:	88 23       	and	r24, r24
    3022:	b9 f4       	brne	.+46     	; 0x3052 <TIM0_usDelay+0xa6>
    3024:	8e 81       	ldd	r24, Y+6	; 0x06
    3026:	88 23       	and	r24, r24
    3028:	79 f4       	brne	.+30     	; 0x3048 <TIM0_usDelay+0x9c>
    302a:	8d 81       	ldd	r24, Y+5	; 0x05
    302c:	88 23       	and	r24, r24
    302e:	89 f4       	brne	.+34     	; 0x3052 <TIM0_usDelay+0xa6>
    3030:	8d 81       	ldd	r24, Y+5	; 0x05
    3032:	88 23       	and	r24, r24
    3034:	49 f4       	brne	.+18     	; 0x3048 <TIM0_usDelay+0x9c>
    3036:	8c 81       	ldd	r24, Y+4	; 0x04
    3038:	88 23       	and	r24, r24
    303a:	59 f4       	brne	.+22     	; 0x3052 <TIM0_usDelay+0xa6>
    303c:	8c 81       	ldd	r24, Y+4	; 0x04
    303e:	88 23       	and	r24, r24
    3040:	19 f4       	brne	.+6      	; 0x3048 <TIM0_usDelay+0x9c>
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	8c 37       	cpi	r24, 0x7C	; 124
    3046:	28 f4       	brcc	.+10     	; 0x3052 <TIM0_usDelay+0xa6>
		OCR0 = DelayTime;
    3048:	ec e5       	ldi	r30, 0x5C	; 92
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	8b 81       	ldd	r24, Y+3	; 0x03
    304e:	80 83       	st	Z, r24
    3050:	9a c0       	rjmp	.+308    	; 0x3186 <TIM0_usDelay+0x1da>
	}else{

		temp1 = DelayTime / COMP_VALUE;
    3052:	ab 80       	ldd	r10, Y+3	; 0x03
    3054:	bc 80       	ldd	r11, Y+4	; 0x04
    3056:	cd 80       	ldd	r12, Y+5	; 0x05
    3058:	de 80       	ldd	r13, Y+6	; 0x06
    305a:	ef 80       	ldd	r14, Y+7	; 0x07
    305c:	f8 84       	ldd	r15, Y+8	; 0x08
    305e:	09 85       	ldd	r16, Y+9	; 0x09
    3060:	1a 85       	ldd	r17, Y+10	; 0x0a
    3062:	2a 2d       	mov	r18, r10
    3064:	3b 2d       	mov	r19, r11
    3066:	4c 2d       	mov	r20, r12
    3068:	5d 2d       	mov	r21, r13
    306a:	6e 2d       	mov	r22, r14
    306c:	7f 2d       	mov	r23, r15
    306e:	80 2f       	mov	r24, r16
    3070:	91 2f       	mov	r25, r17
    3072:	0f 2e       	mov	r0, r31
    3074:	fc e7       	ldi	r31, 0x7C	; 124
    3076:	af 2e       	mov	r10, r31
    3078:	f0 2d       	mov	r31, r0
    307a:	bb 24       	eor	r11, r11
    307c:	cc 24       	eor	r12, r12
    307e:	dd 24       	eor	r13, r13
    3080:	ee 24       	eor	r14, r14
    3082:	ff 24       	eor	r15, r15
    3084:	00 e0       	ldi	r16, 0x00	; 0
    3086:	10 e0       	ldi	r17, 0x00	; 0
    3088:	0e 94 75 00 	call	0xea	; 0xea <__udivdi3>
    308c:	a2 2e       	mov	r10, r18
    308e:	b3 2e       	mov	r11, r19
    3090:	c4 2e       	mov	r12, r20
    3092:	d5 2e       	mov	r13, r21
    3094:	e6 2e       	mov	r14, r22
    3096:	f7 2e       	mov	r15, r23
    3098:	08 2f       	mov	r16, r24
    309a:	19 2f       	mov	r17, r25
    309c:	2a 2d       	mov	r18, r10
    309e:	3b 2d       	mov	r19, r11
    30a0:	4c 2d       	mov	r20, r12
    30a2:	5d 2d       	mov	r21, r13
    30a4:	6e 2d       	mov	r22, r14
    30a6:	7f 2d       	mov	r23, r15
    30a8:	80 2f       	mov	r24, r16
    30aa:	91 2f       	mov	r25, r17
    30ac:	2a 83       	std	Y+2, r18	; 0x02
		temp2 = DelayTime % COMP_VALUE;
    30ae:	ab 80       	ldd	r10, Y+3	; 0x03
    30b0:	bc 80       	ldd	r11, Y+4	; 0x04
    30b2:	cd 80       	ldd	r12, Y+5	; 0x05
    30b4:	de 80       	ldd	r13, Y+6	; 0x06
    30b6:	ef 80       	ldd	r14, Y+7	; 0x07
    30b8:	f8 84       	ldd	r15, Y+8	; 0x08
    30ba:	09 85       	ldd	r16, Y+9	; 0x09
    30bc:	1a 85       	ldd	r17, Y+10	; 0x0a
    30be:	2a 2d       	mov	r18, r10
    30c0:	3b 2d       	mov	r19, r11
    30c2:	4c 2d       	mov	r20, r12
    30c4:	5d 2d       	mov	r21, r13
    30c6:	6e 2d       	mov	r22, r14
    30c8:	7f 2d       	mov	r23, r15
    30ca:	80 2f       	mov	r24, r16
    30cc:	91 2f       	mov	r25, r17
    30ce:	0f 2e       	mov	r0, r31
    30d0:	fc e7       	ldi	r31, 0x7C	; 124
    30d2:	af 2e       	mov	r10, r31
    30d4:	f0 2d       	mov	r31, r0
    30d6:	bb 24       	eor	r11, r11
    30d8:	cc 24       	eor	r12, r12
    30da:	dd 24       	eor	r13, r13
    30dc:	ee 24       	eor	r14, r14
    30de:	ff 24       	eor	r15, r15
    30e0:	00 e0       	ldi	r16, 0x00	; 0
    30e2:	10 e0       	ldi	r17, 0x00	; 0
    30e4:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__umoddi3>
    30e8:	a2 2e       	mov	r10, r18
    30ea:	b3 2e       	mov	r11, r19
    30ec:	c4 2e       	mov	r12, r20
    30ee:	d5 2e       	mov	r13, r21
    30f0:	e6 2e       	mov	r14, r22
    30f2:	f7 2e       	mov	r15, r23
    30f4:	08 2f       	mov	r16, r24
    30f6:	19 2f       	mov	r17, r25
    30f8:	2a 2d       	mov	r18, r10
    30fa:	3b 2d       	mov	r19, r11
    30fc:	4c 2d       	mov	r20, r12
    30fe:	5d 2d       	mov	r21, r13
    3100:	6e 2d       	mov	r22, r14
    3102:	7f 2d       	mov	r23, r15
    3104:	80 2f       	mov	r24, r16
    3106:	91 2f       	mov	r25, r17
    3108:	29 83       	std	Y+1, r18	; 0x01
    310a:	15 c0       	rjmp	.+42     	; 0x3136 <TIM0_usDelay+0x18a>

		while(temp1--){

			OCR0 = COMP_VALUE;
    310c:	ec e5       	ldi	r30, 0x5C	; 92
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	8c e7       	ldi	r24, 0x7C	; 124
    3112:	80 83       	st	Z, r24
			Set_Bit(TIFR,OCF0);
    3114:	a8 e5       	ldi	r26, 0x58	; 88
    3116:	b0 e0       	ldi	r27, 0x00	; 0
    3118:	e8 e5       	ldi	r30, 0x58	; 88
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	80 81       	ld	r24, Z
    311e:	82 60       	ori	r24, 0x02	; 2
    3120:	8c 93       	st	X, r24
			while(!(Get_Bit(TIFR,OCF0)));
    3122:	e8 e5       	ldi	r30, 0x58	; 88
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 81       	ld	r24, Z
    3128:	86 95       	lsr	r24
    312a:	88 2f       	mov	r24, r24
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	81 70       	andi	r24, 0x01	; 1
    3130:	90 70       	andi	r25, 0x00	; 0
    3132:	00 97       	sbiw	r24, 0x00	; 0
    3134:	b1 f3       	breq	.-20     	; 0x3122 <TIM0_usDelay+0x176>
	}else{

		temp1 = DelayTime / COMP_VALUE;
		temp2 = DelayTime % COMP_VALUE;

		while(temp1--){
    3136:	8a 81       	ldd	r24, Y+2	; 0x02
    3138:	8b 87       	std	Y+11, r24	; 0x0b
    313a:	8b 85       	ldd	r24, Y+11	; 0x0b
    313c:	88 23       	and	r24, r24
    313e:	11 f0       	breq	.+4      	; 0x3144 <TIM0_usDelay+0x198>
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	8b 87       	std	Y+11, r24	; 0x0b
    3144:	8b 85       	ldd	r24, Y+11	; 0x0b
    3146:	9a 81       	ldd	r25, Y+2	; 0x02
    3148:	91 50       	subi	r25, 0x01	; 1
    314a:	9a 83       	std	Y+2, r25	; 0x02
    314c:	88 23       	and	r24, r24
    314e:	f1 f6       	brne	.-68     	; 0x310c <TIM0_usDelay+0x160>

			OCR0 = COMP_VALUE;
			Set_Bit(TIFR,OCF0);
			while(!(Get_Bit(TIFR,OCF0)));
		}
		if(temp2){
    3150:	89 81       	ldd	r24, Y+1	; 0x01
    3152:	88 23       	and	r24, r24
    3154:	c1 f0       	breq	.+48     	; 0x3186 <TIM0_usDelay+0x1da>

			TCNT0 = 0;
    3156:	e2 e5       	ldi	r30, 0x52	; 82
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	10 82       	st	Z, r1
			OCR0 = temp2;
    315c:	ec e5       	ldi	r30, 0x5C	; 92
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	80 83       	st	Z, r24
			Set_Bit(TIFR,OCF0);
    3164:	a8 e5       	ldi	r26, 0x58	; 88
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	e8 e5       	ldi	r30, 0x58	; 88
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	82 60       	ori	r24, 0x02	; 2
    3170:	8c 93       	st	X, r24
			while(!(Get_Bit(TIFR,OCF0)));
    3172:	e8 e5       	ldi	r30, 0x58	; 88
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	86 95       	lsr	r24
    317a:	88 2f       	mov	r24, r24
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	81 70       	andi	r24, 0x01	; 1
    3180:	90 70       	andi	r25, 0x00	; 0
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	b1 f3       	breq	.-20     	; 0x3172 <TIM0_usDelay+0x1c6>

		}
	}
}
    3186:	2b 96       	adiw	r28, 0x0b	; 11
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	1f 91       	pop	r17
    3198:	0f 91       	pop	r16
    319a:	ff 90       	pop	r15
    319c:	ef 90       	pop	r14
    319e:	df 90       	pop	r13
    31a0:	cf 90       	pop	r12
    31a2:	bf 90       	pop	r11
    31a4:	af 90       	pop	r10
    31a6:	08 95       	ret

000031a8 <TIM0_OVFISRCallBack>:


void TIM0_OVFISRCallBack(void(*OVFHANDLERptr)(void))
{
    31a8:	df 93       	push	r29
    31aa:	cf 93       	push	r28
    31ac:	00 d0       	rcall	.+0      	; 0x31ae <TIM0_OVFISRCallBack+0x6>
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
    31b2:	9a 83       	std	Y+2, r25	; 0x02
    31b4:	89 83       	std	Y+1, r24	; 0x01
	CBptr = OVFHANDLERptr;
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ba:	90 93 1f 02 	sts	0x021F, r25
    31be:	80 93 1e 02 	sts	0x021E, r24
}
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	cf 91       	pop	r28
    31c8:	df 91       	pop	r29
    31ca:	08 95       	ret

000031cc <__vector_11>:


ISR(TIMER0_OVF_vect)
{
    31cc:	1f 92       	push	r1
    31ce:	0f 92       	push	r0
    31d0:	0f b6       	in	r0, 0x3f	; 63
    31d2:	0f 92       	push	r0
    31d4:	11 24       	eor	r1, r1
    31d6:	2f 93       	push	r18
    31d8:	3f 93       	push	r19
    31da:	4f 93       	push	r20
    31dc:	5f 93       	push	r21
    31de:	6f 93       	push	r22
    31e0:	7f 93       	push	r23
    31e2:	8f 93       	push	r24
    31e4:	9f 93       	push	r25
    31e6:	af 93       	push	r26
    31e8:	bf 93       	push	r27
    31ea:	ef 93       	push	r30
    31ec:	ff 93       	push	r31
    31ee:	df 93       	push	r29
    31f0:	cf 93       	push	r28
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
	CBptr();
    31f6:	e0 91 1e 02 	lds	r30, 0x021E
    31fa:	f0 91 1f 02 	lds	r31, 0x021F
    31fe:	09 95       	icall
}
    3200:	cf 91       	pop	r28
    3202:	df 91       	pop	r29
    3204:	ff 91       	pop	r31
    3206:	ef 91       	pop	r30
    3208:	bf 91       	pop	r27
    320a:	af 91       	pop	r26
    320c:	9f 91       	pop	r25
    320e:	8f 91       	pop	r24
    3210:	7f 91       	pop	r23
    3212:	6f 91       	pop	r22
    3214:	5f 91       	pop	r21
    3216:	4f 91       	pop	r20
    3218:	3f 91       	pop	r19
    321a:	2f 91       	pop	r18
    321c:	0f 90       	pop	r0
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	0f 90       	pop	r0
    3222:	1f 90       	pop	r1
    3224:	18 95       	reti

00003226 <TIM0_CTCISRCallBack>:


void TIM0_CTCISRCallBack(void(*CTCHANDLERptr)(void))
{
    3226:	df 93       	push	r29
    3228:	cf 93       	push	r28
    322a:	00 d0       	rcall	.+0      	; 0x322c <TIM0_CTCISRCallBack+0x6>
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
    3230:	9a 83       	std	Y+2, r25	; 0x02
    3232:	89 83       	std	Y+1, r24	; 0x01
	CBptr = CTCHANDLERptr;
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	9a 81       	ldd	r25, Y+2	; 0x02
    3238:	90 93 1f 02 	sts	0x021F, r25
    323c:	80 93 1e 02 	sts	0x021E, r24
}
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	cf 91       	pop	r28
    3246:	df 91       	pop	r29
    3248:	08 95       	ret

0000324a <__vector_10>:


ISR(TIMER0_COMP_vect)
{
    324a:	1f 92       	push	r1
    324c:	0f 92       	push	r0
    324e:	0f b6       	in	r0, 0x3f	; 63
    3250:	0f 92       	push	r0
    3252:	11 24       	eor	r1, r1
    3254:	2f 93       	push	r18
    3256:	3f 93       	push	r19
    3258:	4f 93       	push	r20
    325a:	5f 93       	push	r21
    325c:	6f 93       	push	r22
    325e:	7f 93       	push	r23
    3260:	8f 93       	push	r24
    3262:	9f 93       	push	r25
    3264:	af 93       	push	r26
    3266:	bf 93       	push	r27
    3268:	ef 93       	push	r30
    326a:	ff 93       	push	r31
    326c:	df 93       	push	r29
    326e:	cf 93       	push	r28
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
	CBptr();
    3274:	e0 91 1e 02 	lds	r30, 0x021E
    3278:	f0 91 1f 02 	lds	r31, 0x021F
    327c:	09 95       	icall
}
    327e:	cf 91       	pop	r28
    3280:	df 91       	pop	r29
    3282:	ff 91       	pop	r31
    3284:	ef 91       	pop	r30
    3286:	bf 91       	pop	r27
    3288:	af 91       	pop	r26
    328a:	9f 91       	pop	r25
    328c:	8f 91       	pop	r24
    328e:	7f 91       	pop	r23
    3290:	6f 91       	pop	r22
    3292:	5f 91       	pop	r21
    3294:	4f 91       	pop	r20
    3296:	3f 91       	pop	r19
    3298:	2f 91       	pop	r18
    329a:	0f 90       	pop	r0
    329c:	0f be       	out	0x3f, r0	; 63
    329e:	0f 90       	pop	r0
    32a0:	1f 90       	pop	r1
    32a2:	18 95       	reti

000032a4 <LCD_init>:
#include <util/delay.h>
#include "lcd_drive.h"
#include "lcd_cfg.h"

void LCD_init (void)
{
    32a4:	df 93       	push	r29
    32a6:	cf 93       	push	r28
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
    32ac:	e8 97       	sbiw	r28, 0x38	; 56
    32ae:	0f b6       	in	r0, 0x3f	; 63
    32b0:	f8 94       	cli
    32b2:	de bf       	out	0x3e, r29	; 62
    32b4:	0f be       	out	0x3f, r0	; 63
    32b6:	cd bf       	out	0x3d, r28	; 61
	LCD_HWPORT_DIR = 0xFF;
    32b8:	ea e3       	ldi	r30, 0x3A	; 58
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	8f ef       	ldi	r24, 0xFF	; 255
    32be:	80 83       	st	Z, r24
	LCD_HWPORT &= ~(1<<LCD_RW);
    32c0:	ab e3       	ldi	r26, 0x3B	; 59
    32c2:	b0 e0       	ldi	r27, 0x00	; 0
    32c4:	eb e3       	ldi	r30, 0x3B	; 59
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	80 81       	ld	r24, Z
    32ca:	8b 7f       	andi	r24, 0xFB	; 251
    32cc:	8c 93       	st	X, r24
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	a0 e7       	ldi	r26, 0x70	; 112
    32d4:	b1 e4       	ldi	r27, 0x41	; 65
    32d6:	8d ab       	std	Y+53, r24	; 0x35
    32d8:	9e ab       	std	Y+54, r25	; 0x36
    32da:	af ab       	std	Y+55, r26	; 0x37
    32dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32de:	6d a9       	ldd	r22, Y+53	; 0x35
    32e0:	7e a9       	ldd	r23, Y+54	; 0x36
    32e2:	8f a9       	ldd	r24, Y+55	; 0x37
    32e4:	98 ad       	ldd	r25, Y+56	; 0x38
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	4a ef       	ldi	r20, 0xFA	; 250
    32ec:	54 e4       	ldi	r21, 0x44	; 68
    32ee:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	89 ab       	std	Y+49, r24	; 0x31
    32f8:	9a ab       	std	Y+50, r25	; 0x32
    32fa:	ab ab       	std	Y+51, r26	; 0x33
    32fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32fe:	69 a9       	ldd	r22, Y+49	; 0x31
    3300:	7a a9       	ldd	r23, Y+50	; 0x32
    3302:	8b a9       	ldd	r24, Y+51	; 0x33
    3304:	9c a9       	ldd	r25, Y+52	; 0x34
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	40 e8       	ldi	r20, 0x80	; 128
    330c:	5f e3       	ldi	r21, 0x3F	; 63
    330e:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3312:	88 23       	and	r24, r24
    3314:	2c f4       	brge	.+10     	; 0x3320 <LCD_init+0x7c>
		__ticks = 1;
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	98 ab       	std	Y+48, r25	; 0x30
    331c:	8f a7       	std	Y+47, r24	; 0x2f
    331e:	3f c0       	rjmp	.+126    	; 0x339e <LCD_init+0xfa>
	else if (__tmp > 65535)
    3320:	69 a9       	ldd	r22, Y+49	; 0x31
    3322:	7a a9       	ldd	r23, Y+50	; 0x32
    3324:	8b a9       	ldd	r24, Y+51	; 0x33
    3326:	9c a9       	ldd	r25, Y+52	; 0x34
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	3f ef       	ldi	r19, 0xFF	; 255
    332c:	4f e7       	ldi	r20, 0x7F	; 127
    332e:	57 e4       	ldi	r21, 0x47	; 71
    3330:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3334:	18 16       	cp	r1, r24
    3336:	4c f5       	brge	.+82     	; 0x338a <LCD_init+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3338:	6d a9       	ldd	r22, Y+53	; 0x35
    333a:	7e a9       	ldd	r23, Y+54	; 0x36
    333c:	8f a9       	ldd	r24, Y+55	; 0x37
    333e:	98 ad       	ldd	r25, Y+56	; 0x38
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	40 e2       	ldi	r20, 0x20	; 32
    3346:	51 e4       	ldi	r21, 0x41	; 65
    3348:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	bc 01       	movw	r22, r24
    3352:	cd 01       	movw	r24, r26
    3354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	98 ab       	std	Y+48, r25	; 0x30
    335e:	8f a7       	std	Y+47, r24	; 0x2f
    3360:	0f c0       	rjmp	.+30     	; 0x3380 <LCD_init+0xdc>
    3362:	88 ec       	ldi	r24, 0xC8	; 200
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	9e a7       	std	Y+46, r25	; 0x2e
    3368:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    336a:	8d a5       	ldd	r24, Y+45	; 0x2d
    336c:	9e a5       	ldd	r25, Y+46	; 0x2e
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	f1 f7       	brne	.-4      	; 0x336e <LCD_init+0xca>
    3372:	9e a7       	std	Y+46, r25	; 0x2e
    3374:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3376:	8f a5       	ldd	r24, Y+47	; 0x2f
    3378:	98 a9       	ldd	r25, Y+48	; 0x30
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	98 ab       	std	Y+48, r25	; 0x30
    337e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3380:	8f a5       	ldd	r24, Y+47	; 0x2f
    3382:	98 a9       	ldd	r25, Y+48	; 0x30
    3384:	00 97       	sbiw	r24, 0x00	; 0
    3386:	69 f7       	brne	.-38     	; 0x3362 <LCD_init+0xbe>
    3388:	14 c0       	rjmp	.+40     	; 0x33b2 <LCD_init+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338a:	69 a9       	ldd	r22, Y+49	; 0x31
    338c:	7a a9       	ldd	r23, Y+50	; 0x32
    338e:	8b a9       	ldd	r24, Y+51	; 0x33
    3390:	9c a9       	ldd	r25, Y+52	; 0x34
    3392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	98 ab       	std	Y+48, r25	; 0x30
    339c:	8f a7       	std	Y+47, r24	; 0x2f
    339e:	8f a5       	ldd	r24, Y+47	; 0x2f
    33a0:	98 a9       	ldd	r25, Y+48	; 0x30
    33a2:	9c a7       	std	Y+44, r25	; 0x2c
    33a4:	8b a7       	std	Y+43, r24	; 0x2b
    33a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    33a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    33aa:	01 97       	sbiw	r24, 0x01	; 1
    33ac:	f1 f7       	brne	.-4      	; 0x33aa <LCD_init+0x106>
    33ae:	9c a7       	std	Y+44, r25	; 0x2c
    33b0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(15);
	LCD_sendCommand(0x03);
    33b2:	83 e0       	ldi	r24, 0x03	; 3
    33b4:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <LCD_sendCommand>
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	a0 ea       	ldi	r26, 0xA0	; 160
    33be:	b0 e4       	ldi	r27, 0x40	; 64
    33c0:	8f a3       	std	Y+39, r24	; 0x27
    33c2:	98 a7       	std	Y+40, r25	; 0x28
    33c4:	a9 a7       	std	Y+41, r26	; 0x29
    33c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33c8:	6f a1       	ldd	r22, Y+39	; 0x27
    33ca:	78 a5       	ldd	r23, Y+40	; 0x28
    33cc:	89 a5       	ldd	r24, Y+41	; 0x29
    33ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	4a ef       	ldi	r20, 0xFA	; 250
    33d6:	54 e4       	ldi	r21, 0x44	; 68
    33d8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	8b a3       	std	Y+35, r24	; 0x23
    33e2:	9c a3       	std	Y+36, r25	; 0x24
    33e4:	ad a3       	std	Y+37, r26	; 0x25
    33e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33e8:	6b a1       	ldd	r22, Y+35	; 0x23
    33ea:	7c a1       	ldd	r23, Y+36	; 0x24
    33ec:	8d a1       	ldd	r24, Y+37	; 0x25
    33ee:	9e a1       	ldd	r25, Y+38	; 0x26
    33f0:	20 e0       	ldi	r18, 0x00	; 0
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	40 e8       	ldi	r20, 0x80	; 128
    33f6:	5f e3       	ldi	r21, 0x3F	; 63
    33f8:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    33fc:	88 23       	and	r24, r24
    33fe:	2c f4       	brge	.+10     	; 0x340a <LCD_init+0x166>
		__ticks = 1;
    3400:	81 e0       	ldi	r24, 0x01	; 1
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	9a a3       	std	Y+34, r25	; 0x22
    3406:	89 a3       	std	Y+33, r24	; 0x21
    3408:	3f c0       	rjmp	.+126    	; 0x3488 <LCD_init+0x1e4>
	else if (__tmp > 65535)
    340a:	6b a1       	ldd	r22, Y+35	; 0x23
    340c:	7c a1       	ldd	r23, Y+36	; 0x24
    340e:	8d a1       	ldd	r24, Y+37	; 0x25
    3410:	9e a1       	ldd	r25, Y+38	; 0x26
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	3f ef       	ldi	r19, 0xFF	; 255
    3416:	4f e7       	ldi	r20, 0x7F	; 127
    3418:	57 e4       	ldi	r21, 0x47	; 71
    341a:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    341e:	18 16       	cp	r1, r24
    3420:	4c f5       	brge	.+82     	; 0x3474 <LCD_init+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3422:	6f a1       	ldd	r22, Y+39	; 0x27
    3424:	78 a5       	ldd	r23, Y+40	; 0x28
    3426:	89 a5       	ldd	r24, Y+41	; 0x29
    3428:	9a a5       	ldd	r25, Y+42	; 0x2a
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	40 e2       	ldi	r20, 0x20	; 32
    3430:	51 e4       	ldi	r21, 0x41	; 65
    3432:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	bc 01       	movw	r22, r24
    343c:	cd 01       	movw	r24, r26
    343e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	9a a3       	std	Y+34, r25	; 0x22
    3448:	89 a3       	std	Y+33, r24	; 0x21
    344a:	0f c0       	rjmp	.+30     	; 0x346a <LCD_init+0x1c6>
    344c:	88 ec       	ldi	r24, 0xC8	; 200
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	98 a3       	std	Y+32, r25	; 0x20
    3452:	8f 8f       	std	Y+31, r24	; 0x1f
    3454:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3456:	98 a1       	ldd	r25, Y+32	; 0x20
    3458:	01 97       	sbiw	r24, 0x01	; 1
    345a:	f1 f7       	brne	.-4      	; 0x3458 <LCD_init+0x1b4>
    345c:	98 a3       	std	Y+32, r25	; 0x20
    345e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3460:	89 a1       	ldd	r24, Y+33	; 0x21
    3462:	9a a1       	ldd	r25, Y+34	; 0x22
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	9a a3       	std	Y+34, r25	; 0x22
    3468:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    346a:	89 a1       	ldd	r24, Y+33	; 0x21
    346c:	9a a1       	ldd	r25, Y+34	; 0x22
    346e:	00 97       	sbiw	r24, 0x00	; 0
    3470:	69 f7       	brne	.-38     	; 0x344c <LCD_init+0x1a8>
    3472:	14 c0       	rjmp	.+40     	; 0x349c <LCD_init+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3474:	6b a1       	ldd	r22, Y+35	; 0x23
    3476:	7c a1       	ldd	r23, Y+36	; 0x24
    3478:	8d a1       	ldd	r24, Y+37	; 0x25
    347a:	9e a1       	ldd	r25, Y+38	; 0x26
    347c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	9a a3       	std	Y+34, r25	; 0x22
    3486:	89 a3       	std	Y+33, r24	; 0x21
    3488:	89 a1       	ldd	r24, Y+33	; 0x21
    348a:	9a a1       	ldd	r25, Y+34	; 0x22
    348c:	9e 8f       	std	Y+30, r25	; 0x1e
    348e:	8d 8f       	std	Y+29, r24	; 0x1d
    3490:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3492:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3494:	01 97       	sbiw	r24, 0x01	; 1
    3496:	f1 f7       	brne	.-4      	; 0x3494 <LCD_init+0x1f0>
    3498:	9e 8f       	std	Y+30, r25	; 0x1e
    349a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_sendCommand(0x03);
    349c:	83 e0       	ldi	r24, 0x03	; 3
    349e:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <LCD_sendCommand>
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	a0 e3       	ldi	r26, 0x30	; 48
    34a8:	b1 e4       	ldi	r27, 0x41	; 65
    34aa:	89 8f       	std	Y+25, r24	; 0x19
    34ac:	9a 8f       	std	Y+26, r25	; 0x1a
    34ae:	ab 8f       	std	Y+27, r26	; 0x1b
    34b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b2:	69 8d       	ldd	r22, Y+25	; 0x19
    34b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	4a ef       	ldi	r20, 0xFA	; 250
    34c0:	54 e4       	ldi	r21, 0x44	; 68
    34c2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	8d 8b       	std	Y+21, r24	; 0x15
    34cc:	9e 8b       	std	Y+22, r25	; 0x16
    34ce:	af 8b       	std	Y+23, r26	; 0x17
    34d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34d2:	6d 89       	ldd	r22, Y+21	; 0x15
    34d4:	7e 89       	ldd	r23, Y+22	; 0x16
    34d6:	8f 89       	ldd	r24, Y+23	; 0x17
    34d8:	98 8d       	ldd	r25, Y+24	; 0x18
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	40 e8       	ldi	r20, 0x80	; 128
    34e0:	5f e3       	ldi	r21, 0x3F	; 63
    34e2:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    34e6:	88 23       	and	r24, r24
    34e8:	2c f4       	brge	.+10     	; 0x34f4 <LCD_init+0x250>
		__ticks = 1;
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	9c 8b       	std	Y+20, r25	; 0x14
    34f0:	8b 8b       	std	Y+19, r24	; 0x13
    34f2:	3f c0       	rjmp	.+126    	; 0x3572 <LCD_init+0x2ce>
	else if (__tmp > 65535)
    34f4:	6d 89       	ldd	r22, Y+21	; 0x15
    34f6:	7e 89       	ldd	r23, Y+22	; 0x16
    34f8:	8f 89       	ldd	r24, Y+23	; 0x17
    34fa:	98 8d       	ldd	r25, Y+24	; 0x18
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	3f ef       	ldi	r19, 0xFF	; 255
    3500:	4f e7       	ldi	r20, 0x7F	; 127
    3502:	57 e4       	ldi	r21, 0x47	; 71
    3504:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3508:	18 16       	cp	r1, r24
    350a:	4c f5       	brge	.+82     	; 0x355e <LCD_init+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    350c:	69 8d       	ldd	r22, Y+25	; 0x19
    350e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3510:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3512:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	40 e2       	ldi	r20, 0x20	; 32
    351a:	51 e4       	ldi	r21, 0x41	; 65
    351c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	bc 01       	movw	r22, r24
    3526:	cd 01       	movw	r24, r26
    3528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	9c 8b       	std	Y+20, r25	; 0x14
    3532:	8b 8b       	std	Y+19, r24	; 0x13
    3534:	0f c0       	rjmp	.+30     	; 0x3554 <LCD_init+0x2b0>
    3536:	88 ec       	ldi	r24, 0xC8	; 200
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	9a 8b       	std	Y+18, r25	; 0x12
    353c:	89 8b       	std	Y+17, r24	; 0x11
    353e:	89 89       	ldd	r24, Y+17	; 0x11
    3540:	9a 89       	ldd	r25, Y+18	; 0x12
    3542:	01 97       	sbiw	r24, 0x01	; 1
    3544:	f1 f7       	brne	.-4      	; 0x3542 <LCD_init+0x29e>
    3546:	9a 8b       	std	Y+18, r25	; 0x12
    3548:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    354a:	8b 89       	ldd	r24, Y+19	; 0x13
    354c:	9c 89       	ldd	r25, Y+20	; 0x14
    354e:	01 97       	sbiw	r24, 0x01	; 1
    3550:	9c 8b       	std	Y+20, r25	; 0x14
    3552:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3554:	8b 89       	ldd	r24, Y+19	; 0x13
    3556:	9c 89       	ldd	r25, Y+20	; 0x14
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	69 f7       	brne	.-38     	; 0x3536 <LCD_init+0x292>
    355c:	14 c0       	rjmp	.+40     	; 0x3586 <LCD_init+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    355e:	6d 89       	ldd	r22, Y+21	; 0x15
    3560:	7e 89       	ldd	r23, Y+22	; 0x16
    3562:	8f 89       	ldd	r24, Y+23	; 0x17
    3564:	98 8d       	ldd	r25, Y+24	; 0x18
    3566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	9c 8b       	std	Y+20, r25	; 0x14
    3570:	8b 8b       	std	Y+19, r24	; 0x13
    3572:	8b 89       	ldd	r24, Y+19	; 0x13
    3574:	9c 89       	ldd	r25, Y+20	; 0x14
    3576:	98 8b       	std	Y+16, r25	; 0x10
    3578:	8f 87       	std	Y+15, r24	; 0x0f
    357a:	8f 85       	ldd	r24, Y+15	; 0x0f
    357c:	98 89       	ldd	r25, Y+16	; 0x10
    357e:	01 97       	sbiw	r24, 0x01	; 1
    3580:	f1 f7       	brne	.-4      	; 0x357e <LCD_init+0x2da>
    3582:	98 8b       	std	Y+16, r25	; 0x10
    3584:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(11);
	LCD_sendCommand(0x03);
    3586:	83 e0       	ldi	r24, 0x03	; 3
    3588:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <LCD_sendCommand>
	LCD_sendCommand(0x02);                  /* send for 4 bit initialization of LCD*/
    358c:	82 e0       	ldi	r24, 0x02	; 2
    358e:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <LCD_sendCommand>
	LCD_sendCommand(0x28);                        /* 2 line, 16*2 matrix in 4-bit mode*/
    3592:	88 e2       	ldi	r24, 0x28	; 40
    3594:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <LCD_sendCommand>
	LCD_sendCommand(0x0c);                       /* Display on cursor off*/
    3598:	8c e0       	ldi	r24, 0x0C	; 12
    359a:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <LCD_sendCommand>
	LCD_sendCommand(0x06);                       /* take courser on to next position (shift cursor to right)*/
    359e:	86 e0       	ldi	r24, 0x06	; 6
    35a0:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <LCD_sendCommand>
	LCD_sendCommand(0x01);                       /* Clear display screen*/
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <LCD_sendCommand>
    35aa:	80 e0       	ldi	r24, 0x00	; 0
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	a0 e0       	ldi	r26, 0x00	; 0
    35b0:	b0 e4       	ldi	r27, 0x40	; 64
    35b2:	8b 87       	std	Y+11, r24	; 0x0b
    35b4:	9c 87       	std	Y+12, r25	; 0x0c
    35b6:	ad 87       	std	Y+13, r26	; 0x0d
    35b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    35bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    35be:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	4a ef       	ldi	r20, 0xFA	; 250
    35c8:	54 e4       	ldi	r21, 0x44	; 68
    35ca:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	8f 83       	std	Y+7, r24	; 0x07
    35d4:	98 87       	std	Y+8, r25	; 0x08
    35d6:	a9 87       	std	Y+9, r26	; 0x09
    35d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35da:	6f 81       	ldd	r22, Y+7	; 0x07
    35dc:	78 85       	ldd	r23, Y+8	; 0x08
    35de:	89 85       	ldd	r24, Y+9	; 0x09
    35e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	40 e8       	ldi	r20, 0x80	; 128
    35e8:	5f e3       	ldi	r21, 0x3F	; 63
    35ea:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    35ee:	88 23       	and	r24, r24
    35f0:	2c f4       	brge	.+10     	; 0x35fc <LCD_init+0x358>
		__ticks = 1;
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	9e 83       	std	Y+6, r25	; 0x06
    35f8:	8d 83       	std	Y+5, r24	; 0x05
    35fa:	3f c0       	rjmp	.+126    	; 0x367a <LCD_init+0x3d6>
	else if (__tmp > 65535)
    35fc:	6f 81       	ldd	r22, Y+7	; 0x07
    35fe:	78 85       	ldd	r23, Y+8	; 0x08
    3600:	89 85       	ldd	r24, Y+9	; 0x09
    3602:	9a 85       	ldd	r25, Y+10	; 0x0a
    3604:	20 e0       	ldi	r18, 0x00	; 0
    3606:	3f ef       	ldi	r19, 0xFF	; 255
    3608:	4f e7       	ldi	r20, 0x7F	; 127
    360a:	57 e4       	ldi	r21, 0x47	; 71
    360c:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3610:	18 16       	cp	r1, r24
    3612:	4c f5       	brge	.+82     	; 0x3666 <LCD_init+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3614:	6b 85       	ldd	r22, Y+11	; 0x0b
    3616:	7c 85       	ldd	r23, Y+12	; 0x0c
    3618:	8d 85       	ldd	r24, Y+13	; 0x0d
    361a:	9e 85       	ldd	r25, Y+14	; 0x0e
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	40 e2       	ldi	r20, 0x20	; 32
    3622:	51 e4       	ldi	r21, 0x41	; 65
    3624:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3628:	dc 01       	movw	r26, r24
    362a:	cb 01       	movw	r24, r22
    362c:	bc 01       	movw	r22, r24
    362e:	cd 01       	movw	r24, r26
    3630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	9e 83       	std	Y+6, r25	; 0x06
    363a:	8d 83       	std	Y+5, r24	; 0x05
    363c:	0f c0       	rjmp	.+30     	; 0x365c <LCD_init+0x3b8>
    363e:	88 ec       	ldi	r24, 0xC8	; 200
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	9c 83       	std	Y+4, r25	; 0x04
    3644:	8b 83       	std	Y+3, r24	; 0x03
    3646:	8b 81       	ldd	r24, Y+3	; 0x03
    3648:	9c 81       	ldd	r25, Y+4	; 0x04
    364a:	01 97       	sbiw	r24, 0x01	; 1
    364c:	f1 f7       	brne	.-4      	; 0x364a <LCD_init+0x3a6>
    364e:	9c 83       	std	Y+4, r25	; 0x04
    3650:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3652:	8d 81       	ldd	r24, Y+5	; 0x05
    3654:	9e 81       	ldd	r25, Y+6	; 0x06
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	9e 83       	std	Y+6, r25	; 0x06
    365a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    365c:	8d 81       	ldd	r24, Y+5	; 0x05
    365e:	9e 81       	ldd	r25, Y+6	; 0x06
    3660:	00 97       	sbiw	r24, 0x00	; 0
    3662:	69 f7       	brne	.-38     	; 0x363e <LCD_init+0x39a>
    3664:	14 c0       	rjmp	.+40     	; 0x368e <LCD_init+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3666:	6f 81       	ldd	r22, Y+7	; 0x07
    3668:	78 85       	ldd	r23, Y+8	; 0x08
    366a:	89 85       	ldd	r24, Y+9	; 0x09
    366c:	9a 85       	ldd	r25, Y+10	; 0x0a
    366e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	9e 83       	std	Y+6, r25	; 0x06
    3678:	8d 83       	std	Y+5, r24	; 0x05
    367a:	8d 81       	ldd	r24, Y+5	; 0x05
    367c:	9e 81       	ldd	r25, Y+6	; 0x06
    367e:	9a 83       	std	Y+2, r25	; 0x02
    3680:	89 83       	std	Y+1, r24	; 0x01
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	9a 81       	ldd	r25, Y+2	; 0x02
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	f1 f7       	brne	.-4      	; 0x3686 <LCD_init+0x3e2>
    368a:	9a 83       	std	Y+2, r25	; 0x02
    368c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    368e:	e8 96       	adiw	r28, 0x38	; 56
    3690:	0f b6       	in	r0, 0x3f	; 63
    3692:	f8 94       	cli
    3694:	de bf       	out	0x3e, r29	; 62
    3696:	0f be       	out	0x3f, r0	; 63
    3698:	cd bf       	out	0x3d, r28	; 61
    369a:	cf 91       	pop	r28
    369c:	df 91       	pop	r29
    369e:	08 95       	ret

000036a0 <LCD_sendCommand>:
void LCD_sendCommand (uint8 LCD_Command)
{
    36a0:	0f 93       	push	r16
    36a2:	1f 93       	push	r17
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	cd b7       	in	r28, 0x3d	; 61
    36aa:	de b7       	in	r29, 0x3e	; 62
    36ac:	c9 54       	subi	r28, 0x49	; 73
    36ae:	d0 40       	sbci	r29, 0x00	; 0
    36b0:	0f b6       	in	r0, 0x3f	; 63
    36b2:	f8 94       	cli
    36b4:	de bf       	out	0x3e, r29	; 62
    36b6:	0f be       	out	0x3f, r0	; 63
    36b8:	cd bf       	out	0x3d, r28	; 61
    36ba:	fe 01       	movw	r30, r28
    36bc:	e7 5b       	subi	r30, 0xB7	; 183
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	80 83       	st	Z, r24
	#ifdef LCD_4BIT_MODE
	LCD_HWPORT = (LCD_HWPORT & 0x0F) | (LCD_Command & 0xF0); /* upper nibble of 8 bit */
    36c2:	ab e3       	ldi	r26, 0x3B	; 59
    36c4:	b0 e0       	ldi	r27, 0x00	; 0
    36c6:	eb e3       	ldi	r30, 0x3B	; 59
    36c8:	f0 e0       	ldi	r31, 0x00	; 0
    36ca:	80 81       	ld	r24, Z
    36cc:	98 2f       	mov	r25, r24
    36ce:	9f 70       	andi	r25, 0x0F	; 15
    36d0:	fe 01       	movw	r30, r28
    36d2:	e7 5b       	subi	r30, 0xB7	; 183
    36d4:	ff 4f       	sbci	r31, 0xFF	; 255
    36d6:	80 81       	ld	r24, Z
    36d8:	80 7f       	andi	r24, 0xF0	; 240
    36da:	89 2b       	or	r24, r25
    36dc:	8c 93       	st	X, r24
	LCD_HWPORT &= ~ (1<<LCD_RS);
    36de:	ab e3       	ldi	r26, 0x3B	; 59
    36e0:	b0 e0       	ldi	r27, 0x00	; 0
    36e2:	eb e3       	ldi	r30, 0x3B	; 59
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	80 81       	ld	r24, Z
    36e8:	8d 7f       	andi	r24, 0xFD	; 253
    36ea:	8c 93       	st	X, r24
	LCD_HWPORT |= (1<<LCD_EN);
    36ec:	ab e3       	ldi	r26, 0x3B	; 59
    36ee:	b0 e0       	ldi	r27, 0x00	; 0
    36f0:	eb e3       	ldi	r30, 0x3B	; 59
    36f2:	f0 e0       	ldi	r31, 0x00	; 0
    36f4:	80 81       	ld	r24, Z
    36f6:	88 60       	ori	r24, 0x08	; 8
    36f8:	8c 93       	st	X, r24
    36fa:	fe 01       	movw	r30, r28
    36fc:	eb 5b       	subi	r30, 0xBB	; 187
    36fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3700:	80 e0       	ldi	r24, 0x00	; 0
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	a0 e0       	ldi	r26, 0x00	; 0
    3706:	b0 e4       	ldi	r27, 0x40	; 64
    3708:	80 83       	st	Z, r24
    370a:	91 83       	std	Z+1, r25	; 0x01
    370c:	a2 83       	std	Z+2, r26	; 0x02
    370e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3710:	8e 01       	movw	r16, r28
    3712:	0f 5b       	subi	r16, 0xBF	; 191
    3714:	1f 4f       	sbci	r17, 0xFF	; 255
    3716:	fe 01       	movw	r30, r28
    3718:	eb 5b       	subi	r30, 0xBB	; 187
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	60 81       	ld	r22, Z
    371e:	71 81       	ldd	r23, Z+1	; 0x01
    3720:	82 81       	ldd	r24, Z+2	; 0x02
    3722:	93 81       	ldd	r25, Z+3	; 0x03
    3724:	2b ea       	ldi	r18, 0xAB	; 171
    3726:	3a ea       	ldi	r19, 0xAA	; 170
    3728:	4a e2       	ldi	r20, 0x2A	; 42
    372a:	50 e4       	ldi	r21, 0x40	; 64
    372c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3730:	dc 01       	movw	r26, r24
    3732:	cb 01       	movw	r24, r22
    3734:	f8 01       	movw	r30, r16
    3736:	80 83       	st	Z, r24
    3738:	91 83       	std	Z+1, r25	; 0x01
    373a:	a2 83       	std	Z+2, r26	; 0x02
    373c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    373e:	fe 01       	movw	r30, r28
    3740:	ef 5b       	subi	r30, 0xBF	; 191
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	60 81       	ld	r22, Z
    3746:	71 81       	ldd	r23, Z+1	; 0x01
    3748:	82 81       	ldd	r24, Z+2	; 0x02
    374a:	93 81       	ldd	r25, Z+3	; 0x03
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	40 e8       	ldi	r20, 0x80	; 128
    3752:	5f e3       	ldi	r21, 0x3F	; 63
    3754:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3758:	88 23       	and	r24, r24
    375a:	34 f4       	brge	.+12     	; 0x3768 <LCD_sendCommand+0xc8>
		__ticks = 1;
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	fe 01       	movw	r30, r28
    3760:	e0 5c       	subi	r30, 0xC0	; 192
    3762:	ff 4f       	sbci	r31, 0xFF	; 255
    3764:	80 83       	st	Z, r24
    3766:	9d c0       	rjmp	.+314    	; 0x38a2 <LCD_sendCommand+0x202>
	else if (__tmp > 255)
    3768:	fe 01       	movw	r30, r28
    376a:	ef 5b       	subi	r30, 0xBF	; 191
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	60 81       	ld	r22, Z
    3770:	71 81       	ldd	r23, Z+1	; 0x01
    3772:	82 81       	ldd	r24, Z+2	; 0x02
    3774:	93 81       	ldd	r25, Z+3	; 0x03
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	4f e7       	ldi	r20, 0x7F	; 127
    377c:	53 e4       	ldi	r21, 0x43	; 67
    377e:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3782:	18 16       	cp	r1, r24
    3784:	0c f0       	brlt	.+2      	; 0x3788 <LCD_sendCommand+0xe8>
    3786:	7e c0       	rjmp	.+252    	; 0x3884 <LCD_sendCommand+0x1e4>
	{
		_delay_ms(__us / 1000.0);
    3788:	fe 01       	movw	r30, r28
    378a:	eb 5b       	subi	r30, 0xBB	; 187
    378c:	ff 4f       	sbci	r31, 0xFF	; 255
    378e:	60 81       	ld	r22, Z
    3790:	71 81       	ldd	r23, Z+1	; 0x01
    3792:	82 81       	ldd	r24, Z+2	; 0x02
    3794:	93 81       	ldd	r25, Z+3	; 0x03
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	4a e7       	ldi	r20, 0x7A	; 122
    379c:	54 e4       	ldi	r21, 0x44	; 68
    379e:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__divsf3>
    37a2:	dc 01       	movw	r26, r24
    37a4:	cb 01       	movw	r24, r22
    37a6:	8c af       	std	Y+60, r24	; 0x3c
    37a8:	9d af       	std	Y+61, r25	; 0x3d
    37aa:	ae af       	std	Y+62, r26	; 0x3e
    37ac:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    37b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    37b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    37b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	4a ef       	ldi	r20, 0xFA	; 250
    37bc:	54 e4       	ldi	r21, 0x44	; 68
    37be:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	88 af       	std	Y+56, r24	; 0x38
    37c8:	99 af       	std	Y+57, r25	; 0x39
    37ca:	aa af       	std	Y+58, r26	; 0x3a
    37cc:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    37ce:	68 ad       	ldd	r22, Y+56	; 0x38
    37d0:	79 ad       	ldd	r23, Y+57	; 0x39
    37d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    37d4:	9b ad       	ldd	r25, Y+59	; 0x3b
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	40 e8       	ldi	r20, 0x80	; 128
    37dc:	5f e3       	ldi	r21, 0x3F	; 63
    37de:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    37e2:	88 23       	and	r24, r24
    37e4:	2c f4       	brge	.+10     	; 0x37f0 <LCD_sendCommand+0x150>
		__ticks = 1;
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	9f ab       	std	Y+55, r25	; 0x37
    37ec:	8e ab       	std	Y+54, r24	; 0x36
    37ee:	3f c0       	rjmp	.+126    	; 0x386e <LCD_sendCommand+0x1ce>
	else if (__tmp > 65535)
    37f0:	68 ad       	ldd	r22, Y+56	; 0x38
    37f2:	79 ad       	ldd	r23, Y+57	; 0x39
    37f4:	8a ad       	ldd	r24, Y+58	; 0x3a
    37f6:	9b ad       	ldd	r25, Y+59	; 0x3b
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	3f ef       	ldi	r19, 0xFF	; 255
    37fc:	4f e7       	ldi	r20, 0x7F	; 127
    37fe:	57 e4       	ldi	r21, 0x47	; 71
    3800:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3804:	18 16       	cp	r1, r24
    3806:	4c f5       	brge	.+82     	; 0x385a <LCD_sendCommand+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3808:	6c ad       	ldd	r22, Y+60	; 0x3c
    380a:	7d ad       	ldd	r23, Y+61	; 0x3d
    380c:	8e ad       	ldd	r24, Y+62	; 0x3e
    380e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	40 e2       	ldi	r20, 0x20	; 32
    3816:	51 e4       	ldi	r21, 0x41	; 65
    3818:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	bc 01       	movw	r22, r24
    3822:	cd 01       	movw	r24, r26
    3824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	9f ab       	std	Y+55, r25	; 0x37
    382e:	8e ab       	std	Y+54, r24	; 0x36
    3830:	0f c0       	rjmp	.+30     	; 0x3850 <LCD_sendCommand+0x1b0>
    3832:	88 ec       	ldi	r24, 0xC8	; 200
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	9d ab       	std	Y+53, r25	; 0x35
    3838:	8c ab       	std	Y+52, r24	; 0x34
    383a:	8c a9       	ldd	r24, Y+52	; 0x34
    383c:	9d a9       	ldd	r25, Y+53	; 0x35
    383e:	01 97       	sbiw	r24, 0x01	; 1
    3840:	f1 f7       	brne	.-4      	; 0x383e <LCD_sendCommand+0x19e>
    3842:	9d ab       	std	Y+53, r25	; 0x35
    3844:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3846:	8e a9       	ldd	r24, Y+54	; 0x36
    3848:	9f a9       	ldd	r25, Y+55	; 0x37
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	9f ab       	std	Y+55, r25	; 0x37
    384e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3850:	8e a9       	ldd	r24, Y+54	; 0x36
    3852:	9f a9       	ldd	r25, Y+55	; 0x37
    3854:	00 97       	sbiw	r24, 0x00	; 0
    3856:	69 f7       	brne	.-38     	; 0x3832 <LCD_sendCommand+0x192>
    3858:	2d c0       	rjmp	.+90     	; 0x38b4 <LCD_sendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    385a:	68 ad       	ldd	r22, Y+56	; 0x38
    385c:	79 ad       	ldd	r23, Y+57	; 0x39
    385e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3860:	9b ad       	ldd	r25, Y+59	; 0x3b
    3862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3866:	dc 01       	movw	r26, r24
    3868:	cb 01       	movw	r24, r22
    386a:	9f ab       	std	Y+55, r25	; 0x37
    386c:	8e ab       	std	Y+54, r24	; 0x36
    386e:	8e a9       	ldd	r24, Y+54	; 0x36
    3870:	9f a9       	ldd	r25, Y+55	; 0x37
    3872:	9b ab       	std	Y+51, r25	; 0x33
    3874:	8a ab       	std	Y+50, r24	; 0x32
    3876:	8a a9       	ldd	r24, Y+50	; 0x32
    3878:	9b a9       	ldd	r25, Y+51	; 0x33
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	f1 f7       	brne	.-4      	; 0x387a <LCD_sendCommand+0x1da>
    387e:	9b ab       	std	Y+51, r25	; 0x33
    3880:	8a ab       	std	Y+50, r24	; 0x32
    3882:	18 c0       	rjmp	.+48     	; 0x38b4 <LCD_sendCommand+0x214>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3884:	fe 01       	movw	r30, r28
    3886:	ef 5b       	subi	r30, 0xBF	; 191
    3888:	ff 4f       	sbci	r31, 0xFF	; 255
    388a:	60 81       	ld	r22, Z
    388c:	71 81       	ldd	r23, Z+1	; 0x01
    388e:	82 81       	ldd	r24, Z+2	; 0x02
    3890:	93 81       	ldd	r25, Z+3	; 0x03
    3892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3896:	dc 01       	movw	r26, r24
    3898:	cb 01       	movw	r24, r22
    389a:	fe 01       	movw	r30, r28
    389c:	e0 5c       	subi	r30, 0xC0	; 192
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	80 83       	st	Z, r24
    38a2:	fe 01       	movw	r30, r28
    38a4:	e0 5c       	subi	r30, 0xC0	; 192
    38a6:	ff 4f       	sbci	r31, 0xFF	; 255
    38a8:	80 81       	ld	r24, Z
    38aa:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    38ac:	89 a9       	ldd	r24, Y+49	; 0x31
    38ae:	8a 95       	dec	r24
    38b0:	f1 f7       	brne	.-4      	; 0x38ae <LCD_sendCommand+0x20e>
    38b2:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(2);
	LCD_HWPORT &= ~ (1<<LCD_EN);
    38b4:	ab e3       	ldi	r26, 0x3B	; 59
    38b6:	b0 e0       	ldi	r27, 0x00	; 0
    38b8:	eb e3       	ldi	r30, 0x3B	; 59
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	80 81       	ld	r24, Z
    38be:	87 7f       	andi	r24, 0xF7	; 247
    38c0:	8c 93       	st	X, r24
    38c2:	80 e0       	ldi	r24, 0x00	; 0
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	a8 e4       	ldi	r26, 0x48	; 72
    38c8:	b3 e4       	ldi	r27, 0x43	; 67
    38ca:	8d a7       	std	Y+45, r24	; 0x2d
    38cc:	9e a7       	std	Y+46, r25	; 0x2e
    38ce:	af a7       	std	Y+47, r26	; 0x2f
    38d0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    38d2:	6d a5       	ldd	r22, Y+45	; 0x2d
    38d4:	7e a5       	ldd	r23, Y+46	; 0x2e
    38d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    38d8:	98 a9       	ldd	r25, Y+48	; 0x30
    38da:	2b ea       	ldi	r18, 0xAB	; 171
    38dc:	3a ea       	ldi	r19, 0xAA	; 170
    38de:	4a e2       	ldi	r20, 0x2A	; 42
    38e0:	50 e4       	ldi	r21, 0x40	; 64
    38e2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	89 a7       	std	Y+41, r24	; 0x29
    38ec:	9a a7       	std	Y+42, r25	; 0x2a
    38ee:	ab a7       	std	Y+43, r26	; 0x2b
    38f0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    38f2:	69 a5       	ldd	r22, Y+41	; 0x29
    38f4:	7a a5       	ldd	r23, Y+42	; 0x2a
    38f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    38f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	40 e8       	ldi	r20, 0x80	; 128
    3900:	5f e3       	ldi	r21, 0x3F	; 63
    3902:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3906:	88 23       	and	r24, r24
    3908:	1c f4       	brge	.+6      	; 0x3910 <LCD_sendCommand+0x270>
		__ticks = 1;
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	88 a7       	std	Y+40, r24	; 0x28
    390e:	91 c0       	rjmp	.+290    	; 0x3a32 <LCD_sendCommand+0x392>
	else if (__tmp > 255)
    3910:	69 a5       	ldd	r22, Y+41	; 0x29
    3912:	7a a5       	ldd	r23, Y+42	; 0x2a
    3914:	8b a5       	ldd	r24, Y+43	; 0x2b
    3916:	9c a5       	ldd	r25, Y+44	; 0x2c
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	4f e7       	ldi	r20, 0x7F	; 127
    391e:	53 e4       	ldi	r21, 0x43	; 67
    3920:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3924:	18 16       	cp	r1, r24
    3926:	0c f0       	brlt	.+2      	; 0x392a <LCD_sendCommand+0x28a>
    3928:	7b c0       	rjmp	.+246    	; 0x3a20 <LCD_sendCommand+0x380>
	{
		_delay_ms(__us / 1000.0);
    392a:	6d a5       	ldd	r22, Y+45	; 0x2d
    392c:	7e a5       	ldd	r23, Y+46	; 0x2e
    392e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3930:	98 a9       	ldd	r25, Y+48	; 0x30
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	4a e7       	ldi	r20, 0x7A	; 122
    3938:	54 e4       	ldi	r21, 0x44	; 68
    393a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__divsf3>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	8c a3       	std	Y+36, r24	; 0x24
    3944:	9d a3       	std	Y+37, r25	; 0x25
    3946:	ae a3       	std	Y+38, r26	; 0x26
    3948:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    394a:	6c a1       	ldd	r22, Y+36	; 0x24
    394c:	7d a1       	ldd	r23, Y+37	; 0x25
    394e:	8e a1       	ldd	r24, Y+38	; 0x26
    3950:	9f a1       	ldd	r25, Y+39	; 0x27
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	4a ef       	ldi	r20, 0xFA	; 250
    3958:	54 e4       	ldi	r21, 0x44	; 68
    395a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	88 a3       	std	Y+32, r24	; 0x20
    3964:	99 a3       	std	Y+33, r25	; 0x21
    3966:	aa a3       	std	Y+34, r26	; 0x22
    3968:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    396a:	68 a1       	ldd	r22, Y+32	; 0x20
    396c:	79 a1       	ldd	r23, Y+33	; 0x21
    396e:	8a a1       	ldd	r24, Y+34	; 0x22
    3970:	9b a1       	ldd	r25, Y+35	; 0x23
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	40 e8       	ldi	r20, 0x80	; 128
    3978:	5f e3       	ldi	r21, 0x3F	; 63
    397a:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    397e:	88 23       	and	r24, r24
    3980:	2c f4       	brge	.+10     	; 0x398c <LCD_sendCommand+0x2ec>
		__ticks = 1;
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	9f 8f       	std	Y+31, r25	; 0x1f
    3988:	8e 8f       	std	Y+30, r24	; 0x1e
    398a:	3f c0       	rjmp	.+126    	; 0x3a0a <LCD_sendCommand+0x36a>
	else if (__tmp > 65535)
    398c:	68 a1       	ldd	r22, Y+32	; 0x20
    398e:	79 a1       	ldd	r23, Y+33	; 0x21
    3990:	8a a1       	ldd	r24, Y+34	; 0x22
    3992:	9b a1       	ldd	r25, Y+35	; 0x23
    3994:	20 e0       	ldi	r18, 0x00	; 0
    3996:	3f ef       	ldi	r19, 0xFF	; 255
    3998:	4f e7       	ldi	r20, 0x7F	; 127
    399a:	57 e4       	ldi	r21, 0x47	; 71
    399c:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    39a0:	18 16       	cp	r1, r24
    39a2:	4c f5       	brge	.+82     	; 0x39f6 <LCD_sendCommand+0x356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a4:	6c a1       	ldd	r22, Y+36	; 0x24
    39a6:	7d a1       	ldd	r23, Y+37	; 0x25
    39a8:	8e a1       	ldd	r24, Y+38	; 0x26
    39aa:	9f a1       	ldd	r25, Y+39	; 0x27
    39ac:	20 e0       	ldi	r18, 0x00	; 0
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	40 e2       	ldi	r20, 0x20	; 32
    39b2:	51 e4       	ldi	r21, 0x41	; 65
    39b4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	bc 01       	movw	r22, r24
    39be:	cd 01       	movw	r24, r26
    39c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	9f 8f       	std	Y+31, r25	; 0x1f
    39ca:	8e 8f       	std	Y+30, r24	; 0x1e
    39cc:	0f c0       	rjmp	.+30     	; 0x39ec <LCD_sendCommand+0x34c>
    39ce:	88 ec       	ldi	r24, 0xC8	; 200
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	9d 8f       	std	Y+29, r25	; 0x1d
    39d4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39d8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	f1 f7       	brne	.-4      	; 0x39da <LCD_sendCommand+0x33a>
    39de:	9d 8f       	std	Y+29, r25	; 0x1d
    39e0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    39e6:	01 97       	sbiw	r24, 0x01	; 1
    39e8:	9f 8f       	std	Y+31, r25	; 0x1f
    39ea:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39ee:	9f 8d       	ldd	r25, Y+31	; 0x1f
    39f0:	00 97       	sbiw	r24, 0x00	; 0
    39f2:	69 f7       	brne	.-38     	; 0x39ce <LCD_sendCommand+0x32e>
    39f4:	24 c0       	rjmp	.+72     	; 0x3a3e <LCD_sendCommand+0x39e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f6:	68 a1       	ldd	r22, Y+32	; 0x20
    39f8:	79 a1       	ldd	r23, Y+33	; 0x21
    39fa:	8a a1       	ldd	r24, Y+34	; 0x22
    39fc:	9b a1       	ldd	r25, Y+35	; 0x23
    39fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	9f 8f       	std	Y+31, r25	; 0x1f
    3a08:	8e 8f       	std	Y+30, r24	; 0x1e
    3a0a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a0c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3a0e:	9b 8f       	std	Y+27, r25	; 0x1b
    3a10:	8a 8f       	std	Y+26, r24	; 0x1a
    3a12:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3a14:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3a16:	01 97       	sbiw	r24, 0x01	; 1
    3a18:	f1 f7       	brne	.-4      	; 0x3a16 <LCD_sendCommand+0x376>
    3a1a:	9b 8f       	std	Y+27, r25	; 0x1b
    3a1c:	8a 8f       	std	Y+26, r24	; 0x1a
    3a1e:	0f c0       	rjmp	.+30     	; 0x3a3e <LCD_sendCommand+0x39e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a20:	69 a5       	ldd	r22, Y+41	; 0x29
    3a22:	7a a5       	ldd	r23, Y+42	; 0x2a
    3a24:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a26:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	cb 01       	movw	r24, r22
    3a30:	88 a7       	std	Y+40, r24	; 0x28
    3a32:	88 a5       	ldd	r24, Y+40	; 0x28
    3a34:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a36:	89 8d       	ldd	r24, Y+25	; 0x19
    3a38:	8a 95       	dec	r24
    3a3a:	f1 f7       	brne	.-4      	; 0x3a38 <LCD_sendCommand+0x398>
    3a3c:	89 8f       	std	Y+25, r24	; 0x19
	
	_delay_us(200);
	
	LCD_HWPORT = (LCD_HWPORT & 0x0F) | (LCD_Command << 4);  /* lower nibble of 8 bit */
    3a3e:	ab e3       	ldi	r26, 0x3B	; 59
    3a40:	b0 e0       	ldi	r27, 0x00	; 0
    3a42:	eb e3       	ldi	r30, 0x3B	; 59
    3a44:	f0 e0       	ldi	r31, 0x00	; 0
    3a46:	80 81       	ld	r24, Z
    3a48:	28 2f       	mov	r18, r24
    3a4a:	2f 70       	andi	r18, 0x0F	; 15
    3a4c:	fe 01       	movw	r30, r28
    3a4e:	e7 5b       	subi	r30, 0xB7	; 183
    3a50:	ff 4f       	sbci	r31, 0xFF	; 255
    3a52:	80 81       	ld	r24, Z
    3a54:	88 2f       	mov	r24, r24
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	82 95       	swap	r24
    3a5a:	92 95       	swap	r25
    3a5c:	90 7f       	andi	r25, 0xF0	; 240
    3a5e:	98 27       	eor	r25, r24
    3a60:	80 7f       	andi	r24, 0xF0	; 240
    3a62:	98 27       	eor	r25, r24
    3a64:	82 2b       	or	r24, r18
    3a66:	8c 93       	st	X, r24
	LCD_HWPORT |= (1<<LCD_EN);
    3a68:	ab e3       	ldi	r26, 0x3B	; 59
    3a6a:	b0 e0       	ldi	r27, 0x00	; 0
    3a6c:	eb e3       	ldi	r30, 0x3B	; 59
    3a6e:	f0 e0       	ldi	r31, 0x00	; 0
    3a70:	80 81       	ld	r24, Z
    3a72:	88 60       	ori	r24, 0x08	; 8
    3a74:	8c 93       	st	X, r24
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	a0 e0       	ldi	r26, 0x00	; 0
    3a7c:	b0 e4       	ldi	r27, 0x40	; 64
    3a7e:	8d 8b       	std	Y+21, r24	; 0x15
    3a80:	9e 8b       	std	Y+22, r25	; 0x16
    3a82:	af 8b       	std	Y+23, r26	; 0x17
    3a84:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a86:	6d 89       	ldd	r22, Y+21	; 0x15
    3a88:	7e 89       	ldd	r23, Y+22	; 0x16
    3a8a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a8e:	2b ea       	ldi	r18, 0xAB	; 171
    3a90:	3a ea       	ldi	r19, 0xAA	; 170
    3a92:	4a e2       	ldi	r20, 0x2A	; 42
    3a94:	50 e4       	ldi	r21, 0x40	; 64
    3a96:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3a9a:	dc 01       	movw	r26, r24
    3a9c:	cb 01       	movw	r24, r22
    3a9e:	89 8b       	std	Y+17, r24	; 0x11
    3aa0:	9a 8b       	std	Y+18, r25	; 0x12
    3aa2:	ab 8b       	std	Y+19, r26	; 0x13
    3aa4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3aa6:	69 89       	ldd	r22, Y+17	; 0x11
    3aa8:	7a 89       	ldd	r23, Y+18	; 0x12
    3aaa:	8b 89       	ldd	r24, Y+19	; 0x13
    3aac:	9c 89       	ldd	r25, Y+20	; 0x14
    3aae:	20 e0       	ldi	r18, 0x00	; 0
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	40 e8       	ldi	r20, 0x80	; 128
    3ab4:	5f e3       	ldi	r21, 0x3F	; 63
    3ab6:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3aba:	88 23       	and	r24, r24
    3abc:	1c f4       	brge	.+6      	; 0x3ac4 <LCD_sendCommand+0x424>
		__ticks = 1;
    3abe:	81 e0       	ldi	r24, 0x01	; 1
    3ac0:	88 8b       	std	Y+16, r24	; 0x10
    3ac2:	91 c0       	rjmp	.+290    	; 0x3be6 <LCD_sendCommand+0x546>
	else if (__tmp > 255)
    3ac4:	69 89       	ldd	r22, Y+17	; 0x11
    3ac6:	7a 89       	ldd	r23, Y+18	; 0x12
    3ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aca:	9c 89       	ldd	r25, Y+20	; 0x14
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	4f e7       	ldi	r20, 0x7F	; 127
    3ad2:	53 e4       	ldi	r21, 0x43	; 67
    3ad4:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3ad8:	18 16       	cp	r1, r24
    3ada:	0c f0       	brlt	.+2      	; 0x3ade <LCD_sendCommand+0x43e>
    3adc:	7b c0       	rjmp	.+246    	; 0x3bd4 <LCD_sendCommand+0x534>
	{
		_delay_ms(__us / 1000.0);
    3ade:	6d 89       	ldd	r22, Y+21	; 0x15
    3ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	4a e7       	ldi	r20, 0x7A	; 122
    3aec:	54 e4       	ldi	r21, 0x44	; 68
    3aee:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__divsf3>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	8c 87       	std	Y+12, r24	; 0x0c
    3af8:	9d 87       	std	Y+13, r25	; 0x0d
    3afa:	ae 87       	std	Y+14, r26	; 0x0e
    3afc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3afe:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b00:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b02:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b04:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	4a ef       	ldi	r20, 0xFA	; 250
    3b0c:	54 e4       	ldi	r21, 0x44	; 68
    3b0e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	88 87       	std	Y+8, r24	; 0x08
    3b18:	99 87       	std	Y+9, r25	; 0x09
    3b1a:	aa 87       	std	Y+10, r26	; 0x0a
    3b1c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3b1e:	68 85       	ldd	r22, Y+8	; 0x08
    3b20:	79 85       	ldd	r23, Y+9	; 0x09
    3b22:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b24:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	40 e8       	ldi	r20, 0x80	; 128
    3b2c:	5f e3       	ldi	r21, 0x3F	; 63
    3b2e:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3b32:	88 23       	and	r24, r24
    3b34:	2c f4       	brge	.+10     	; 0x3b40 <LCD_sendCommand+0x4a0>
		__ticks = 1;
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	9f 83       	std	Y+7, r25	; 0x07
    3b3c:	8e 83       	std	Y+6, r24	; 0x06
    3b3e:	3f c0       	rjmp	.+126    	; 0x3bbe <LCD_sendCommand+0x51e>
	else if (__tmp > 65535)
    3b40:	68 85       	ldd	r22, Y+8	; 0x08
    3b42:	79 85       	ldd	r23, Y+9	; 0x09
    3b44:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b46:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b48:	20 e0       	ldi	r18, 0x00	; 0
    3b4a:	3f ef       	ldi	r19, 0xFF	; 255
    3b4c:	4f e7       	ldi	r20, 0x7F	; 127
    3b4e:	57 e4       	ldi	r21, 0x47	; 71
    3b50:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3b54:	18 16       	cp	r1, r24
    3b56:	4c f5       	brge	.+82     	; 0x3baa <LCD_sendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b58:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b5a:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	40 e2       	ldi	r20, 0x20	; 32
    3b66:	51 e4       	ldi	r21, 0x41	; 65
    3b68:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	bc 01       	movw	r22, r24
    3b72:	cd 01       	movw	r24, r26
    3b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b78:	dc 01       	movw	r26, r24
    3b7a:	cb 01       	movw	r24, r22
    3b7c:	9f 83       	std	Y+7, r25	; 0x07
    3b7e:	8e 83       	std	Y+6, r24	; 0x06
    3b80:	0f c0       	rjmp	.+30     	; 0x3ba0 <LCD_sendCommand+0x500>
    3b82:	88 ec       	ldi	r24, 0xC8	; 200
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	9d 83       	std	Y+5, r25	; 0x05
    3b88:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b8c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b8e:	01 97       	sbiw	r24, 0x01	; 1
    3b90:	f1 f7       	brne	.-4      	; 0x3b8e <LCD_sendCommand+0x4ee>
    3b92:	9d 83       	std	Y+5, r25	; 0x05
    3b94:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b96:	8e 81       	ldd	r24, Y+6	; 0x06
    3b98:	9f 81       	ldd	r25, Y+7	; 0x07
    3b9a:	01 97       	sbiw	r24, 0x01	; 1
    3b9c:	9f 83       	std	Y+7, r25	; 0x07
    3b9e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ba2:	9f 81       	ldd	r25, Y+7	; 0x07
    3ba4:	00 97       	sbiw	r24, 0x00	; 0
    3ba6:	69 f7       	brne	.-38     	; 0x3b82 <LCD_sendCommand+0x4e2>
    3ba8:	24 c0       	rjmp	.+72     	; 0x3bf2 <LCD_sendCommand+0x552>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3baa:	68 85       	ldd	r22, Y+8	; 0x08
    3bac:	79 85       	ldd	r23, Y+9	; 0x09
    3bae:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22
    3bba:	9f 83       	std	Y+7, r25	; 0x07
    3bbc:	8e 83       	std	Y+6, r24	; 0x06
    3bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    3bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    3bc2:	9b 83       	std	Y+3, r25	; 0x03
    3bc4:	8a 83       	std	Y+2, r24	; 0x02
    3bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    3bca:	01 97       	sbiw	r24, 0x01	; 1
    3bcc:	f1 f7       	brne	.-4      	; 0x3bca <LCD_sendCommand+0x52a>
    3bce:	9b 83       	std	Y+3, r25	; 0x03
    3bd0:	8a 83       	std	Y+2, r24	; 0x02
    3bd2:	0f c0       	rjmp	.+30     	; 0x3bf2 <LCD_sendCommand+0x552>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3bd4:	69 89       	ldd	r22, Y+17	; 0x11
    3bd6:	7a 89       	ldd	r23, Y+18	; 0x12
    3bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    3bda:	9c 89       	ldd	r25, Y+20	; 0x14
    3bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	88 8b       	std	Y+16, r24	; 0x10
    3be6:	88 89       	ldd	r24, Y+16	; 0x10
    3be8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	8a 95       	dec	r24
    3bee:	f1 f7       	brne	.-4      	; 0x3bec <LCD_sendCommand+0x54c>
    3bf0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);
	LCD_HWPORT &= ~ (1<<LCD_EN);
    3bf2:	ab e3       	ldi	r26, 0x3B	; 59
    3bf4:	b0 e0       	ldi	r27, 0x00	; 0
    3bf6:	eb e3       	ldi	r30, 0x3B	; 59
    3bf8:	f0 e0       	ldi	r31, 0x00	; 0
    3bfa:	80 81       	ld	r24, Z
    3bfc:	87 7f       	andi	r24, 0xF7	; 247
    3bfe:	8c 93       	st	X, r24
	LCD_HWPORT_1 &= ~ (1<<LCD_RS);
	LCD_HWPORT_2 |= (1<<LCD_EN);
	_delay_us(2);
	LCD_HWPORT_2 &= ~ (1<<LCD_EN);
	#endif
}
    3c00:	c7 5b       	subi	r28, 0xB7	; 183
    3c02:	df 4f       	sbci	r29, 0xFF	; 255
    3c04:	0f b6       	in	r0, 0x3f	; 63
    3c06:	f8 94       	cli
    3c08:	de bf       	out	0x3e, r29	; 62
    3c0a:	0f be       	out	0x3f, r0	; 63
    3c0c:	cd bf       	out	0x3d, r28	; 61
    3c0e:	cf 91       	pop	r28
    3c10:	df 91       	pop	r29
    3c12:	1f 91       	pop	r17
    3c14:	0f 91       	pop	r16
    3c16:	08 95       	ret

00003c18 <LCD_displayChar>:
void LCD_displayChar (char LCD_Character)
{
    3c18:	0f 93       	push	r16
    3c1a:	1f 93       	push	r17
    3c1c:	df 93       	push	r29
    3c1e:	cf 93       	push	r28
    3c20:	cd b7       	in	r28, 0x3d	; 61
    3c22:	de b7       	in	r29, 0x3e	; 62
    3c24:	c7 55       	subi	r28, 0x57	; 87
    3c26:	d0 40       	sbci	r29, 0x00	; 0
    3c28:	0f b6       	in	r0, 0x3f	; 63
    3c2a:	f8 94       	cli
    3c2c:	de bf       	out	0x3e, r29	; 62
    3c2e:	0f be       	out	0x3f, r0	; 63
    3c30:	cd bf       	out	0x3d, r28	; 61
    3c32:	fe 01       	movw	r30, r28
    3c34:	e9 5a       	subi	r30, 0xA9	; 169
    3c36:	ff 4f       	sbci	r31, 0xFF	; 255
    3c38:	80 83       	st	Z, r24
	#ifdef LCD_4BIT_MODE
	LCD_HWPORT = (LCD_HWPORT & 0x0F) | (LCD_Character & 0xF0);
    3c3a:	ab e3       	ldi	r26, 0x3B	; 59
    3c3c:	b0 e0       	ldi	r27, 0x00	; 0
    3c3e:	eb e3       	ldi	r30, 0x3B	; 59
    3c40:	f0 e0       	ldi	r31, 0x00	; 0
    3c42:	80 81       	ld	r24, Z
    3c44:	98 2f       	mov	r25, r24
    3c46:	9f 70       	andi	r25, 0x0F	; 15
    3c48:	fe 01       	movw	r30, r28
    3c4a:	e9 5a       	subi	r30, 0xA9	; 169
    3c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4e:	80 81       	ld	r24, Z
    3c50:	80 7f       	andi	r24, 0xF0	; 240
    3c52:	89 2b       	or	r24, r25
    3c54:	8c 93       	st	X, r24
	LCD_HWPORT |= (1<<LCD_RS);
    3c56:	ab e3       	ldi	r26, 0x3B	; 59
    3c58:	b0 e0       	ldi	r27, 0x00	; 0
    3c5a:	eb e3       	ldi	r30, 0x3B	; 59
    3c5c:	f0 e0       	ldi	r31, 0x00	; 0
    3c5e:	80 81       	ld	r24, Z
    3c60:	82 60       	ori	r24, 0x02	; 2
    3c62:	8c 93       	st	X, r24
	LCD_HWPORT|= (1<<LCD_EN);
    3c64:	ab e3       	ldi	r26, 0x3B	; 59
    3c66:	b0 e0       	ldi	r27, 0x00	; 0
    3c68:	eb e3       	ldi	r30, 0x3B	; 59
    3c6a:	f0 e0       	ldi	r31, 0x00	; 0
    3c6c:	80 81       	ld	r24, Z
    3c6e:	88 60       	ori	r24, 0x08	; 8
    3c70:	8c 93       	st	X, r24
    3c72:	fe 01       	movw	r30, r28
    3c74:	ed 5a       	subi	r30, 0xAD	; 173
    3c76:	ff 4f       	sbci	r31, 0xFF	; 255
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	a0 e0       	ldi	r26, 0x00	; 0
    3c7e:	b0 e4       	ldi	r27, 0x40	; 64
    3c80:	80 83       	st	Z, r24
    3c82:	91 83       	std	Z+1, r25	; 0x01
    3c84:	a2 83       	std	Z+2, r26	; 0x02
    3c86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c88:	8e 01       	movw	r16, r28
    3c8a:	01 5b       	subi	r16, 0xB1	; 177
    3c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c8e:	fe 01       	movw	r30, r28
    3c90:	ed 5a       	subi	r30, 0xAD	; 173
    3c92:	ff 4f       	sbci	r31, 0xFF	; 255
    3c94:	60 81       	ld	r22, Z
    3c96:	71 81       	ldd	r23, Z+1	; 0x01
    3c98:	82 81       	ldd	r24, Z+2	; 0x02
    3c9a:	93 81       	ldd	r25, Z+3	; 0x03
    3c9c:	2b ea       	ldi	r18, 0xAB	; 171
    3c9e:	3a ea       	ldi	r19, 0xAA	; 170
    3ca0:	4a e2       	ldi	r20, 0x2A	; 42
    3ca2:	50 e4       	ldi	r21, 0x40	; 64
    3ca4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3ca8:	dc 01       	movw	r26, r24
    3caa:	cb 01       	movw	r24, r22
    3cac:	f8 01       	movw	r30, r16
    3cae:	80 83       	st	Z, r24
    3cb0:	91 83       	std	Z+1, r25	; 0x01
    3cb2:	a2 83       	std	Z+2, r26	; 0x02
    3cb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	e1 5b       	subi	r30, 0xB1	; 177
    3cba:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbc:	60 81       	ld	r22, Z
    3cbe:	71 81       	ldd	r23, Z+1	; 0x01
    3cc0:	82 81       	ldd	r24, Z+2	; 0x02
    3cc2:	93 81       	ldd	r25, Z+3	; 0x03
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	40 e8       	ldi	r20, 0x80	; 128
    3cca:	5f e3       	ldi	r21, 0x3F	; 63
    3ccc:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3cd0:	88 23       	and	r24, r24
    3cd2:	34 f4       	brge	.+12     	; 0x3ce0 <LCD_displayChar+0xc8>
		__ticks = 1;
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	e2 5b       	subi	r30, 0xB2	; 178
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	81 e0       	ldi	r24, 0x01	; 1
    3cdc:	80 83       	st	Z, r24
    3cde:	e0 c0       	rjmp	.+448    	; 0x3ea0 <LCD_displayChar+0x288>
	else if (__tmp > 255)
    3ce0:	fe 01       	movw	r30, r28
    3ce2:	e1 5b       	subi	r30, 0xB1	; 177
    3ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce6:	60 81       	ld	r22, Z
    3ce8:	71 81       	ldd	r23, Z+1	; 0x01
    3cea:	82 81       	ldd	r24, Z+2	; 0x02
    3cec:	93 81       	ldd	r25, Z+3	; 0x03
    3cee:	20 e0       	ldi	r18, 0x00	; 0
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	4f e7       	ldi	r20, 0x7F	; 127
    3cf4:	53 e4       	ldi	r21, 0x43	; 67
    3cf6:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3cfa:	18 16       	cp	r1, r24
    3cfc:	0c f0       	brlt	.+2      	; 0x3d00 <LCD_displayChar+0xe8>
    3cfe:	c0 c0       	rjmp	.+384    	; 0x3e80 <LCD_displayChar+0x268>
	{
		_delay_ms(__us / 1000.0);
    3d00:	fe 01       	movw	r30, r28
    3d02:	ed 5a       	subi	r30, 0xAD	; 173
    3d04:	ff 4f       	sbci	r31, 0xFF	; 255
    3d06:	60 81       	ld	r22, Z
    3d08:	71 81       	ldd	r23, Z+1	; 0x01
    3d0a:	82 81       	ldd	r24, Z+2	; 0x02
    3d0c:	93 81       	ldd	r25, Z+3	; 0x03
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	4a e7       	ldi	r20, 0x7A	; 122
    3d14:	54 e4       	ldi	r21, 0x44	; 68
    3d16:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__divsf3>
    3d1a:	dc 01       	movw	r26, r24
    3d1c:	cb 01       	movw	r24, r22
    3d1e:	fe 01       	movw	r30, r28
    3d20:	e6 5b       	subi	r30, 0xB6	; 182
    3d22:	ff 4f       	sbci	r31, 0xFF	; 255
    3d24:	80 83       	st	Z, r24
    3d26:	91 83       	std	Z+1, r25	; 0x01
    3d28:	a2 83       	std	Z+2, r26	; 0x02
    3d2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d2c:	8e 01       	movw	r16, r28
    3d2e:	0a 5b       	subi	r16, 0xBA	; 186
    3d30:	1f 4f       	sbci	r17, 0xFF	; 255
    3d32:	fe 01       	movw	r30, r28
    3d34:	e6 5b       	subi	r30, 0xB6	; 182
    3d36:	ff 4f       	sbci	r31, 0xFF	; 255
    3d38:	60 81       	ld	r22, Z
    3d3a:	71 81       	ldd	r23, Z+1	; 0x01
    3d3c:	82 81       	ldd	r24, Z+2	; 0x02
    3d3e:	93 81       	ldd	r25, Z+3	; 0x03
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	4a ef       	ldi	r20, 0xFA	; 250
    3d46:	54 e4       	ldi	r21, 0x44	; 68
    3d48:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	cb 01       	movw	r24, r22
    3d50:	f8 01       	movw	r30, r16
    3d52:	80 83       	st	Z, r24
    3d54:	91 83       	std	Z+1, r25	; 0x01
    3d56:	a2 83       	std	Z+2, r26	; 0x02
    3d58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	ea 5b       	subi	r30, 0xBA	; 186
    3d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d60:	60 81       	ld	r22, Z
    3d62:	71 81       	ldd	r23, Z+1	; 0x01
    3d64:	82 81       	ldd	r24, Z+2	; 0x02
    3d66:	93 81       	ldd	r25, Z+3	; 0x03
    3d68:	20 e0       	ldi	r18, 0x00	; 0
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	40 e8       	ldi	r20, 0x80	; 128
    3d6e:	5f e3       	ldi	r21, 0x3F	; 63
    3d70:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3d74:	88 23       	and	r24, r24
    3d76:	44 f4       	brge	.+16     	; 0x3d88 <LCD_displayChar+0x170>
		__ticks = 1;
    3d78:	fe 01       	movw	r30, r28
    3d7a:	ec 5b       	subi	r30, 0xBC	; 188
    3d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7e:	81 e0       	ldi	r24, 0x01	; 1
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	91 83       	std	Z+1, r25	; 0x01
    3d84:	80 83       	st	Z, r24
    3d86:	64 c0       	rjmp	.+200    	; 0x3e50 <LCD_displayChar+0x238>
	else if (__tmp > 65535)
    3d88:	fe 01       	movw	r30, r28
    3d8a:	ea 5b       	subi	r30, 0xBA	; 186
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	60 81       	ld	r22, Z
    3d90:	71 81       	ldd	r23, Z+1	; 0x01
    3d92:	82 81       	ldd	r24, Z+2	; 0x02
    3d94:	93 81       	ldd	r25, Z+3	; 0x03
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	3f ef       	ldi	r19, 0xFF	; 255
    3d9a:	4f e7       	ldi	r20, 0x7F	; 127
    3d9c:	57 e4       	ldi	r21, 0x47	; 71
    3d9e:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3da2:	18 16       	cp	r1, r24
    3da4:	0c f0       	brlt	.+2      	; 0x3da8 <LCD_displayChar+0x190>
    3da6:	43 c0       	rjmp	.+134    	; 0x3e2e <LCD_displayChar+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3da8:	fe 01       	movw	r30, r28
    3daa:	e6 5b       	subi	r30, 0xB6	; 182
    3dac:	ff 4f       	sbci	r31, 0xFF	; 255
    3dae:	60 81       	ld	r22, Z
    3db0:	71 81       	ldd	r23, Z+1	; 0x01
    3db2:	82 81       	ldd	r24, Z+2	; 0x02
    3db4:	93 81       	ldd	r25, Z+3	; 0x03
    3db6:	20 e0       	ldi	r18, 0x00	; 0
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	40 e2       	ldi	r20, 0x20	; 32
    3dbc:	51 e4       	ldi	r21, 0x41	; 65
    3dbe:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	8e 01       	movw	r16, r28
    3dc8:	0c 5b       	subi	r16, 0xBC	; 188
    3dca:	1f 4f       	sbci	r17, 0xFF	; 255
    3dcc:	bc 01       	movw	r22, r24
    3dce:	cd 01       	movw	r24, r26
    3dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	cb 01       	movw	r24, r22
    3dd8:	f8 01       	movw	r30, r16
    3dda:	91 83       	std	Z+1, r25	; 0x01
    3ddc:	80 83       	st	Z, r24
    3dde:	1f c0       	rjmp	.+62     	; 0x3e1e <LCD_displayChar+0x206>
    3de0:	fe 01       	movw	r30, r28
    3de2:	ee 5b       	subi	r30, 0xBE	; 190
    3de4:	ff 4f       	sbci	r31, 0xFF	; 255
    3de6:	88 ec       	ldi	r24, 0xC8	; 200
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	91 83       	std	Z+1, r25	; 0x01
    3dec:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3dee:	fe 01       	movw	r30, r28
    3df0:	ee 5b       	subi	r30, 0xBE	; 190
    3df2:	ff 4f       	sbci	r31, 0xFF	; 255
    3df4:	80 81       	ld	r24, Z
    3df6:	91 81       	ldd	r25, Z+1	; 0x01
    3df8:	01 97       	sbiw	r24, 0x01	; 1
    3dfa:	f1 f7       	brne	.-4      	; 0x3df8 <LCD_displayChar+0x1e0>
    3dfc:	fe 01       	movw	r30, r28
    3dfe:	ee 5b       	subi	r30, 0xBE	; 190
    3e00:	ff 4f       	sbci	r31, 0xFF	; 255
    3e02:	91 83       	std	Z+1, r25	; 0x01
    3e04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e06:	de 01       	movw	r26, r28
    3e08:	ac 5b       	subi	r26, 0xBC	; 188
    3e0a:	bf 4f       	sbci	r27, 0xFF	; 255
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	ec 5b       	subi	r30, 0xBC	; 188
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	80 81       	ld	r24, Z
    3e14:	91 81       	ldd	r25, Z+1	; 0x01
    3e16:	01 97       	sbiw	r24, 0x01	; 1
    3e18:	11 96       	adiw	r26, 0x01	; 1
    3e1a:	9c 93       	st	X, r25
    3e1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e1e:	fe 01       	movw	r30, r28
    3e20:	ec 5b       	subi	r30, 0xBC	; 188
    3e22:	ff 4f       	sbci	r31, 0xFF	; 255
    3e24:	80 81       	ld	r24, Z
    3e26:	91 81       	ldd	r25, Z+1	; 0x01
    3e28:	00 97       	sbiw	r24, 0x00	; 0
    3e2a:	d1 f6       	brne	.-76     	; 0x3de0 <LCD_displayChar+0x1c8>
    3e2c:	42 c0       	rjmp	.+132    	; 0x3eb2 <LCD_displayChar+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e2e:	8e 01       	movw	r16, r28
    3e30:	0c 5b       	subi	r16, 0xBC	; 188
    3e32:	1f 4f       	sbci	r17, 0xFF	; 255
    3e34:	fe 01       	movw	r30, r28
    3e36:	ea 5b       	subi	r30, 0xBA	; 186
    3e38:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3a:	60 81       	ld	r22, Z
    3e3c:	71 81       	ldd	r23, Z+1	; 0x01
    3e3e:	82 81       	ldd	r24, Z+2	; 0x02
    3e40:	93 81       	ldd	r25, Z+3	; 0x03
    3e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e46:	dc 01       	movw	r26, r24
    3e48:	cb 01       	movw	r24, r22
    3e4a:	f8 01       	movw	r30, r16
    3e4c:	91 83       	std	Z+1, r25	; 0x01
    3e4e:	80 83       	st	Z, r24
    3e50:	de 01       	movw	r26, r28
    3e52:	a0 5c       	subi	r26, 0xC0	; 192
    3e54:	bf 4f       	sbci	r27, 0xFF	; 255
    3e56:	fe 01       	movw	r30, r28
    3e58:	ec 5b       	subi	r30, 0xBC	; 188
    3e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5c:	80 81       	ld	r24, Z
    3e5e:	91 81       	ldd	r25, Z+1	; 0x01
    3e60:	11 96       	adiw	r26, 0x01	; 1
    3e62:	9c 93       	st	X, r25
    3e64:	8e 93       	st	-X, r24
    3e66:	fe 01       	movw	r30, r28
    3e68:	e0 5c       	subi	r30, 0xC0	; 192
    3e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6c:	80 81       	ld	r24, Z
    3e6e:	91 81       	ldd	r25, Z+1	; 0x01
    3e70:	01 97       	sbiw	r24, 0x01	; 1
    3e72:	f1 f7       	brne	.-4      	; 0x3e70 <LCD_displayChar+0x258>
    3e74:	fe 01       	movw	r30, r28
    3e76:	e0 5c       	subi	r30, 0xC0	; 192
    3e78:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7a:	91 83       	std	Z+1, r25	; 0x01
    3e7c:	80 83       	st	Z, r24
    3e7e:	19 c0       	rjmp	.+50     	; 0x3eb2 <LCD_displayChar+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3e80:	8e 01       	movw	r16, r28
    3e82:	02 5b       	subi	r16, 0xB2	; 178
    3e84:	1f 4f       	sbci	r17, 0xFF	; 255
    3e86:	fe 01       	movw	r30, r28
    3e88:	e1 5b       	subi	r30, 0xB1	; 177
    3e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8c:	60 81       	ld	r22, Z
    3e8e:	71 81       	ldd	r23, Z+1	; 0x01
    3e90:	82 81       	ldd	r24, Z+2	; 0x02
    3e92:	93 81       	ldd	r25, Z+3	; 0x03
    3e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e98:	dc 01       	movw	r26, r24
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	f8 01       	movw	r30, r16
    3e9e:	80 83       	st	Z, r24
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	e2 5b       	subi	r30, 0xB2	; 178
    3ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea6:	80 81       	ld	r24, Z
    3ea8:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3eaa:	8f ad       	ldd	r24, Y+63	; 0x3f
    3eac:	8a 95       	dec	r24
    3eae:	f1 f7       	brne	.-4      	; 0x3eac <LCD_displayChar+0x294>
    3eb0:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(2);
	LCD_HWPORT &= ~ (1<<LCD_EN);
    3eb2:	ab e3       	ldi	r26, 0x3B	; 59
    3eb4:	b0 e0       	ldi	r27, 0x00	; 0
    3eb6:	eb e3       	ldi	r30, 0x3B	; 59
    3eb8:	f0 e0       	ldi	r31, 0x00	; 0
    3eba:	80 81       	ld	r24, Z
    3ebc:	87 7f       	andi	r24, 0xF7	; 247
    3ebe:	8c 93       	st	X, r24
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	a8 e4       	ldi	r26, 0x48	; 72
    3ec6:	b3 e4       	ldi	r27, 0x43	; 67
    3ec8:	8b af       	std	Y+59, r24	; 0x3b
    3eca:	9c af       	std	Y+60, r25	; 0x3c
    3ecc:	ad af       	std	Y+61, r26	; 0x3d
    3ece:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3ed0:	6b ad       	ldd	r22, Y+59	; 0x3b
    3ed2:	7c ad       	ldd	r23, Y+60	; 0x3c
    3ed4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ed6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ed8:	2b ea       	ldi	r18, 0xAB	; 171
    3eda:	3a ea       	ldi	r19, 0xAA	; 170
    3edc:	4a e2       	ldi	r20, 0x2A	; 42
    3ede:	50 e4       	ldi	r21, 0x40	; 64
    3ee0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	8f ab       	std	Y+55, r24	; 0x37
    3eea:	98 af       	std	Y+56, r25	; 0x38
    3eec:	a9 af       	std	Y+57, r26	; 0x39
    3eee:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3ef0:	6f a9       	ldd	r22, Y+55	; 0x37
    3ef2:	78 ad       	ldd	r23, Y+56	; 0x38
    3ef4:	89 ad       	ldd	r24, Y+57	; 0x39
    3ef6:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ef8:	20 e0       	ldi	r18, 0x00	; 0
    3efa:	30 e0       	ldi	r19, 0x00	; 0
    3efc:	40 e8       	ldi	r20, 0x80	; 128
    3efe:	5f e3       	ldi	r21, 0x3F	; 63
    3f00:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3f04:	88 23       	and	r24, r24
    3f06:	1c f4       	brge	.+6      	; 0x3f0e <LCD_displayChar+0x2f6>
		__ticks = 1;
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	8e ab       	std	Y+54, r24	; 0x36
    3f0c:	91 c0       	rjmp	.+290    	; 0x4030 <LCD_displayChar+0x418>
	else if (__tmp > 255)
    3f0e:	6f a9       	ldd	r22, Y+55	; 0x37
    3f10:	78 ad       	ldd	r23, Y+56	; 0x38
    3f12:	89 ad       	ldd	r24, Y+57	; 0x39
    3f14:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	4f e7       	ldi	r20, 0x7F	; 127
    3f1c:	53 e4       	ldi	r21, 0x43	; 67
    3f1e:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3f22:	18 16       	cp	r1, r24
    3f24:	0c f0       	brlt	.+2      	; 0x3f28 <LCD_displayChar+0x310>
    3f26:	7b c0       	rjmp	.+246    	; 0x401e <LCD_displayChar+0x406>
	{
		_delay_ms(__us / 1000.0);
    3f28:	6b ad       	ldd	r22, Y+59	; 0x3b
    3f2a:	7c ad       	ldd	r23, Y+60	; 0x3c
    3f2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	4a e7       	ldi	r20, 0x7A	; 122
    3f36:	54 e4       	ldi	r21, 0x44	; 68
    3f38:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__divsf3>
    3f3c:	dc 01       	movw	r26, r24
    3f3e:	cb 01       	movw	r24, r22
    3f40:	8a ab       	std	Y+50, r24	; 0x32
    3f42:	9b ab       	std	Y+51, r25	; 0x33
    3f44:	ac ab       	std	Y+52, r26	; 0x34
    3f46:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f48:	6a a9       	ldd	r22, Y+50	; 0x32
    3f4a:	7b a9       	ldd	r23, Y+51	; 0x33
    3f4c:	8c a9       	ldd	r24, Y+52	; 0x34
    3f4e:	9d a9       	ldd	r25, Y+53	; 0x35
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	4a ef       	ldi	r20, 0xFA	; 250
    3f56:	54 e4       	ldi	r21, 0x44	; 68
    3f58:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3f5c:	dc 01       	movw	r26, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	8e a7       	std	Y+46, r24	; 0x2e
    3f62:	9f a7       	std	Y+47, r25	; 0x2f
    3f64:	a8 ab       	std	Y+48, r26	; 0x30
    3f66:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    3f68:	6e a5       	ldd	r22, Y+46	; 0x2e
    3f6a:	7f a5       	ldd	r23, Y+47	; 0x2f
    3f6c:	88 a9       	ldd	r24, Y+48	; 0x30
    3f6e:	99 a9       	ldd	r25, Y+49	; 0x31
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	40 e8       	ldi	r20, 0x80	; 128
    3f76:	5f e3       	ldi	r21, 0x3F	; 63
    3f78:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3f7c:	88 23       	and	r24, r24
    3f7e:	2c f4       	brge	.+10     	; 0x3f8a <LCD_displayChar+0x372>
		__ticks = 1;
    3f80:	81 e0       	ldi	r24, 0x01	; 1
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	9d a7       	std	Y+45, r25	; 0x2d
    3f86:	8c a7       	std	Y+44, r24	; 0x2c
    3f88:	3f c0       	rjmp	.+126    	; 0x4008 <LCD_displayChar+0x3f0>
	else if (__tmp > 65535)
    3f8a:	6e a5       	ldd	r22, Y+46	; 0x2e
    3f8c:	7f a5       	ldd	r23, Y+47	; 0x2f
    3f8e:	88 a9       	ldd	r24, Y+48	; 0x30
    3f90:	99 a9       	ldd	r25, Y+49	; 0x31
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	3f ef       	ldi	r19, 0xFF	; 255
    3f96:	4f e7       	ldi	r20, 0x7F	; 127
    3f98:	57 e4       	ldi	r21, 0x47	; 71
    3f9a:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3f9e:	18 16       	cp	r1, r24
    3fa0:	4c f5       	brge	.+82     	; 0x3ff4 <LCD_displayChar+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa2:	6a a9       	ldd	r22, Y+50	; 0x32
    3fa4:	7b a9       	ldd	r23, Y+51	; 0x33
    3fa6:	8c a9       	ldd	r24, Y+52	; 0x34
    3fa8:	9d a9       	ldd	r25, Y+53	; 0x35
    3faa:	20 e0       	ldi	r18, 0x00	; 0
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	40 e2       	ldi	r20, 0x20	; 32
    3fb0:	51 e4       	ldi	r21, 0x41	; 65
    3fb2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3fb6:	dc 01       	movw	r26, r24
    3fb8:	cb 01       	movw	r24, r22
    3fba:	bc 01       	movw	r22, r24
    3fbc:	cd 01       	movw	r24, r26
    3fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc2:	dc 01       	movw	r26, r24
    3fc4:	cb 01       	movw	r24, r22
    3fc6:	9d a7       	std	Y+45, r25	; 0x2d
    3fc8:	8c a7       	std	Y+44, r24	; 0x2c
    3fca:	0f c0       	rjmp	.+30     	; 0x3fea <LCD_displayChar+0x3d2>
    3fcc:	88 ec       	ldi	r24, 0xC8	; 200
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	9b a7       	std	Y+43, r25	; 0x2b
    3fd2:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3fd4:	8a a5       	ldd	r24, Y+42	; 0x2a
    3fd6:	9b a5       	ldd	r25, Y+43	; 0x2b
    3fd8:	01 97       	sbiw	r24, 0x01	; 1
    3fda:	f1 f7       	brne	.-4      	; 0x3fd8 <LCD_displayChar+0x3c0>
    3fdc:	9b a7       	std	Y+43, r25	; 0x2b
    3fde:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe0:	8c a5       	ldd	r24, Y+44	; 0x2c
    3fe2:	9d a5       	ldd	r25, Y+45	; 0x2d
    3fe4:	01 97       	sbiw	r24, 0x01	; 1
    3fe6:	9d a7       	std	Y+45, r25	; 0x2d
    3fe8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fea:	8c a5       	ldd	r24, Y+44	; 0x2c
    3fec:	9d a5       	ldd	r25, Y+45	; 0x2d
    3fee:	00 97       	sbiw	r24, 0x00	; 0
    3ff0:	69 f7       	brne	.-38     	; 0x3fcc <LCD_displayChar+0x3b4>
    3ff2:	24 c0       	rjmp	.+72     	; 0x403c <LCD_displayChar+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ff4:	6e a5       	ldd	r22, Y+46	; 0x2e
    3ff6:	7f a5       	ldd	r23, Y+47	; 0x2f
    3ff8:	88 a9       	ldd	r24, Y+48	; 0x30
    3ffa:	99 a9       	ldd	r25, Y+49	; 0x31
    3ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4000:	dc 01       	movw	r26, r24
    4002:	cb 01       	movw	r24, r22
    4004:	9d a7       	std	Y+45, r25	; 0x2d
    4006:	8c a7       	std	Y+44, r24	; 0x2c
    4008:	8c a5       	ldd	r24, Y+44	; 0x2c
    400a:	9d a5       	ldd	r25, Y+45	; 0x2d
    400c:	99 a7       	std	Y+41, r25	; 0x29
    400e:	88 a7       	std	Y+40, r24	; 0x28
    4010:	88 a5       	ldd	r24, Y+40	; 0x28
    4012:	99 a5       	ldd	r25, Y+41	; 0x29
    4014:	01 97       	sbiw	r24, 0x01	; 1
    4016:	f1 f7       	brne	.-4      	; 0x4014 <LCD_displayChar+0x3fc>
    4018:	99 a7       	std	Y+41, r25	; 0x29
    401a:	88 a7       	std	Y+40, r24	; 0x28
    401c:	0f c0       	rjmp	.+30     	; 0x403c <LCD_displayChar+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    401e:	6f a9       	ldd	r22, Y+55	; 0x37
    4020:	78 ad       	ldd	r23, Y+56	; 0x38
    4022:	89 ad       	ldd	r24, Y+57	; 0x39
    4024:	9a ad       	ldd	r25, Y+58	; 0x3a
    4026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	8e ab       	std	Y+54, r24	; 0x36
    4030:	8e a9       	ldd	r24, Y+54	; 0x36
    4032:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4034:	8f a1       	ldd	r24, Y+39	; 0x27
    4036:	8a 95       	dec	r24
    4038:	f1 f7       	brne	.-4      	; 0x4036 <LCD_displayChar+0x41e>
    403a:	8f a3       	std	Y+39, r24	; 0x27
	
	_delay_us(200);
	
	LCD_HWPORT = (LCD_HWPORT & 0x0F) | (LCD_Character << 4);
    403c:	ab e3       	ldi	r26, 0x3B	; 59
    403e:	b0 e0       	ldi	r27, 0x00	; 0
    4040:	eb e3       	ldi	r30, 0x3B	; 59
    4042:	f0 e0       	ldi	r31, 0x00	; 0
    4044:	80 81       	ld	r24, Z
    4046:	28 2f       	mov	r18, r24
    4048:	2f 70       	andi	r18, 0x0F	; 15
    404a:	fe 01       	movw	r30, r28
    404c:	e9 5a       	subi	r30, 0xA9	; 169
    404e:	ff 4f       	sbci	r31, 0xFF	; 255
    4050:	80 81       	ld	r24, Z
    4052:	88 2f       	mov	r24, r24
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	82 95       	swap	r24
    4058:	92 95       	swap	r25
    405a:	90 7f       	andi	r25, 0xF0	; 240
    405c:	98 27       	eor	r25, r24
    405e:	80 7f       	andi	r24, 0xF0	; 240
    4060:	98 27       	eor	r25, r24
    4062:	82 2b       	or	r24, r18
    4064:	8c 93       	st	X, r24
	LCD_HWPORT |= (1<<LCD_EN);
    4066:	ab e3       	ldi	r26, 0x3B	; 59
    4068:	b0 e0       	ldi	r27, 0x00	; 0
    406a:	eb e3       	ldi	r30, 0x3B	; 59
    406c:	f0 e0       	ldi	r31, 0x00	; 0
    406e:	80 81       	ld	r24, Z
    4070:	88 60       	ori	r24, 0x08	; 8
    4072:	8c 93       	st	X, r24
    4074:	80 e0       	ldi	r24, 0x00	; 0
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	a0 e8       	ldi	r26, 0x80	; 128
    407a:	bf e3       	ldi	r27, 0x3F	; 63
    407c:	8b a3       	std	Y+35, r24	; 0x23
    407e:	9c a3       	std	Y+36, r25	; 0x24
    4080:	ad a3       	std	Y+37, r26	; 0x25
    4082:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4084:	6b a1       	ldd	r22, Y+35	; 0x23
    4086:	7c a1       	ldd	r23, Y+36	; 0x24
    4088:	8d a1       	ldd	r24, Y+37	; 0x25
    408a:	9e a1       	ldd	r25, Y+38	; 0x26
    408c:	2b ea       	ldi	r18, 0xAB	; 171
    408e:	3a ea       	ldi	r19, 0xAA	; 170
    4090:	4a e2       	ldi	r20, 0x2A	; 42
    4092:	50 e4       	ldi	r21, 0x40	; 64
    4094:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4098:	dc 01       	movw	r26, r24
    409a:	cb 01       	movw	r24, r22
    409c:	8f 8f       	std	Y+31, r24	; 0x1f
    409e:	98 a3       	std	Y+32, r25	; 0x20
    40a0:	a9 a3       	std	Y+33, r26	; 0x21
    40a2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    40a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    40a6:	78 a1       	ldd	r23, Y+32	; 0x20
    40a8:	89 a1       	ldd	r24, Y+33	; 0x21
    40aa:	9a a1       	ldd	r25, Y+34	; 0x22
    40ac:	20 e0       	ldi	r18, 0x00	; 0
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	40 e8       	ldi	r20, 0x80	; 128
    40b2:	5f e3       	ldi	r21, 0x3F	; 63
    40b4:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    40b8:	88 23       	and	r24, r24
    40ba:	1c f4       	brge	.+6      	; 0x40c2 <LCD_displayChar+0x4aa>
		__ticks = 1;
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	8e 8f       	std	Y+30, r24	; 0x1e
    40c0:	91 c0       	rjmp	.+290    	; 0x41e4 <LCD_displayChar+0x5cc>
	else if (__tmp > 255)
    40c2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    40c4:	78 a1       	ldd	r23, Y+32	; 0x20
    40c6:	89 a1       	ldd	r24, Y+33	; 0x21
    40c8:	9a a1       	ldd	r25, Y+34	; 0x22
    40ca:	20 e0       	ldi	r18, 0x00	; 0
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	4f e7       	ldi	r20, 0x7F	; 127
    40d0:	53 e4       	ldi	r21, 0x43	; 67
    40d2:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    40d6:	18 16       	cp	r1, r24
    40d8:	0c f0       	brlt	.+2      	; 0x40dc <LCD_displayChar+0x4c4>
    40da:	7b c0       	rjmp	.+246    	; 0x41d2 <LCD_displayChar+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    40dc:	6b a1       	ldd	r22, Y+35	; 0x23
    40de:	7c a1       	ldd	r23, Y+36	; 0x24
    40e0:	8d a1       	ldd	r24, Y+37	; 0x25
    40e2:	9e a1       	ldd	r25, Y+38	; 0x26
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	4a e7       	ldi	r20, 0x7A	; 122
    40ea:	54 e4       	ldi	r21, 0x44	; 68
    40ec:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__divsf3>
    40f0:	dc 01       	movw	r26, r24
    40f2:	cb 01       	movw	r24, r22
    40f4:	8a 8f       	std	Y+26, r24	; 0x1a
    40f6:	9b 8f       	std	Y+27, r25	; 0x1b
    40f8:	ac 8f       	std	Y+28, r26	; 0x1c
    40fa:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40fc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    40fe:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4100:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4102:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4104:	20 e0       	ldi	r18, 0x00	; 0
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	4a ef       	ldi	r20, 0xFA	; 250
    410a:	54 e4       	ldi	r21, 0x44	; 68
    410c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4110:	dc 01       	movw	r26, r24
    4112:	cb 01       	movw	r24, r22
    4114:	8e 8b       	std	Y+22, r24	; 0x16
    4116:	9f 8b       	std	Y+23, r25	; 0x17
    4118:	a8 8f       	std	Y+24, r26	; 0x18
    411a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    411c:	6e 89       	ldd	r22, Y+22	; 0x16
    411e:	7f 89       	ldd	r23, Y+23	; 0x17
    4120:	88 8d       	ldd	r24, Y+24	; 0x18
    4122:	99 8d       	ldd	r25, Y+25	; 0x19
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	40 e8       	ldi	r20, 0x80	; 128
    412a:	5f e3       	ldi	r21, 0x3F	; 63
    412c:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    4130:	88 23       	and	r24, r24
    4132:	2c f4       	brge	.+10     	; 0x413e <LCD_displayChar+0x526>
		__ticks = 1;
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	9d 8b       	std	Y+21, r25	; 0x15
    413a:	8c 8b       	std	Y+20, r24	; 0x14
    413c:	3f c0       	rjmp	.+126    	; 0x41bc <LCD_displayChar+0x5a4>
	else if (__tmp > 65535)
    413e:	6e 89       	ldd	r22, Y+22	; 0x16
    4140:	7f 89       	ldd	r23, Y+23	; 0x17
    4142:	88 8d       	ldd	r24, Y+24	; 0x18
    4144:	99 8d       	ldd	r25, Y+25	; 0x19
    4146:	20 e0       	ldi	r18, 0x00	; 0
    4148:	3f ef       	ldi	r19, 0xFF	; 255
    414a:	4f e7       	ldi	r20, 0x7F	; 127
    414c:	57 e4       	ldi	r21, 0x47	; 71
    414e:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    4152:	18 16       	cp	r1, r24
    4154:	4c f5       	brge	.+82     	; 0x41a8 <LCD_displayChar+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4156:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4158:	7b 8d       	ldd	r23, Y+27	; 0x1b
    415a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    415c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	40 e2       	ldi	r20, 0x20	; 32
    4164:	51 e4       	ldi	r21, 0x41	; 65
    4166:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    416a:	dc 01       	movw	r26, r24
    416c:	cb 01       	movw	r24, r22
    416e:	bc 01       	movw	r22, r24
    4170:	cd 01       	movw	r24, r26
    4172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	9d 8b       	std	Y+21, r25	; 0x15
    417c:	8c 8b       	std	Y+20, r24	; 0x14
    417e:	0f c0       	rjmp	.+30     	; 0x419e <LCD_displayChar+0x586>
    4180:	88 ec       	ldi	r24, 0xC8	; 200
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	9b 8b       	std	Y+19, r25	; 0x13
    4186:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4188:	8a 89       	ldd	r24, Y+18	; 0x12
    418a:	9b 89       	ldd	r25, Y+19	; 0x13
    418c:	01 97       	sbiw	r24, 0x01	; 1
    418e:	f1 f7       	brne	.-4      	; 0x418c <LCD_displayChar+0x574>
    4190:	9b 8b       	std	Y+19, r25	; 0x13
    4192:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4194:	8c 89       	ldd	r24, Y+20	; 0x14
    4196:	9d 89       	ldd	r25, Y+21	; 0x15
    4198:	01 97       	sbiw	r24, 0x01	; 1
    419a:	9d 8b       	std	Y+21, r25	; 0x15
    419c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    419e:	8c 89       	ldd	r24, Y+20	; 0x14
    41a0:	9d 89       	ldd	r25, Y+21	; 0x15
    41a2:	00 97       	sbiw	r24, 0x00	; 0
    41a4:	69 f7       	brne	.-38     	; 0x4180 <LCD_displayChar+0x568>
    41a6:	24 c0       	rjmp	.+72     	; 0x41f0 <LCD_displayChar+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41a8:	6e 89       	ldd	r22, Y+22	; 0x16
    41aa:	7f 89       	ldd	r23, Y+23	; 0x17
    41ac:	88 8d       	ldd	r24, Y+24	; 0x18
    41ae:	99 8d       	ldd	r25, Y+25	; 0x19
    41b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41b4:	dc 01       	movw	r26, r24
    41b6:	cb 01       	movw	r24, r22
    41b8:	9d 8b       	std	Y+21, r25	; 0x15
    41ba:	8c 8b       	std	Y+20, r24	; 0x14
    41bc:	8c 89       	ldd	r24, Y+20	; 0x14
    41be:	9d 89       	ldd	r25, Y+21	; 0x15
    41c0:	99 8b       	std	Y+17, r25	; 0x11
    41c2:	88 8b       	std	Y+16, r24	; 0x10
    41c4:	88 89       	ldd	r24, Y+16	; 0x10
    41c6:	99 89       	ldd	r25, Y+17	; 0x11
    41c8:	01 97       	sbiw	r24, 0x01	; 1
    41ca:	f1 f7       	brne	.-4      	; 0x41c8 <LCD_displayChar+0x5b0>
    41cc:	99 8b       	std	Y+17, r25	; 0x11
    41ce:	88 8b       	std	Y+16, r24	; 0x10
    41d0:	0f c0       	rjmp	.+30     	; 0x41f0 <LCD_displayChar+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    41d2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    41d4:	78 a1       	ldd	r23, Y+32	; 0x20
    41d6:	89 a1       	ldd	r24, Y+33	; 0x21
    41d8:	9a a1       	ldd	r25, Y+34	; 0x22
    41da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	8e 8f       	std	Y+30, r24	; 0x1e
    41e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    41e6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    41e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ea:	8a 95       	dec	r24
    41ec:	f1 f7       	brne	.-4      	; 0x41ea <LCD_displayChar+0x5d2>
    41ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_HWPORT &= ~ (1<<LCD_EN);
    41f0:	ab e3       	ldi	r26, 0x3B	; 59
    41f2:	b0 e0       	ldi	r27, 0x00	; 0
    41f4:	eb e3       	ldi	r30, 0x3B	; 59
    41f6:	f0 e0       	ldi	r31, 0x00	; 0
    41f8:	80 81       	ld	r24, Z
    41fa:	87 7f       	andi	r24, 0xF7	; 247
    41fc:	8c 93       	st	X, r24
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	a0 e8       	ldi	r26, 0x80	; 128
    4204:	bf e3       	ldi	r27, 0x3F	; 63
    4206:	8b 87       	std	Y+11, r24	; 0x0b
    4208:	9c 87       	std	Y+12, r25	; 0x0c
    420a:	ad 87       	std	Y+13, r26	; 0x0d
    420c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    420e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4210:	7c 85       	ldd	r23, Y+12	; 0x0c
    4212:	8d 85       	ldd	r24, Y+13	; 0x0d
    4214:	9e 85       	ldd	r25, Y+14	; 0x0e
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	4a ef       	ldi	r20, 0xFA	; 250
    421c:	54 e4       	ldi	r21, 0x44	; 68
    421e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4222:	dc 01       	movw	r26, r24
    4224:	cb 01       	movw	r24, r22
    4226:	8f 83       	std	Y+7, r24	; 0x07
    4228:	98 87       	std	Y+8, r25	; 0x08
    422a:	a9 87       	std	Y+9, r26	; 0x09
    422c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    422e:	6f 81       	ldd	r22, Y+7	; 0x07
    4230:	78 85       	ldd	r23, Y+8	; 0x08
    4232:	89 85       	ldd	r24, Y+9	; 0x09
    4234:	9a 85       	ldd	r25, Y+10	; 0x0a
    4236:	20 e0       	ldi	r18, 0x00	; 0
    4238:	30 e0       	ldi	r19, 0x00	; 0
    423a:	40 e8       	ldi	r20, 0x80	; 128
    423c:	5f e3       	ldi	r21, 0x3F	; 63
    423e:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    4242:	88 23       	and	r24, r24
    4244:	2c f4       	brge	.+10     	; 0x4250 <LCD_displayChar+0x638>
		__ticks = 1;
    4246:	81 e0       	ldi	r24, 0x01	; 1
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	9e 83       	std	Y+6, r25	; 0x06
    424c:	8d 83       	std	Y+5, r24	; 0x05
    424e:	3f c0       	rjmp	.+126    	; 0x42ce <LCD_displayChar+0x6b6>
	else if (__tmp > 65535)
    4250:	6f 81       	ldd	r22, Y+7	; 0x07
    4252:	78 85       	ldd	r23, Y+8	; 0x08
    4254:	89 85       	ldd	r24, Y+9	; 0x09
    4256:	9a 85       	ldd	r25, Y+10	; 0x0a
    4258:	20 e0       	ldi	r18, 0x00	; 0
    425a:	3f ef       	ldi	r19, 0xFF	; 255
    425c:	4f e7       	ldi	r20, 0x7F	; 127
    425e:	57 e4       	ldi	r21, 0x47	; 71
    4260:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    4264:	18 16       	cp	r1, r24
    4266:	4c f5       	brge	.+82     	; 0x42ba <LCD_displayChar+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4268:	6b 85       	ldd	r22, Y+11	; 0x0b
    426a:	7c 85       	ldd	r23, Y+12	; 0x0c
    426c:	8d 85       	ldd	r24, Y+13	; 0x0d
    426e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4270:	20 e0       	ldi	r18, 0x00	; 0
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	40 e2       	ldi	r20, 0x20	; 32
    4276:	51 e4       	ldi	r21, 0x41	; 65
    4278:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	bc 01       	movw	r22, r24
    4282:	cd 01       	movw	r24, r26
    4284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4288:	dc 01       	movw	r26, r24
    428a:	cb 01       	movw	r24, r22
    428c:	9e 83       	std	Y+6, r25	; 0x06
    428e:	8d 83       	std	Y+5, r24	; 0x05
    4290:	0f c0       	rjmp	.+30     	; 0x42b0 <LCD_displayChar+0x698>
    4292:	88 ec       	ldi	r24, 0xC8	; 200
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	9c 83       	std	Y+4, r25	; 0x04
    4298:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    429a:	8b 81       	ldd	r24, Y+3	; 0x03
    429c:	9c 81       	ldd	r25, Y+4	; 0x04
    429e:	01 97       	sbiw	r24, 0x01	; 1
    42a0:	f1 f7       	brne	.-4      	; 0x429e <LCD_displayChar+0x686>
    42a2:	9c 83       	std	Y+4, r25	; 0x04
    42a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42a6:	8d 81       	ldd	r24, Y+5	; 0x05
    42a8:	9e 81       	ldd	r25, Y+6	; 0x06
    42aa:	01 97       	sbiw	r24, 0x01	; 1
    42ac:	9e 83       	std	Y+6, r25	; 0x06
    42ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42b0:	8d 81       	ldd	r24, Y+5	; 0x05
    42b2:	9e 81       	ldd	r25, Y+6	; 0x06
    42b4:	00 97       	sbiw	r24, 0x00	; 0
    42b6:	69 f7       	brne	.-38     	; 0x4292 <LCD_displayChar+0x67a>
    42b8:	14 c0       	rjmp	.+40     	; 0x42e2 <LCD_displayChar+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ba:	6f 81       	ldd	r22, Y+7	; 0x07
    42bc:	78 85       	ldd	r23, Y+8	; 0x08
    42be:	89 85       	ldd	r24, Y+9	; 0x09
    42c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	9e 83       	std	Y+6, r25	; 0x06
    42cc:	8d 83       	std	Y+5, r24	; 0x05
    42ce:	8d 81       	ldd	r24, Y+5	; 0x05
    42d0:	9e 81       	ldd	r25, Y+6	; 0x06
    42d2:	9a 83       	std	Y+2, r25	; 0x02
    42d4:	89 83       	std	Y+1, r24	; 0x01
    42d6:	89 81       	ldd	r24, Y+1	; 0x01
    42d8:	9a 81       	ldd	r25, Y+2	; 0x02
    42da:	01 97       	sbiw	r24, 0x01	; 1
    42dc:	f1 f7       	brne	.-4      	; 0x42da <LCD_displayChar+0x6c2>
    42de:	9a 83       	std	Y+2, r25	; 0x02
    42e0:	89 83       	std	Y+1, r24	; 0x01
	LCD_HWPORT_2 |= (1<<LCD_RS);
	LCD_HWPORT_2 |= (1<<LCD_EN);
	_delay_us(2);
	LCD_HWPORT_2 &= ~ (1<<LCD_EN);
	#endif
}
    42e2:	c9 5a       	subi	r28, 0xA9	; 169
    42e4:	df 4f       	sbci	r29, 0xFF	; 255
    42e6:	0f b6       	in	r0, 0x3f	; 63
    42e8:	f8 94       	cli
    42ea:	de bf       	out	0x3e, r29	; 62
    42ec:	0f be       	out	0x3f, r0	; 63
    42ee:	cd bf       	out	0x3d, r28	; 61
    42f0:	cf 91       	pop	r28
    42f2:	df 91       	pop	r29
    42f4:	1f 91       	pop	r17
    42f6:	0f 91       	pop	r16
    42f8:	08 95       	ret

000042fa <LCD_displayString>:

void LCD_displayString (const char * LCD_String)
{
    42fa:	df 93       	push	r29
    42fc:	cf 93       	push	r28
    42fe:	00 d0       	rcall	.+0      	; 0x4300 <LCD_displayString+0x6>
    4300:	0f 92       	push	r0
    4302:	cd b7       	in	r28, 0x3d	; 61
    4304:	de b7       	in	r29, 0x3e	; 62
    4306:	9b 83       	std	Y+3, r25	; 0x03
    4308:	8a 83       	std	Y+2, r24	; 0x02
	uint8 LCD_loop=0U;
    430a:	19 82       	std	Y+1, r1	; 0x01
    430c:	0e c0       	rjmp	.+28     	; 0x432a <LCD_displayString+0x30>

	while(LCD_String[LCD_loop]!=0)
	{
		LCD_displayChar (LCD_String[LCD_loop]);
    430e:	89 81       	ldd	r24, Y+1	; 0x01
    4310:	28 2f       	mov	r18, r24
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	8a 81       	ldd	r24, Y+2	; 0x02
    4316:	9b 81       	ldd	r25, Y+3	; 0x03
    4318:	fc 01       	movw	r30, r24
    431a:	e2 0f       	add	r30, r18
    431c:	f3 1f       	adc	r31, r19
    431e:	80 81       	ld	r24, Z
    4320:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <LCD_displayChar>
		LCD_loop++;
    4324:	89 81       	ldd	r24, Y+1	; 0x01
    4326:	8f 5f       	subi	r24, 0xFF	; 255
    4328:	89 83       	std	Y+1, r24	; 0x01

void LCD_displayString (const char * LCD_String)
{
	uint8 LCD_loop=0U;

	while(LCD_String[LCD_loop]!=0)
    432a:	89 81       	ldd	r24, Y+1	; 0x01
    432c:	28 2f       	mov	r18, r24
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	8a 81       	ldd	r24, Y+2	; 0x02
    4332:	9b 81       	ldd	r25, Y+3	; 0x03
    4334:	fc 01       	movw	r30, r24
    4336:	e2 0f       	add	r30, r18
    4338:	f3 1f       	adc	r31, r19
    433a:	80 81       	ld	r24, Z
    433c:	88 23       	and	r24, r24
    433e:	39 f7       	brne	.-50     	; 0x430e <LCD_displayString+0x14>
	{
		LCD_displayChar (LCD_String[LCD_loop]);
		LCD_loop++;
	}
}
    4340:	0f 90       	pop	r0
    4342:	0f 90       	pop	r0
    4344:	0f 90       	pop	r0
    4346:	cf 91       	pop	r28
    4348:	df 91       	pop	r29
    434a:	08 95       	ret

0000434c <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn (const char * LCD_RCString, uint8 LCD_DispRow, uint8 LCD_DispColumn)
{
    434c:	df 93       	push	r29
    434e:	cf 93       	push	r28
    4350:	00 d0       	rcall	.+0      	; 0x4352 <LCD_displayStringRowColumn+0x6>
    4352:	00 d0       	rcall	.+0      	; 0x4354 <LCD_displayStringRowColumn+0x8>
    4354:	cd b7       	in	r28, 0x3d	; 61
    4356:	de b7       	in	r29, 0x3e	; 62
    4358:	9a 83       	std	Y+2, r25	; 0x02
    435a:	89 83       	std	Y+1, r24	; 0x01
    435c:	6b 83       	std	Y+3, r22	; 0x03
    435e:	4c 83       	std	Y+4, r20	; 0x04
	LCD_gotoRowColumn(LCD_DispRow,LCD_DispColumn);
    4360:	8b 81       	ldd	r24, Y+3	; 0x03
    4362:	6c 81       	ldd	r22, Y+4	; 0x04
    4364:	0e 94 4a 22 	call	0x4494	; 0x4494 <LCD_gotoRowColumn>
	LCD_displayString(LCD_RCString);
    4368:	89 81       	ldd	r24, Y+1	; 0x01
    436a:	9a 81       	ldd	r25, Y+2	; 0x02
    436c:	0e 94 7d 21 	call	0x42fa	; 0x42fa <LCD_displayString>
}
    4370:	0f 90       	pop	r0
    4372:	0f 90       	pop	r0
    4374:	0f 90       	pop	r0
    4376:	0f 90       	pop	r0
    4378:	cf 91       	pop	r28
    437a:	df 91       	pop	r29
    437c:	08 95       	ret

0000437e <LCD_clear>:

void LCD_clear (void)
{
    437e:	df 93       	push	r29
    4380:	cf 93       	push	r28
    4382:	cd b7       	in	r28, 0x3d	; 61
    4384:	de b7       	in	r29, 0x3e	; 62
    4386:	2e 97       	sbiw	r28, 0x0e	; 14
    4388:	0f b6       	in	r0, 0x3f	; 63
    438a:	f8 94       	cli
    438c:	de bf       	out	0x3e, r29	; 62
    438e:	0f be       	out	0x3f, r0	; 63
    4390:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand (0x01);                   /*hex 01 to clear display*/
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <LCD_sendCommand>
    4398:	80 e0       	ldi	r24, 0x00	; 0
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	a0 e8       	ldi	r26, 0x80	; 128
    439e:	bf e3       	ldi	r27, 0x3F	; 63
    43a0:	8b 87       	std	Y+11, r24	; 0x0b
    43a2:	9c 87       	std	Y+12, r25	; 0x0c
    43a4:	ad 87       	std	Y+13, r26	; 0x0d
    43a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    43aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    43ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    43ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    43b0:	20 e0       	ldi	r18, 0x00	; 0
    43b2:	30 e0       	ldi	r19, 0x00	; 0
    43b4:	4a ef       	ldi	r20, 0xFA	; 250
    43b6:	54 e4       	ldi	r21, 0x44	; 68
    43b8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22
    43c0:	8f 83       	std	Y+7, r24	; 0x07
    43c2:	98 87       	std	Y+8, r25	; 0x08
    43c4:	a9 87       	std	Y+9, r26	; 0x09
    43c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43c8:	6f 81       	ldd	r22, Y+7	; 0x07
    43ca:	78 85       	ldd	r23, Y+8	; 0x08
    43cc:	89 85       	ldd	r24, Y+9	; 0x09
    43ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    43d0:	20 e0       	ldi	r18, 0x00	; 0
    43d2:	30 e0       	ldi	r19, 0x00	; 0
    43d4:	40 e8       	ldi	r20, 0x80	; 128
    43d6:	5f e3       	ldi	r21, 0x3F	; 63
    43d8:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    43dc:	88 23       	and	r24, r24
    43de:	2c f4       	brge	.+10     	; 0x43ea <LCD_clear+0x6c>
		__ticks = 1;
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	9e 83       	std	Y+6, r25	; 0x06
    43e6:	8d 83       	std	Y+5, r24	; 0x05
    43e8:	3f c0       	rjmp	.+126    	; 0x4468 <LCD_clear+0xea>
	else if (__tmp > 65535)
    43ea:	6f 81       	ldd	r22, Y+7	; 0x07
    43ec:	78 85       	ldd	r23, Y+8	; 0x08
    43ee:	89 85       	ldd	r24, Y+9	; 0x09
    43f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f2:	20 e0       	ldi	r18, 0x00	; 0
    43f4:	3f ef       	ldi	r19, 0xFF	; 255
    43f6:	4f e7       	ldi	r20, 0x7F	; 127
    43f8:	57 e4       	ldi	r21, 0x47	; 71
    43fa:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    43fe:	18 16       	cp	r1, r24
    4400:	4c f5       	brge	.+82     	; 0x4454 <LCD_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4402:	6b 85       	ldd	r22, Y+11	; 0x0b
    4404:	7c 85       	ldd	r23, Y+12	; 0x0c
    4406:	8d 85       	ldd	r24, Y+13	; 0x0d
    4408:	9e 85       	ldd	r25, Y+14	; 0x0e
    440a:	20 e0       	ldi	r18, 0x00	; 0
    440c:	30 e0       	ldi	r19, 0x00	; 0
    440e:	40 e2       	ldi	r20, 0x20	; 32
    4410:	51 e4       	ldi	r21, 0x41	; 65
    4412:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4416:	dc 01       	movw	r26, r24
    4418:	cb 01       	movw	r24, r22
    441a:	bc 01       	movw	r22, r24
    441c:	cd 01       	movw	r24, r26
    441e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4422:	dc 01       	movw	r26, r24
    4424:	cb 01       	movw	r24, r22
    4426:	9e 83       	std	Y+6, r25	; 0x06
    4428:	8d 83       	std	Y+5, r24	; 0x05
    442a:	0f c0       	rjmp	.+30     	; 0x444a <LCD_clear+0xcc>
    442c:	88 ec       	ldi	r24, 0xC8	; 200
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	9c 83       	std	Y+4, r25	; 0x04
    4432:	8b 83       	std	Y+3, r24	; 0x03
    4434:	8b 81       	ldd	r24, Y+3	; 0x03
    4436:	9c 81       	ldd	r25, Y+4	; 0x04
    4438:	01 97       	sbiw	r24, 0x01	; 1
    443a:	f1 f7       	brne	.-4      	; 0x4438 <LCD_clear+0xba>
    443c:	9c 83       	std	Y+4, r25	; 0x04
    443e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4440:	8d 81       	ldd	r24, Y+5	; 0x05
    4442:	9e 81       	ldd	r25, Y+6	; 0x06
    4444:	01 97       	sbiw	r24, 0x01	; 1
    4446:	9e 83       	std	Y+6, r25	; 0x06
    4448:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    444a:	8d 81       	ldd	r24, Y+5	; 0x05
    444c:	9e 81       	ldd	r25, Y+6	; 0x06
    444e:	00 97       	sbiw	r24, 0x00	; 0
    4450:	69 f7       	brne	.-38     	; 0x442c <LCD_clear+0xae>
    4452:	14 c0       	rjmp	.+40     	; 0x447c <LCD_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4454:	6f 81       	ldd	r22, Y+7	; 0x07
    4456:	78 85       	ldd	r23, Y+8	; 0x08
    4458:	89 85       	ldd	r24, Y+9	; 0x09
    445a:	9a 85       	ldd	r25, Y+10	; 0x0a
    445c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4460:	dc 01       	movw	r26, r24
    4462:	cb 01       	movw	r24, r22
    4464:	9e 83       	std	Y+6, r25	; 0x06
    4466:	8d 83       	std	Y+5, r24	; 0x05
    4468:	8d 81       	ldd	r24, Y+5	; 0x05
    446a:	9e 81       	ldd	r25, Y+6	; 0x06
    446c:	9a 83       	std	Y+2, r25	; 0x02
    446e:	89 83       	std	Y+1, r24	; 0x01
    4470:	89 81       	ldd	r24, Y+1	; 0x01
    4472:	9a 81       	ldd	r25, Y+2	; 0x02
    4474:	01 97       	sbiw	r24, 0x01	; 1
    4476:	f1 f7       	brne	.-4      	; 0x4474 <LCD_clear+0xf6>
    4478:	9a 83       	std	Y+2, r25	; 0x02
    447a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_sendCommand (0x80);                   /*hex 80 to cursor at home */
    447c:	80 e8       	ldi	r24, 0x80	; 128
    447e:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <LCD_sendCommand>
}
    4482:	2e 96       	adiw	r28, 0x0e	; 14
    4484:	0f b6       	in	r0, 0x3f	; 63
    4486:	f8 94       	cli
    4488:	de bf       	out	0x3e, r29	; 62
    448a:	0f be       	out	0x3f, r0	; 63
    448c:	cd bf       	out	0x3d, r28	; 61
    448e:	cf 91       	pop	r28
    4490:	df 91       	pop	r29
    4492:	08 95       	ret

00004494 <LCD_gotoRowColumn>:
void LCD_gotoRowColumn (uint8 LCD_Row, uint8 LCD_Column)
{
    4494:	df 93       	push	r29
    4496:	cf 93       	push	r28
    4498:	00 d0       	rcall	.+0      	; 0x449a <LCD_gotoRowColumn+0x6>
    449a:	00 d0       	rcall	.+0      	; 0x449c <LCD_gotoRowColumn+0x8>
    449c:	cd b7       	in	r28, 0x3d	; 61
    449e:	de b7       	in	r29, 0x3e	; 62
    44a0:	89 83       	std	Y+1, r24	; 0x01
    44a2:	6a 83       	std	Y+2, r22	; 0x02
	switch (LCD_Column)
    44a4:	8a 81       	ldd	r24, Y+2	; 0x02
    44a6:	28 2f       	mov	r18, r24
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	3c 83       	std	Y+4, r19	; 0x04
    44ac:	2b 83       	std	Y+3, r18	; 0x03
    44ae:	8b 81       	ldd	r24, Y+3	; 0x03
    44b0:	9c 81       	ldd	r25, Y+4	; 0x04
    44b2:	81 30       	cpi	r24, 0x01	; 1
    44b4:	91 05       	cpc	r25, r1
    44b6:	31 f0       	breq	.+12     	; 0x44c4 <LCD_gotoRowColumn+0x30>
    44b8:	2b 81       	ldd	r18, Y+3	; 0x03
    44ba:	3c 81       	ldd	r19, Y+4	; 0x04
    44bc:	22 30       	cpi	r18, 0x02	; 2
    44be:	31 05       	cpc	r19, r1
    44c0:	31 f0       	breq	.+12     	; 0x44ce <LCD_gotoRowColumn+0x3a>
    44c2:	09 c0       	rjmp	.+18     	; 0x44d6 <LCD_gotoRowColumn+0x42>
	{
		case 1 :
		LCD_sendCommand(0x80 + LCD_Row);
    44c4:	89 81       	ldd	r24, Y+1	; 0x01
    44c6:	80 58       	subi	r24, 0x80	; 128
    44c8:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <LCD_sendCommand>
    44cc:	04 c0       	rjmp	.+8      	; 0x44d6 <LCD_gotoRowColumn+0x42>
		break;
		
		case 2:
		LCD_sendCommand(0xC0 + LCD_Row);
    44ce:	89 81       	ldd	r24, Y+1	; 0x01
    44d0:	80 54       	subi	r24, 0x40	; 64
    44d2:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <LCD_sendCommand>
		default :
		/*Do nothing*/
		break;
	}

}
    44d6:	0f 90       	pop	r0
    44d8:	0f 90       	pop	r0
    44da:	0f 90       	pop	r0
    44dc:	0f 90       	pop	r0
    44de:	cf 91       	pop	r28
    44e0:	df 91       	pop	r29
    44e2:	08 95       	ret

000044e4 <main>:
void Task_CalculateScore(void);
void TASK_CheckAnswer(void);
void Task_SendQuestion(void);

int main (void)
{
    44e4:	df 93       	push	r29
    44e6:	cf 93       	push	r28
    44e8:	cd b7       	in	r28, 0x3d	; 61
    44ea:	de b7       	in	r29, 0x3e	; 62
	DDRB = 1<<4;
    44ec:	e7 e3       	ldi	r30, 0x37	; 55
    44ee:	f0 e0       	ldi	r31, 0x00	; 0
    44f0:	80 e1       	ldi	r24, 0x10	; 16
    44f2:	80 83       	st	Z, r24
	PORTB |= 1<<4;
    44f4:	a8 e3       	ldi	r26, 0x38	; 56
    44f6:	b0 e0       	ldi	r27, 0x00	; 0
    44f8:	e8 e3       	ldi	r30, 0x38	; 56
    44fa:	f0 e0       	ldi	r31, 0x00	; 0
    44fc:	80 81       	ld	r24, Z
    44fe:	80 61       	ori	r24, 0x10	; 16
    4500:	8c 93       	st	X, r24
	LCD_init();
    4502:	0e 94 52 19 	call	0x32a4	; 0x32a4 <LCD_init>
	DDRD = 0xff;
    4506:	e1 e3       	ldi	r30, 0x31	; 49
    4508:	f0 e0       	ldi	r31, 0x00	; 0
    450a:	8f ef       	ldi	r24, 0xFF	; 255
    450c:	80 83       	st	Z, r24
	KPAD_Init();
    450e:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <KPAD_Init>
	Sos_Init();
    4512:	0e 94 67 16 	call	0x2cce	; 0x2cce <Sos_Init>
	//LCD_displayString("first question");
	//sing(1);
	//sing(2);


	Sos_CreateTask(TASK_CheckAnswer,10,0);
    4516:	8c ef       	ldi	r24, 0xFC	; 252
    4518:	92 e2       	ldi	r25, 0x22	; 34
    451a:	6a e0       	ldi	r22, 0x0A	; 10
    451c:	70 e0       	ldi	r23, 0x00	; 0
    451e:	40 e0       	ldi	r20, 0x00	; 0
    4520:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Sos_CreateTask>
	Sos_CreateTask(Task_SendQuestion,10,1);
    4524:	8e ea       	ldi	r24, 0xAE	; 174
    4526:	92 e2       	ldi	r25, 0x22	; 34
    4528:	6a e0       	ldi	r22, 0x0A	; 10
    452a:	70 e0       	ldi	r23, 0x00	; 0
    452c:	41 e0       	ldi	r20, 0x01	; 1
    452e:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Sos_CreateTask>
	Sos_CreateTask(Task_CalculateScore,10,2);
    4532:	83 ea       	ldi	r24, 0xA3	; 163
    4534:	93 e2       	ldi	r25, 0x23	; 35
    4536:	6a e0       	ldi	r22, 0x0A	; 10
    4538:	70 e0       	ldi	r23, 0x00	; 0
    453a:	42 e0       	ldi	r20, 0x02	; 2
    453c:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Sos_CreateTask>

	Sos_Run();
    4540:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <Sos_Run>
    4544:	80 e0       	ldi	r24, 0x00	; 0
    4546:	90 e0       	ldi	r25, 0x00	; 0

}
    4548:	cf 91       	pop	r28
    454a:	df 91       	pop	r29
    454c:	08 95       	ret

0000454e <TASK_Start>:

void TASK_Start()
{
    454e:	df 93       	push	r29
    4550:	cf 93       	push	r28
    4552:	cd b7       	in	r28, 0x3d	; 61
    4554:	de b7       	in	r29, 0x3e	; 62

}
    4556:	cf 91       	pop	r28
    4558:	df 91       	pop	r29
    455a:	08 95       	ret

0000455c <Task_SendQuestion>:
uint8 DoneRepeat=1;
void Task_SendQuestion (void)
{
    455c:	df 93       	push	r29
    455e:	cf 93       	push	r28
    4560:	cd b7       	in	r28, 0x3d	; 61
    4562:	de b7       	in	r29, 0x3e	; 62

	if (NewQus != PrevQus && DoneRepeat)
    4564:	90 91 16 02 	lds	r25, 0x0216
    4568:	80 91 87 01 	lds	r24, 0x0187
    456c:	98 17       	cp	r25, r24
    456e:	01 f1       	breq	.+64     	; 0x45b0 <Task_SendQuestion+0x54>
    4570:	80 91 ff 01 	lds	r24, 0x01FF
    4574:	88 23       	and	r24, r24
    4576:	e1 f0       	breq	.+56     	; 0x45b0 <Task_SendQuestion+0x54>
	{
		LCD_clear();
    4578:	0e 94 bf 21 	call	0x437e	; 0x437e <LCD_clear>
		LCD_displayString(Quistion[NewQus]);
    457c:	48 e8       	ldi	r20, 0x88	; 136
    457e:	51 e0       	ldi	r21, 0x01	; 1
    4580:	80 91 16 02 	lds	r24, 0x0216
    4584:	28 2f       	mov	r18, r24
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	c9 01       	movw	r24, r18
    458a:	82 95       	swap	r24
    458c:	92 95       	swap	r25
    458e:	90 7f       	andi	r25, 0xF0	; 240
    4590:	98 27       	eor	r25, r24
    4592:	80 7f       	andi	r24, 0xF0	; 240
    4594:	98 27       	eor	r25, r24
    4596:	82 0f       	add	r24, r18
    4598:	93 1f       	adc	r25, r19
    459a:	84 0f       	add	r24, r20
    459c:	95 1f       	adc	r25, r21
    459e:	0e 94 7d 21 	call	0x42fa	; 0x42fa <LCD_displayString>
		PrevQus=NewQus ;
    45a2:	80 91 16 02 	lds	r24, 0x0216
    45a6:	80 93 87 01 	sts	0x0187, r24
		DoneRepeat=1;
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	80 93 ff 01 	sts	0x01FF, r24
	}
	else
	{
		/*do nothing*/
	}
	if ((NewQus==MaxNumOfQus) && (DoneRepeat))
    45b0:	80 91 16 02 	lds	r24, 0x0216
    45b4:	86 30       	cpi	r24, 0x06	; 6
    45b6:	e9 f4       	brne	.+58     	; 0x45f2 <Task_SendQuestion+0x96>
    45b8:	80 91 ff 01 	lds	r24, 0x01FF
    45bc:	88 23       	and	r24, r24
    45be:	c9 f0       	breq	.+50     	; 0x45f2 <Task_SendQuestion+0x96>
	{
		PORTB |= 1<<4;
    45c0:	a8 e3       	ldi	r26, 0x38	; 56
    45c2:	b0 e0       	ldi	r27, 0x00	; 0
    45c4:	e8 e3       	ldi	r30, 0x38	; 56
    45c6:	f0 e0       	ldi	r31, 0x00	; 0
    45c8:	80 81       	ld	r24, Z
    45ca:	80 61       	ori	r24, 0x10	; 16
    45cc:	8c 93       	st	X, r24
		DoneRepeat=0;
    45ce:	10 92 ff 01 	sts	0x01FF, r1
		LCD_clear();
    45d2:	0e 94 bf 21 	call	0x437e	; 0x437e <LCD_clear>
		LCD_displayString("You got : ");
    45d6:	80 e6       	ldi	r24, 0x60	; 96
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	0e 94 7d 21 	call	0x42fa	; 0x42fa <LCD_displayString>
		LCD_displayChar(arr[result]);
    45de:	80 91 1b 02 	lds	r24, 0x021B
    45e2:	88 2f       	mov	r24, r24
    45e4:	90 e0       	ldi	r25, 0x00	; 0
    45e6:	fc 01       	movw	r30, r24
    45e8:	ec 50       	subi	r30, 0x0C	; 12
    45ea:	fe 4f       	sbci	r31, 0xFE	; 254
    45ec:	80 81       	ld	r24, Z
    45ee:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <LCD_displayChar>
	}
}
    45f2:	cf 91       	pop	r28
    45f4:	df 91       	pop	r29
    45f6:	08 95       	ret

000045f8 <TASK_CheckAnswer>:

void TASK_CheckAnswer(void)
{
    45f8:	df 93       	push	r29
    45fa:	cf 93       	push	r28
    45fc:	00 d0       	rcall	.+0      	; 0x45fe <TASK_CheckAnswer+0x6>
    45fe:	cd b7       	in	r28, 0x3d	; 61
    4600:	de b7       	in	r29, 0x3e	; 62
	if(flag==1){
    4602:	80 91 fe 01 	lds	r24, 0x01FE
    4606:	81 30       	cpi	r24, 0x01	; 1
    4608:	c1 f4       	brne	.+48     	; 0x463a <TASK_CheckAnswer+0x42>
		PORTB &= ~(1<<4);
    460a:	a8 e3       	ldi	r26, 0x38	; 56
    460c:	b0 e0       	ldi	r27, 0x00	; 0
    460e:	e8 e3       	ldi	r30, 0x38	; 56
    4610:	f0 e0       	ldi	r31, 0x00	; 0
    4612:	80 81       	ld	r24, Z
    4614:	8f 7e       	andi	r24, 0xEF	; 239
    4616:	8c 93       	st	X, r24
		var1 = KPAD_GetPressedKey();
    4618:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <KPAD_GetPressedKey>
    461c:	80 93 19 02 	sts	0x0219, r24
		if(old!=var1 && var1!=0)
    4620:	90 91 17 02 	lds	r25, 0x0217
    4624:	80 91 19 02 	lds	r24, 0x0219
    4628:	98 17       	cp	r25, r24
    462a:	39 f0       	breq	.+14     	; 0x463a <TASK_CheckAnswer+0x42>
    462c:	80 91 19 02 	lds	r24, 0x0219
    4630:	88 23       	and	r24, r24
    4632:	19 f0       	breq	.+6      	; 0x463a <TASK_CheckAnswer+0x42>
		{
			statevar=2;
    4634:	82 e0       	ldi	r24, 0x02	; 2
    4636:	80 93 1a 02 	sts	0x021A, r24
		}
	}
	switch(statevar)
    463a:	80 91 1a 02 	lds	r24, 0x021A
    463e:	28 2f       	mov	r18, r24
    4640:	30 e0       	ldi	r19, 0x00	; 0
    4642:	3a 83       	std	Y+2, r19	; 0x02
    4644:	29 83       	std	Y+1, r18	; 0x01
    4646:	89 81       	ldd	r24, Y+1	; 0x01
    4648:	9a 81       	ldd	r25, Y+2	; 0x02
    464a:	82 30       	cpi	r24, 0x02	; 2
    464c:	91 05       	cpc	r25, r1
    464e:	39 f0       	breq	.+14     	; 0x465e <TASK_CheckAnswer+0x66>
    4650:	29 81       	ldd	r18, Y+1	; 0x01
    4652:	3a 81       	ldd	r19, Y+2	; 0x02
    4654:	23 30       	cpi	r18, 0x03	; 3
    4656:	31 05       	cpc	r19, r1
    4658:	09 f4       	brne	.+2      	; 0x465c <TASK_CheckAnswer+0x64>
    465a:	6a c0       	rjmp	.+212    	; 0x4730 <TASK_CheckAnswer+0x138>
    465c:	6f c0       	rjmp	.+222    	; 0x473c <TASK_CheckAnswer+0x144>
	{
	case 1 :

		break;
	case 2 :
		var2++;
    465e:	80 91 18 02 	lds	r24, 0x0218
    4662:	8f 5f       	subi	r24, 0xFF	; 255
    4664:	80 93 18 02 	sts	0x0218, r24
		flag=0;
    4668:	10 92 fe 01 	sts	0x01FE, r1
		old=var1;
    466c:	80 91 19 02 	lds	r24, 0x0219
    4670:	80 93 17 02 	sts	0x0217, r24
		if(var2==5)
    4674:	80 91 18 02 	lds	r24, 0x0218
    4678:	85 30       	cpi	r24, 0x05	; 5
    467a:	09 f0       	breq	.+2      	; 0x467e <TASK_CheckAnswer+0x86>
    467c:	5f c0       	rjmp	.+190    	; 0x473c <TASK_CheckAnswer+0x144>
		{
			if(var1== 1)
    467e:	80 91 19 02 	lds	r24, 0x0219
    4682:	81 30       	cpi	r24, 0x01	; 1
    4684:	f1 f4       	brne	.+60     	; 0x46c2 <TASK_CheckAnswer+0xca>
			{
				currans=1;
    4686:	81 e0       	ldi	r24, 0x01	; 1
    4688:	80 93 1c 02 	sts	0x021C, r24
				flagforres=1;
    468c:	81 e0       	ldi	r24, 0x01	; 1
    468e:	80 93 1d 02 	sts	0x021D, r24
				if(DoneRepeat==0){
    4692:	80 91 ff 01 	lds	r24, 0x01FF
    4696:	88 23       	and	r24, r24
    4698:	09 f0       	breq	.+2      	; 0x469c <TASK_CheckAnswer+0xa4>
    469a:	41 c0       	rjmp	.+130    	; 0x471e <TASK_CheckAnswer+0x126>
					LCD_clear();
    469c:	0e 94 bf 21 	call	0x437e	; 0x437e <LCD_clear>
				LCD_displayStringRowColumn("Press start", 0, 1);
    46a0:	8b e6       	ldi	r24, 0x6B	; 107
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	60 e0       	ldi	r22, 0x00	; 0
    46a6:	41 e0       	ldi	r20, 0x01	; 1
    46a8:	0e 94 a6 21 	call	0x434c	; 0x434c <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn("to play", 0, 2);
    46ac:	87 e7       	ldi	r24, 0x77	; 119
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	60 e0       	ldi	r22, 0x00	; 0
    46b2:	42 e0       	ldi	r20, 0x02	; 2
    46b4:	0e 94 a6 21 	call	0x434c	; 0x434c <LCD_displayStringRowColumn>
				PORTD = 0x02;
    46b8:	e2 e3       	ldi	r30, 0x32	; 50
    46ba:	f0 e0       	ldi	r31, 0x00	; 0
    46bc:	82 e0       	ldi	r24, 0x02	; 2
    46be:	80 83       	st	Z, r24
    46c0:	2e c0       	rjmp	.+92     	; 0x471e <TASK_CheckAnswer+0x126>
				}
			}
			else if(var1== 3)
    46c2:	80 91 19 02 	lds	r24, 0x0219
    46c6:	83 30       	cpi	r24, 0x03	; 3
    46c8:	e1 f4       	brne	.+56     	; 0x4702 <TASK_CheckAnswer+0x10a>
			{
				currans=0;
    46ca:	10 92 1c 02 	sts	0x021C, r1
				flagforres=1;
    46ce:	81 e0       	ldi	r24, 0x01	; 1
    46d0:	80 93 1d 02 	sts	0x021D, r24
				if(DoneRepeat==0){
    46d4:	80 91 ff 01 	lds	r24, 0x01FF
    46d8:	88 23       	and	r24, r24
    46da:	09 f5       	brne	.+66     	; 0x471e <TASK_CheckAnswer+0x126>
					LCD_clear();
    46dc:	0e 94 bf 21 	call	0x437e	; 0x437e <LCD_clear>
				LCD_displayStringRowColumn("Press start", 0, 1);
    46e0:	8b e6       	ldi	r24, 0x6B	; 107
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	60 e0       	ldi	r22, 0x00	; 0
    46e6:	41 e0       	ldi	r20, 0x01	; 1
    46e8:	0e 94 a6 21 	call	0x434c	; 0x434c <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn("to play", 0, 2);
    46ec:	87 e7       	ldi	r24, 0x77	; 119
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	60 e0       	ldi	r22, 0x00	; 0
    46f2:	42 e0       	ldi	r20, 0x02	; 2
    46f4:	0e 94 a6 21 	call	0x434c	; 0x434c <LCD_displayStringRowColumn>
				PORTD = 0x02;
    46f8:	e2 e3       	ldi	r30, 0x32	; 50
    46fa:	f0 e0       	ldi	r31, 0x00	; 0
    46fc:	82 e0       	ldi	r24, 0x02	; 2
    46fe:	80 83       	st	Z, r24
    4700:	0e c0       	rjmp	.+28     	; 0x471e <TASK_CheckAnswer+0x126>
				}
			}
			else if(var1==2)
    4702:	80 91 19 02 	lds	r24, 0x0219
    4706:	82 30       	cpi	r24, 0x02	; 2
    4708:	51 f4       	brne	.+20     	; 0x471e <TASK_CheckAnswer+0x126>
			{
				DoneRepeat=1;
    470a:	81 e0       	ldi	r24, 0x01	; 1
    470c:	80 93 ff 01 	sts	0x01FF, r24
				NewQus=0;
    4710:	10 92 16 02 	sts	0x0216, r1
				PrevQus=1;
    4714:	81 e0       	ldi	r24, 0x01	; 1
    4716:	80 93 87 01 	sts	0x0187, r24
				result=0;
    471a:	10 92 1b 02 	sts	0x021B, r1
			}
			flag=1;
    471e:	81 e0       	ldi	r24, 0x01	; 1
    4720:	80 93 fe 01 	sts	0x01FE, r24
			statevar=3;
    4724:	83 e0       	ldi	r24, 0x03	; 3
    4726:	80 93 1a 02 	sts	0x021A, r24
			var2=0;
    472a:	10 92 18 02 	sts	0x0218, r1
    472e:	06 c0       	rjmp	.+12     	; 0x473c <TASK_CheckAnswer+0x144>
		}
		break;
	case 3 :
	{
		if(var1==0)
    4730:	80 91 19 02 	lds	r24, 0x0219
    4734:	88 23       	and	r24, r24
    4736:	11 f4       	brne	.+4      	; 0x473c <TASK_CheckAnswer+0x144>
		{
			old=0;
    4738:	10 92 17 02 	sts	0x0217, r1
		}
	}
	break;
	}

}
    473c:	0f 90       	pop	r0
    473e:	0f 90       	pop	r0
    4740:	cf 91       	pop	r28
    4742:	df 91       	pop	r29
    4744:	08 95       	ret

00004746 <Task_CalculateScore>:

void Task_CalculateScore (void)
{
    4746:	df 93       	push	r29
    4748:	cf 93       	push	r28
    474a:	cd b7       	in	r28, 0x3d	; 61
    474c:	de b7       	in	r29, 0x3e	; 62
	if (flagforres==1)
    474e:	80 91 1d 02 	lds	r24, 0x021D
    4752:	81 30       	cpi	r24, 0x01	; 1
    4754:	c1 f4       	brne	.+48     	; 0x4786 <Task_CalculateScore+0x40>
	{
		flagforres=0;
    4756:	10 92 1d 02 	sts	0x021D, r1
		if(ANS[PrevQus]==currans)
    475a:	80 91 87 01 	lds	r24, 0x0187
    475e:	88 2f       	mov	r24, r24
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	fc 01       	movw	r30, r24
    4764:	e2 51       	subi	r30, 0x12	; 18
    4766:	fe 4f       	sbci	r31, 0xFE	; 254
    4768:	90 81       	ld	r25, Z
    476a:	80 91 1c 02 	lds	r24, 0x021C
    476e:	98 17       	cp	r25, r24
    4770:	29 f4       	brne	.+10     	; 0x477c <Task_CalculateScore+0x36>
		{
			result++;
    4772:	80 91 1b 02 	lds	r24, 0x021B
    4776:	8f 5f       	subi	r24, 0xFF	; 255
    4778:	80 93 1b 02 	sts	0x021B, r24
		}
		NewQus++;
    477c:	80 91 16 02 	lds	r24, 0x0216
    4780:	8f 5f       	subi	r24, 0xFF	; 255
    4782:	80 93 16 02 	sts	0x0216, r24
	}
}
    4786:	cf 91       	pop	r28
    4788:	df 91       	pop	r29
    478a:	08 95       	ret

0000478c <__udivmodsi4>:
    478c:	a1 e2       	ldi	r26, 0x21	; 33
    478e:	1a 2e       	mov	r1, r26
    4790:	aa 1b       	sub	r26, r26
    4792:	bb 1b       	sub	r27, r27
    4794:	fd 01       	movw	r30, r26
    4796:	0d c0       	rjmp	.+26     	; 0x47b2 <__udivmodsi4_ep>

00004798 <__udivmodsi4_loop>:
    4798:	aa 1f       	adc	r26, r26
    479a:	bb 1f       	adc	r27, r27
    479c:	ee 1f       	adc	r30, r30
    479e:	ff 1f       	adc	r31, r31
    47a0:	a2 17       	cp	r26, r18
    47a2:	b3 07       	cpc	r27, r19
    47a4:	e4 07       	cpc	r30, r20
    47a6:	f5 07       	cpc	r31, r21
    47a8:	20 f0       	brcs	.+8      	; 0x47b2 <__udivmodsi4_ep>
    47aa:	a2 1b       	sub	r26, r18
    47ac:	b3 0b       	sbc	r27, r19
    47ae:	e4 0b       	sbc	r30, r20
    47b0:	f5 0b       	sbc	r31, r21

000047b2 <__udivmodsi4_ep>:
    47b2:	66 1f       	adc	r22, r22
    47b4:	77 1f       	adc	r23, r23
    47b6:	88 1f       	adc	r24, r24
    47b8:	99 1f       	adc	r25, r25
    47ba:	1a 94       	dec	r1
    47bc:	69 f7       	brne	.-38     	; 0x4798 <__udivmodsi4_loop>
    47be:	60 95       	com	r22
    47c0:	70 95       	com	r23
    47c2:	80 95       	com	r24
    47c4:	90 95       	com	r25
    47c6:	9b 01       	movw	r18, r22
    47c8:	ac 01       	movw	r20, r24
    47ca:	bd 01       	movw	r22, r26
    47cc:	cf 01       	movw	r24, r30
    47ce:	08 95       	ret

000047d0 <__mulsi3>:
    47d0:	62 9f       	mul	r22, r18
    47d2:	d0 01       	movw	r26, r0
    47d4:	73 9f       	mul	r23, r19
    47d6:	f0 01       	movw	r30, r0
    47d8:	82 9f       	mul	r24, r18
    47da:	e0 0d       	add	r30, r0
    47dc:	f1 1d       	adc	r31, r1
    47de:	64 9f       	mul	r22, r20
    47e0:	e0 0d       	add	r30, r0
    47e2:	f1 1d       	adc	r31, r1
    47e4:	92 9f       	mul	r25, r18
    47e6:	f0 0d       	add	r31, r0
    47e8:	83 9f       	mul	r24, r19
    47ea:	f0 0d       	add	r31, r0
    47ec:	74 9f       	mul	r23, r20
    47ee:	f0 0d       	add	r31, r0
    47f0:	65 9f       	mul	r22, r21
    47f2:	f0 0d       	add	r31, r0
    47f4:	99 27       	eor	r25, r25
    47f6:	72 9f       	mul	r23, r18
    47f8:	b0 0d       	add	r27, r0
    47fa:	e1 1d       	adc	r30, r1
    47fc:	f9 1f       	adc	r31, r25
    47fe:	63 9f       	mul	r22, r19
    4800:	b0 0d       	add	r27, r0
    4802:	e1 1d       	adc	r30, r1
    4804:	f9 1f       	adc	r31, r25
    4806:	bd 01       	movw	r22, r26
    4808:	cf 01       	movw	r24, r30
    480a:	11 24       	eor	r1, r1
    480c:	08 95       	ret

0000480e <__prologue_saves__>:
    480e:	2f 92       	push	r2
    4810:	3f 92       	push	r3
    4812:	4f 92       	push	r4
    4814:	5f 92       	push	r5
    4816:	6f 92       	push	r6
    4818:	7f 92       	push	r7
    481a:	8f 92       	push	r8
    481c:	9f 92       	push	r9
    481e:	af 92       	push	r10
    4820:	bf 92       	push	r11
    4822:	cf 92       	push	r12
    4824:	df 92       	push	r13
    4826:	ef 92       	push	r14
    4828:	ff 92       	push	r15
    482a:	0f 93       	push	r16
    482c:	1f 93       	push	r17
    482e:	cf 93       	push	r28
    4830:	df 93       	push	r29
    4832:	cd b7       	in	r28, 0x3d	; 61
    4834:	de b7       	in	r29, 0x3e	; 62
    4836:	ca 1b       	sub	r28, r26
    4838:	db 0b       	sbc	r29, r27
    483a:	0f b6       	in	r0, 0x3f	; 63
    483c:	f8 94       	cli
    483e:	de bf       	out	0x3e, r29	; 62
    4840:	0f be       	out	0x3f, r0	; 63
    4842:	cd bf       	out	0x3d, r28	; 61
    4844:	09 94       	ijmp

00004846 <__epilogue_restores__>:
    4846:	2a 88       	ldd	r2, Y+18	; 0x12
    4848:	39 88       	ldd	r3, Y+17	; 0x11
    484a:	48 88       	ldd	r4, Y+16	; 0x10
    484c:	5f 84       	ldd	r5, Y+15	; 0x0f
    484e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4850:	7d 84       	ldd	r7, Y+13	; 0x0d
    4852:	8c 84       	ldd	r8, Y+12	; 0x0c
    4854:	9b 84       	ldd	r9, Y+11	; 0x0b
    4856:	aa 84       	ldd	r10, Y+10	; 0x0a
    4858:	b9 84       	ldd	r11, Y+9	; 0x09
    485a:	c8 84       	ldd	r12, Y+8	; 0x08
    485c:	df 80       	ldd	r13, Y+7	; 0x07
    485e:	ee 80       	ldd	r14, Y+6	; 0x06
    4860:	fd 80       	ldd	r15, Y+5	; 0x05
    4862:	0c 81       	ldd	r16, Y+4	; 0x04
    4864:	1b 81       	ldd	r17, Y+3	; 0x03
    4866:	aa 81       	ldd	r26, Y+2	; 0x02
    4868:	b9 81       	ldd	r27, Y+1	; 0x01
    486a:	ce 0f       	add	r28, r30
    486c:	d1 1d       	adc	r29, r1
    486e:	0f b6       	in	r0, 0x3f	; 63
    4870:	f8 94       	cli
    4872:	de bf       	out	0x3e, r29	; 62
    4874:	0f be       	out	0x3f, r0	; 63
    4876:	cd bf       	out	0x3d, r28	; 61
    4878:	ed 01       	movw	r28, r26
    487a:	08 95       	ret

0000487c <_exit>:
    487c:	f8 94       	cli

0000487e <__stop_program>:
    487e:	ff cf       	rjmp	.-2      	; 0x487e <__stop_program>
